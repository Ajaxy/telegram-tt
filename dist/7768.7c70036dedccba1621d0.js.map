{"version":3,"file":"7768.7c70036dedccba1621d0.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, stars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n  };\n\n  payInputStarInvoice(global, inputInvoice, stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  RESALE_GIFTS_LIMIT,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => ref?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className} ref={ref}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n      {shouldRenderContextMenu && renderContextMenu()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage peerId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isChatMonoforum={isChatMonoforum}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n          canPost={canPost}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPriceInStars) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPriceInStars ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","sendStarPaymentForm","directInfo","formId","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","isTon","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","ribbonText","resellPriceInStars","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","renderProfileInfo","profileId","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","nonInteractive","noLoop","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}