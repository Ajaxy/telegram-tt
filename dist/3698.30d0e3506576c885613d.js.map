{"version":3,"file":"3698.30d0e3506576c885613d.js","mappings":"sFA0MAA,EAAOC,QAlMP,SAAiBC,GACf,MAAMC,EAAU,CAAEC,SAAU,CAC1BF,EAAKC,QAAQ,KAAM,KACnBD,EAAKC,QACH,MACA,MACA,CAAEE,SAAU,CAAE,YAIZC,EAAS,CACbC,UAAW,OACXC,MAAO,OACPC,IAAK,QAGDC,EAAe,CACnBH,UAAW,OACXC,MAAO,KACPC,IAAK,KAGDE,EAAc,CAClBJ,UAAW,OACXC,MAAO,kBACPI,UAAW,GAGPC,EAAO,CACXL,MAAO,MACPC,IAAK,MACLK,QAAS,IACTT,SAAU,CACRC,EACAI,EACA,CACEH,UAAW,OACXC,MAAO,0CAETN,EAAKa,QAAQb,EAAKc,WAAY,CAAER,MAAO,kBACvCL,IAkBEc,EAAgB,aAChBC,EAAY,mBAIZC,EAAS,CACbZ,UAAW,SACXK,UAAW,EACXR,SAAU,CAER,CAAEgB,MAAO,OAAOH,UAAsBA,kBAAmCA,WAEzE,CAAEG,MAAO,cAAcF,UAAkBA,kBAA+BD,WAExE,CAAEG,MAAO,2BAET,CAAEA,MAAO,4BAIb,MAAO,CACLC,KAAM,UACNC,QAAS,CAAE,MACXC,SACE,wOAIFlB,SAAU,CAER,CACEmB,cAAe,SACff,IAAK,QACLc,SAAU,eACVlB,SAAU,CACRQ,EACAV,GAEFW,QAAS,YAEX,CACEN,MAAO,eACPC,IAAK,IACLc,SAAU,6BACVlB,SAAU,CACRQ,EACAV,GAEFW,QAAS,YAEX,CACEP,UAAW,QACXC,MAAO,8BACPC,IAAK,QACLc,SAAU,8BACVlB,SAAU,CACRM,EACAE,EACAV,IAGJ,CACEI,UAAW,QACXC,MAAO,0BACPC,IAAK,IACLc,SAAU,oCACVlB,SAAU,CACRC,EACAK,EACAE,EAnFO,CACbL,MAAO,KACPC,IAAK,KACLJ,SAAUQ,EAAKR,UAkFTF,IAGJ,CACEqB,cAAe,UACff,IAAK,IACLJ,SAAU,CACRM,EACAE,EACAV,IAGJ,CACEqB,cAAe,sBACff,IAAK,IACLJ,SAAU,CACRH,EAAKuB,cACLtB,IAGJ,CACEK,MAAO,gBACPC,IAAK,IACLc,SAAU,uEAEVlB,SAAU,CACRM,EACAT,EAAKwB,kBACLvB,IAGJ,CACEI,UAAW,OACXC,MAAO,kCACPC,IAAK,KAGPH,EACAI,EAKA,CACEiB,MAAO,SACPnB,MAAO,aACPC,IAAK,IACLJ,SAAU,CACR,CACEsB,MAAO,cACPP,MAAO,SAIblB,EAAKwB,kBACLP,EACAR,EACAT,EAAKa,QAAQb,EAAKc,WAAY,CAAER,MAAO,mBACvCL,EACA,CACEK,MAAO,UAGf,C","sources":["webpack://telegram-t/./node_modules/highlight.js/lib/languages/haskell.js"],"sourcesContent":["/*\nLanguage: Haskell\nAuthor: Jeremy Hull <sourdrums@gmail.com>\nContributors: Zena Treep <zena.treep@gmail.com>\nWebsite: https://www.haskell.org\nCategory: functional\n*/\n\nfunction haskell(hljs) {\n  const COMMENT = { variants: [\n    hljs.COMMENT('--', '$'),\n    hljs.COMMENT(\n      /\\{-/,\n      /-\\}/,\n      { contains: [ 'self' ] }\n    )\n  ] };\n\n  const PRAGMA = {\n    className: 'meta',\n    begin: /\\{-#/,\n    end: /#-\\}/\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '^#',\n    end: '$'\n  };\n\n  const CONSTRUCTOR = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (build-in, infix).\n    relevance: 0\n  };\n\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    illegal: '\"',\n    contains: [\n      PRAGMA,\n      PREPROCESSOR,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'\n      },\n      hljs.inherit(hljs.TITLE_MODE, { begin: '[_a-z][\\\\w\\']*' }),\n      COMMENT\n    ]\n  };\n\n  const RECORD = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: LIST.contains\n  };\n\n  /* See:\n\n     - https://www.haskell.org/onlinereport/lexemes.html\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/binary_literals.html\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/numeric_underscores.html\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/hex_float_literals.html\n\n  */\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const binaryDigits = '([01]_*)+';\n  const octalDigits = '([0-7]_*)+';\n\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      { match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b` },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      { match: `\\\\b0[xX]_*(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b` },\n      // octal-literal\n      { match: `\\\\b0[oO](${octalDigits})\\\\b` },\n      // binary-literal\n      { match: `\\\\b0[bB](${binaryDigits})\\\\b` }\n    ]\n  };\n\n  return {\n    name: 'Haskell',\n    aliases: [ 'hs' ],\n    keywords:\n      'let in if then else case of where do module import hiding '\n      + 'qualified type data newtype deriving class instance as default '\n      + 'infix infixl infixr foreign export ccall stdcall cplusplus '\n      + 'jvm dotnet safe unsafe family forall mdo proc rec',\n    contains: [\n      // Top-level constructions.\n      {\n        beginKeywords: 'module',\n        end: 'where',\n        keywords: 'module where',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: '\\\\bimport\\\\b',\n        end: '$',\n        keywords: 'import qualified as hiding',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        className: 'class',\n        begin: '^(\\\\s*)?(class|instance)\\\\b',\n        end: 'where',\n        keywords: 'class family instance where',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        className: 'class',\n        begin: '\\\\b(data|(new)?type)\\\\b',\n        end: '$',\n        keywords: 'data family type newtype deriving',\n        contains: [\n          PRAGMA,\n          CONSTRUCTOR,\n          LIST,\n          RECORD,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'default',\n        end: '$',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'infix infixl infixr',\n        end: '$',\n        contains: [\n          hljs.C_NUMBER_MODE,\n          COMMENT\n        ]\n      },\n      {\n        begin: '\\\\bforeign\\\\b',\n        end: '$',\n        keywords: 'foreign import export ccall stdcall cplusplus jvm '\n                  + 'dotnet safe unsafe',\n        contains: [\n          CONSTRUCTOR,\n          hljs.QUOTE_STRING_MODE,\n          COMMENT\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '#!\\\\/usr\\\\/bin\\\\/env\\ runhaskell',\n        end: '$'\n      },\n      // \"Whitespaces\".\n      PRAGMA,\n      PREPROCESSOR,\n\n      // Literals and names.\n\n      // Single characters.\n      {\n        scope: 'string',\n        begin: /'(?=\\\\?.')/,\n        end: /'/,\n        contains: [\n          {\n            scope: 'char.escape',\n            match: /\\\\./,\n          },\n        ]\n      },\n      hljs.QUOTE_STRING_MODE,\n      NUMBER,\n      CONSTRUCTOR,\n      hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\\\w\\']*' }),\n      COMMENT,\n      { // No markup, relevance booster\n        begin: '->|<-' }\n    ]\n  };\n}\n\nmodule.exports = haskell;\n"],"names":["module","exports","hljs","COMMENT","variants","contains","PRAGMA","className","begin","end","PREPROCESSOR","CONSTRUCTOR","relevance","LIST","illegal","inherit","TITLE_MODE","decimalDigits","hexDigits","NUMBER","match","name","aliases","keywords","beginKeywords","C_NUMBER_MODE","QUOTE_STRING_MODE","scope"],"sourceRoot":""}