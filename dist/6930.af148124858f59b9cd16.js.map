{"version":3,"file":"6930.af148124858f59b9cd16.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.module.scss?0f0d","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.module.scss?6666","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          <StarIcon type=\"gold\" size=\"middle\" />\n          {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n          {withAddButton && (\n            <BadgeButton\n              className={styles.addStarsButton}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openStarsBalanceModal({})}\n            >\n              <Icon\n                className={styles.addStarsIcon}\n                name=\"add\"\n              />\n            </BadgeButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n\n  if (transaction.isGiftResale) {\n    return isNegativeStarsAmount(transaction.stars)\n      ? lang('StarGiftSaleTransaction')\n      : lang('StarGiftPurchaseTransaction');\n  }\n\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) return oldLang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isGiftResale && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { PAID_MESSAGES_PURPOSE } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium, shouldForceHeight,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              isText\n              noForcedUpperCase\n              className={styles.starButton}\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const shouldForceHeight = Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"radialPattern\":\"UvhsGZLf\",\"amount\":\"zTVWZg63\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n  ApiStarsAmount,\n} from '../../../api/types';\n\nimport {\n  formatStarsTransactionAmount,\n} from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport StarIcon from '../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: string;\n  className?: string;\n  resellPrice?: ApiStarsAmount;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  className,\n  resellPrice,\n}: OwnProps) => {\n  const lang = useLang();\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={styles.transitionSlide}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {subtitle && (\n        <p className={styles.subtitle} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n          {subtitle}\n        </p>\n      )}\n      {resellPrice && (\n        <p className={styles.amount}>\n          <span>\n            {formatStarsTransactionAmount(lang, resellPrice)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n  let didUpdate = false;\n\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  useMemo(() => { activeKey.current += 1; didUpdate = true; }, deps);\n\n  if (noAnimation && didUpdate) activeKey.current -= 1;\n\n  return activeKey.current;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"refunded\":\"sxWAwxTd\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal,\n  peer,\n  canPlayAnimatedEmojis,\n  topSticker,\n  paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift, isGiftResale,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n          resellPrice={transaction.stars}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n          {transaction.isRefund && (\n            <p className={styles.refunded}>{lang('Refunded')}</p>\n          )}\n        </p>\n        {transaction.paidMessages && transaction.starRefCommision && paidMessageCommission\n        && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && !transaction.paidMessages && !isGiftResale) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    if (isGiftResale) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        isNegativeStarsAmount(transaction.stars)\n          ? lang('StarGiftSaleTransaction')\n          : lang('StarGiftPurchaseTransaction'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.stars.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker, paidMessageCommission]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />) }\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: '0',\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          mediaType: 'action',\n          type: 'starGift',\n          message: giftMessage?.length ? {\n            text: giftMessage,\n          } : undefined,\n          isNameHidden: shouldHideName || undefined,\n          starsToConvert: gift.starsToConvert,\n          canUpgrade: shouldPayForUpgrade || undefined,\n          alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n          gift,\n          peerId,\n          fromId: currentUserId,\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [peerId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && gift.upgradeStars && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && gift.upgradeStars && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : formatCurrency(lang, gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : gift.months}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n}) => {\n  const {\n    closeGiftModal,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== 'XTR');\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n        && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && !!upgradeStars);\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={peer}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(styles.header, !shouldShowHeader && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : 0}\n      >\n        {!isGiftScreen && renderMainScreen()}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'limited') return -1;\n  if (category === 'stock') return 0;\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef0cKSqQ\",\"giftPreview\":\"IvuNzslN\",\"backdrop\":\"dNukis4X\",\"arrow\":\"oufsMLLF\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiStarGiftUnique,\n} from '../../../api/types';\n\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\n\nimport styles from './GiftTransferPreview.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer;\n  gift: ApiStarGiftUnique;\n};\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferPreview = ({\n  peer,\n  gift,\n}: OwnProps) => {\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift);\n  }, [gift]);\n\n  if (!giftAttributes) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.giftPreview}>\n        <RadialPatternBackground\n          className={styles.backdrop}\n          backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n          patternColor={giftAttributes.backdrop?.patternColor}\n          patternIcon={giftAttributes.pattern?.sticker}\n        />\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          size={GIFT_STICKER_SIZE}\n          sticker={giftAttributes.model?.sticker}\n        />\n      </div>\n      <Icon name=\"next\" className={styles.arrow} />\n      <Avatar\n        peer={peer}\n        size={AVATAR_SIZE}\n        className={styles.avatar}\n      />\n    </div>\n  );\n};\n\nexport default memo(GiftTransferPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"headerSplitButton\":\"XOMI_4PO\",\"headerButton\":\"WA0INleU\",\"giftResalePriceContainer\":\"BN8gf5y6\",\"giftResalePriceStar\":\"H_q8o2vY\",\"left\":\"aOhTHZlf\",\"right\":\"rJOB1u5Q\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"starAmountIcon\":\"_5guecUe\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n  currentUser?: ApiUser;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    buyStarGift,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState<boolean>(false);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  const resellPriceInStars = isGiftUnique ? gift.resellPriceInStars : undefined;\n  const canBuyGift = !canManage && Boolean(resellPriceInStars);\n\n  const giftOwnerTitle = (() => {\n    if (!isGiftUnique) return undefined;\n    const { ownerName, ownerId } = gift;\n    const global = getGlobal(); // Peer titles do not need to be reactive\n    const owner = ownerId ? selectPeer(global, ownerId) : undefined;\n    return owner ? getPeerTitle(lang, owner) : ownerName;\n  })();\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId! });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const handleBuyGift = useLastCallback(() => {\n    if (!savedGift || gift?.type !== 'starGiftUnique' || !gift.resellPriceInStars) return;\n    setIsConfirmModalOpen(true);\n  });\n\n  const closeConfirmModal = useLastCallback(() => {\n    setIsConfirmModalOpen(false);\n  });\n\n  const handleConfirmBuyGift = useLastCallback(() => {\n    if (!savedGift || gift?.type !== 'starGiftUnique' || !gift.resellPriceInStars) return;\n    closeConfirmModal();\n    buyStarGift({ slug: gift.slug, stars: gift.resellPriceInStars });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger }) => (\n      <div\n        className={buildClassName(\n          styles.headerButton,\n          styles.left,\n        )}\n        tabIndex={0}\n        role=\"button\"\n        aria-haspopup=\"menu\"\n        aria-label={lang('AriaMoreButton')}\n        onClick={onTrigger}\n      >\n        <Icon\n          name=\"more\"\n          className={styles.icon}\n        />\n      </div>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canBuyGift) {\n      return (\n        <Button noForcedUpperCase size=\"smaller\" onClick={handleBuyGift}>\n          {lang('ButtonBuyGift', {\n            stars: formatStarsAsIcon(lang, resellPriceInStars!, { asFont: true }),\n          }, { withNodes: true })}\n        </Button>\n      );\n    }\n\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        {Boolean(canManage && resellPriceInStars) && (\n          <div className={styles.giftResalePriceContainer}>\n            {formatStarsAsIcon(lang, resellPriceInStars!, {\n              asFont: true,\n              className: styles.giftResalePriceStar,\n            })}\n          </div>\n        )}\n        <div className={styles.headerSplitButton}>\n          {isOpen && uniqueGiftContextMenu}\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon\n              name=\"close\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {description && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n            {canManage && <BadgeButton onClick={handleOpenUpgradeModal}>{lang('GiftInfoUpgradeBadge')}</BadgeButton>}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink || canBuyGift) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {!canBuyGift && isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n            {canBuyGift && giftOwnerTitle && (\n              <div>\n                {lang('GiftInfoBuyGift', {\n                  user: giftOwnerTitle,\n                }, { withNodes: true })}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n    canBuyGift, giftOwnerTitle, isOpen, resellPriceInStars,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n        withBalanceBar={Boolean(canBuyGift)}\n        isLowStackPriority\n      />\n      {uniqueGift && currentUser && resellPriceInStars && (\n        <ConfirmDialog\n          isOpen={isConfirmModalOpen}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={lang('ButtonBuyGift', {\n            stars: formatStarsAsIcon(lang, resellPriceInStars!, { asFont: true }),\n          }, { withNodes: true })}\n          confirmHandler={handleConfirmBuyGift}\n        >\n\n          <GiftTransferPreview\n            peer={currentUser}\n            gift={uniqueGift}\n          />\n          <p>\n            {lang('GiftBuyConfirmDescription', {\n              gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n              stars: formatStarsAsText(lang, resellPriceInStars),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </p>\n        </ConfirmDialog>\n      )}\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      targetPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n      currentUser,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionContainer\":\"wqkAvYGE\",\"descriptionPrice\":\"r9R0VR_w\",\"inputPrice\":\"ElDo1Bru\"};","import React, {\n  memo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftResalePriceComposerModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftResalePriceComposerModal'];\n};\n\nexport type StateProps = {\n  starsStargiftResaleCommissionPermille?: number;\n  starsStargiftResaleAmountMin: number;\n  starsStargiftResaleAmountMax?: number;\n  starsUsdWithdrawRate?: number;\n};\n\nconst GiftResalePriceComposerModal = ({\n  modal, starsStargiftResaleCommissionPermille,\n  starsStargiftResaleAmountMin, starsStargiftResaleAmountMax, starsUsdWithdrawRate,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftResalePriceComposerModal,\n    closeGiftInfoModal,\n    updateStarGiftPrice,\n    showNotification,\n  } = getActions();\n  const isOpen = Boolean(modal);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const hasPrice = Boolean(price);\n\n  const lang = useLang();\n\n  const handleChangePrice = useLastCallback((e) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : starsStargiftResaleAmountMax ? Math.min(number, starsStargiftResaleAmountMax) : number;\n    setPrice(result);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiftResalePriceComposerModal();\n  });\n\n  const handleSellGift = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift || !price) return;\n    closeGiftResalePriceComposerModal();\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price });\n    showNotification({\n      icon: 'sell-outline',\n      message: {\n        key: 'NotificationGiftIsSale',\n        variables: {\n          gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }),\n        },\n      },\n    });\n  });\n  const commission = starsStargiftResaleCommissionPermille;\n  const isPriceCorrect = hasPrice && price > starsStargiftResaleAmountMin;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftSellTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      <div className={styles.inputPrice}>\n        <InputText\n          label={lang('InputPlaceholderGiftResalePrice')}\n          onChange={handleChangePrice}\n          value={price?.toString()}\n          inputMode=\"numeric\"\n          tabIndex={0}\n          teactExperimentControlled\n        />\n      </div>\n\n      <div className={styles.descriptionContainer}>\n        <span>\n          {!isPriceCorrect && commission && lang('DescriptionComposerGiftMinimumPrice', {\n            stars: formatStarsAsText(lang, starsStargiftResaleAmountMin),\n          }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n          {isPriceCorrect && lang('DescriptionComposerGiftResalePrice',\n            {\n              stars: formatStarsAsText(lang, commission ? Number((price * (commission)).toFixed()) : price),\n            },\n            {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n        </span>\n\n        {isPriceCorrect && starsUsdWithdrawRate && (\n          <span className={styles.descriptionPrice}>\n            {`≈ ${formatCurrencyAsString(\n              price * starsUsdWithdrawRate,\n              'USD',\n              lang.code,\n            )}`}\n          </span>\n        )}\n      </div>\n\n      <Button noForcedUpperCase disabled={!isPriceCorrect} size=\"smaller\" onClick={handleSellGift}>\n        {isPriceCorrect && lang('ButtonSellGift', {\n          stars: formatStarsAsIcon(lang, price, { asFont: true }),\n        }, { withNodes: true })}\n        {!isPriceCorrect && lang('Sell')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const configPermille = global.appConfig?.starsStargiftResaleCommissionPermille;\n    const starsStargiftResaleCommissionPermille = configPermille ? (configPermille / 1000) : undefined;\n    const starsStargiftResaleAmountMin = global.appConfig?.starsStargiftResaleAmountMin || 0;\n    const starsStargiftResaleAmountMax = global.appConfig?.starsStargiftResaleAmountMax;\n\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n\n    return {\n      starsStargiftResaleCommissionPermille,\n      starsStargiftResaleAmountMin,\n      starsStargiftResaleAmountMax,\n      starsUsdWithdrawRate,\n    };\n  },\n)(GiftResalePriceComposerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>{\n            lang('UniqueStatusWearTitle', {\n              gift: mockPeerWithStatus?.emojiStatus?.title,\n            })\n          }\n          </div>\n          <div className={styles.infoDescription}>{\n            lang('UniqueStatusBenefitsDescription')\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React, {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { type CustomPeer, SettingsScreens } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const {\n    closeGiftWithdrawModal,\n    clearGiftWithdrawError,\n    closeGiftInfoModal,\n    processStarGiftWithdrawal,\n    openSettingsScreen,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  const handleSetUpPassword = useLastCallback(() => {\n    openSettingsScreen({\n      screen: SettingsScreens.TwoFaDisabled,\n    });\n    closeGiftWithdrawModal();\n    closeGiftInfoModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && (\n        <>\n          <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>\n          <Button className=\"mt-2\" size=\"smaller\" onClick={handleSetUpPassword}>{lang('SetUp2FA')}</Button>\n        </>\n      )}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          {renderingSelectedPeer && (\n            <GiftTransferPreview\n              peer={renderingSelectedPeer}\n              gift={uniqueGift}\n            />\n          )}\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import React, { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, addNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n    addNoPaidMessagesException({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n  withBalanceBar?: boolean;\n  isLowStackPriority?: true;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n  withBalanceBar,\n  isLowStackPriority,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n      withBalanceBar={withBalanceBar}\n      isLowStackPriority={isLowStackPriority}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","lang","useLang","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","StarIcon","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","isGiftResale","isNegativeStarsAmount","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","number","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","history","all","transactions","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","transactionTabs","key","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","minimal","modalBalance","starButton","isText","noForcedUpperCase","topupOptions","tos","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","resellPrice","deps","noAnimation","didUpdate","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","style","buildStyle","paidMessageCommission","appConfig","starsPaidMessageCommissionPermille","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","model","regularHeader","noLoop","percent","tableData","peerLabel","push","containerClassName","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","currentUser","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","find","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","fluid","GiftRibbon","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGifts","idsByCategory","StarGiftCategoryList","onCategoryChanged","areLimitedStarGiftsDisallowed","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","GiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","allGifts","gifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","STARS_CURRENCY_CODE","set","baseGift","reduce","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","filteredGiftIds","starGiftsContainer","GiftItemStar","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","AVATAR_SIZE","REM","GIFT_STICKER_SIZE","GiftTransferPreview","giftPreview","arrow","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","buyStarGift","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isConfirmModalOpen","setIsConfirmModalOpen","renderingFromPeer","renderingTargetPeer","isTargetChat","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","hasConvertOption","isGiftUnique","uniqueGift","canFocusUpgrade","upgradeMsgId","canManage","inputGift","resellPriceInStars","canBuyGift","giftOwnerTitle","ownerName","ownerId","owner","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","handleBuyGift","closeConfirmModal","handleConfirmBuyGift","SettingsMenuButton","headerButton","icon","renderFooterButton","isShiny","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","giftResalePriceContainer","giftResalePriceStar","headerSplitButton","right","moreIcon","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerAddress","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","shouldSkipModal","withBalanceBar","ConfirmDialog","noDefaultTitle","confirmLabel","confirmHandler","formatStarsAsText","configPermille","starsStargiftResaleCommissionPermille","starsStargiftResaleAmountMin","starsStargiftResaleAmountMax","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","GiftResalePriceComposerModal","closeGiftResalePriceComposerModal","updateStarGiftPrice","price","setPrice","hasPrice","handleChangePrice","parseFloat","isNaN","handleSellGift","variables","commission","isPriceCorrect","InputText","inputMode","teactExperimentControlled","toFixed","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","models","attr","patterns","backdrops","random","getRandomAttributes","useInterval","attributes","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","onCheck","TableAboutModal","isCurrentUserPremium","selectIsCurrentUserPremium","GiftStatusInfoModal","closeGiftStatusInfoModal","setEmojiStatus","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","byKey","hasPassword","twoFaSettings","hint","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","openSettingsScreen","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","handleSetUpPassword","screen","SettingsScreens","TwoFaDisabled","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","placeholder","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","useCallback","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","handleTransfer","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","ChatRefundModal","closeChatRefundModal","addNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","children","headerIconName","withSeparator","onButtonClick","absoluteCloseButtonColor","isStatic","multiline","iconClassName","headerAvatarPeer","handleOpenChat","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown"],"sourceRoot":""}