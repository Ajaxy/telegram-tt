{"version":3,"file":"1567.9a8135f021ac05e23363.js","mappings":"iKAKA,MAAMA,UAAe,EAAAC,SACjB,WAAAC,CAAYC,GACRC,MAAMD,EAASE,KACfC,KAAKC,WAAY,EACjBD,KAAKE,eAAiBL,EAASK,eAC/BF,KAAKG,QAAUN,EAASM,QACxBH,KAAKI,KAAOP,EAASO,KACrBJ,KAAKK,KAAOR,EAASQ,KACrBL,KAAKM,QAAUT,EAASS,OAC5B,CAEA,cAAMC,CAASC,EAASC,GACpBC,EAAqBD,GACrB,MAAME,EAAU,IAAI,EAAAC,QAChBJ,IACAG,EAAQE,UAAYL,GAExB,MAAMM,QAA2B,IAAAC,QAAO,0BAA2B,CAC/DP,QAASG,EACTZ,IAAKC,KAAKD,OACPU,IAEPT,KAAKgB,gBAAkB,IAAI,EAAArB,SAASmB,EACxC,CAEA,aAAMG,GACF,IAAKjB,KAAKgB,gBACN,MAAM,IAAIE,MAAM,sDAEd,IAAAH,QAAO,yBAA0B,CACnCI,UAAWnB,KAAKD,IAChBqB,SAAUpB,KAAKgB,gBAAgBjB,MAGnCC,KAAKgB,qBAAkBK,CAC3B,CAEA,wBAAMC,CAAmBd,EAASC,GAC9BC,EAAqBD,GACrB,MAAME,EAAU,IAAI,EAAAC,QAChBJ,IACAG,EAAQE,UAAYL,SAElB,IAAAO,QAAO,sCAAuC,CAChDP,QAASG,EACTZ,IAAKC,KAAKD,OACPU,GAEX,CACA,WAAMc,SACIvB,KAAKgB,iBAAiBO,eACtBzB,MAAMyB,OAChB,EAGJC,eAAeC,EAAMhB,GACjBC,EAAqBD,GACrB,MAAMZ,QAAiB,IAAAkB,QAAO,uBAAwB,IAC/CN,IAEP,OAAOZ,EAAW,IAAIH,EAAOG,GAAY,IAC7C,CAIA,SAASa,EAAqBD,GACtBA,GAASiB,UACTjB,EAAQiB,QAAUC,MAAMC,KAAK,IAAIC,QAAQpB,EAAQiB,SAASI,WAElE,C","sources":["webpack://telegram-t/./node_modules/@tauri-apps/plugin-updater/dist-js/index.js"],"sourcesContent":["import { Resource, Channel, invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nclass Update extends Resource {\n    constructor(metadata) {\n        super(metadata.rid);\n        this.available = true;\n        this.currentVersion = metadata.currentVersion;\n        this.version = metadata.version;\n        this.date = metadata.date;\n        this.body = metadata.body;\n        this.rawJson = metadata.rawJson;\n    }\n    /** Download the updater package */\n    async download(onEvent, options) {\n        convertToRustHeaders(options);\n        const channel = new Channel();\n        if (onEvent) {\n            channel.onmessage = onEvent;\n        }\n        const downloadedBytesRid = await invoke('plugin:updater|download', {\n            onEvent: channel,\n            rid: this.rid,\n            ...options\n        });\n        this.downloadedBytes = new Resource(downloadedBytesRid);\n    }\n    /** Install downloaded updater package */\n    async install() {\n        if (!this.downloadedBytes) {\n            throw new Error('Update.install called before Update.download');\n        }\n        await invoke('plugin:updater|install', {\n            updateRid: this.rid,\n            bytesRid: this.downloadedBytes.rid\n        });\n        // Don't need to call close, we did it in rust side already\n        this.downloadedBytes = undefined;\n    }\n    /** Downloads the updater package and installs it */\n    async downloadAndInstall(onEvent, options) {\n        convertToRustHeaders(options);\n        const channel = new Channel();\n        if (onEvent) {\n            channel.onmessage = onEvent;\n        }\n        await invoke('plugin:updater|download_and_install', {\n            onEvent: channel,\n            rid: this.rid,\n            ...options\n        });\n    }\n    async close() {\n        await this.downloadedBytes?.close();\n        await super.close();\n    }\n}\n/** Check for updates, resolves to `null` if no updates are available */\nasync function check(options) {\n    convertToRustHeaders(options);\n    const metadata = await invoke('plugin:updater|check', {\n        ...options\n    });\n    return metadata ? new Update(metadata) : null;\n}\n/**\n * Converts the headers in options to be an {@linkcode Array<[string, string]>} which is what the Rust side expects\n */\nfunction convertToRustHeaders(options) {\n    if (options?.headers) {\n        options.headers = Array.from(new Headers(options.headers).entries());\n    }\n}\n\nexport { Update, check };\n"],"names":["Update","Resource","constructor","metadata","super","rid","this","available","currentVersion","version","date","body","rawJson","download","onEvent","options","convertToRustHeaders","channel","Channel","onmessage","downloadedBytesRid","invoke","downloadedBytes","install","Error","updateRid","bytesRid","undefined","downloadAndInstall","close","async","check","headers","Array","from","Headers","entries"],"sourceRoot":""}