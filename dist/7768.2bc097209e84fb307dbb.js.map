{"version":3,"file":"7768.2bc097209e84fb307dbb.js","mappings":"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,SACpCwkG,qBACAx4G,cACA6uB,iBACA0pF,yBACAvgH,SAAU57B,EAAO47B,SACjBy9C,kBACA4kE,kBAAmBj+I,EAAOi+I,oBAvFZrjE,CApcPyY,EACXrL,WACAs0D,mBACAC,qBACAC,oBACAC,oBACAE,oBACAE,qBACAI,mBACAC,aACA7nE,oBACArU,mBACAm8E,wBACAhiE,8BACA4iE,eACAltH,4BACA2xC,0BACA46E,qBACA9mC,0BACA0lC,2BACA7pH,cACAmrH,sBACAD,oBACAE,mBACAC,0BACAr8E,aACA20E,YACA2H,2BACArtG,kBACAstG,qBACA7oF,2BACApC,iBACAkrF,qBACAC,sBACAC,2BACAC,4BACAzmG,qBACA2mG,qBACAjB,uBACAznI,uBACA8mI,qBACAx4G,cACAu4G,yBACAvgH,WACA75B,gBACAs3E,kBACA4kE,wBAEA,MAAM,SACJC,EAAQ,mBACRC,EAAkB,4BAClBC,EAA2B,4BAC3BC,GAA2B,yBAC3BC,GAAwB,2BACxBC,GAA0B,eAC1B94E,GAAc,iBACd+4E,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtB9qE,GAAe,iBACf+qE,GAAgB,aAChBC,GAAY,cACZC,GAAa,sBACbC,GAAqB,kBACrBC,GAAiB,qBACjBzrE,GAAoB,uBACpB0rE,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxB51F,GAAU,cACV61F,GAAa,eACb/sG,GAAc,gBACdgtG,GAAe,iBACfxtH,GAAgB,wBAChBytH,GAAuB,kBACvBr1H,GAAiB,aACjBs1H,GAAY,gBACZC,GAAe,WACf7zH,GAAU,iBACVi/E,GAAgB,wBAChBr3B,GAAuB,4BACvBksE,GAA2B,gBAC3BztF,GAAe,iBACf0tF,GAAgB,oBAChBpsE,GAAmB,wBACnBqsE,GAAuB,0BACvBC,GAAyB,mBACzBxsE,GAAkB,eAClBysE,GAAc,sBACdr3F,GAAqB,cACrBs3F,GAAa,iBACbC,GAAgB,eAChB34H,GAAc,qBACd44H,GAAoB,eACpB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","sources":["webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/locked/GiftLockedModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.async.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/util/animations/viewTransitionTypes.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/common/AnimatedTabItem.module.scss?3313","webpack://telegram-t/./src/components/common/AnimatedTabItem.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.module.scss?5731","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.tsx","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.module.scss?00be","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.tsx","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.module.scss?ff67","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/hooks/tauri/useTauriEvent.ts","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, true, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, true, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, false, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, false, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateScheduledMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateScheduledMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  isNew: boolean,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  if (!currentMessage && !isNew) return global;\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig.starsSuggestedPostFutureMin;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, false, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !selectCustomEmoji(global, documentId)));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, linkContext, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, linkContext, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n    parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n    window.open(parsedUrl.href, '_blank', 'noopener');\n    return;\n  }\n\n  if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n    actions.closeStoryViewer({ tabId });\n\n    actions.requestLinkUrlAuth({ url, tabId });\n    return;\n  }\n\n  const isWhitelisted = appConfig.whitelistedDomains.includes(parsedUrl.hostname);\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal && !isWhitelisted;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings, ThreadId } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { pick } from '../../../util/iteratees.ts';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId, linkContext: { type: 'message', chatId, messageId, threadId } });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const currentInlineBotSettings = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !currentInlineBotSettings || query !== currentInlineBotSettings.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((currentInlineBotSettings.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...currentInlineBotSettings,\n    ...pick(result, ['help', 'switchPm', 'switchWebview']),\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: currentInlineBotSettings.offset === '' || currentInlineBotSettings.offset === result.nextOffset\n      ? result.results\n      : (currentInlineBotSettings.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, threadId?: ThreadId, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      openGame({\n        url, chatId: chat.id, messageId, tabId,\n      });\n    } else {\n      openUrl({ url, tabId, linkContext: { type: 'message', chatId: chat.id, messageId, threadId } });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL, STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkCanSendGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (gift.type !== 'starGift' || !gift.lockedUntilDate) {\n    onSuccess();\n    return;\n  }\n\n  const result = await callApi('fetchCheckCanSendGift', {\n    giftId: gift.id,\n  });\n\n  if (!result) return;\n\n  if (result?.canSend) {\n    onSuccess();\n  } else {\n    actions.openLockedGiftModalInfo({\n      untilDate: gift.type === 'starGift' ? gift.lockedUntilDate : undefined,\n      reason: result.reason,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, selectedResaleGift, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n      selectedResaleGift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    const result = await callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    global = getGlobal();\n    if (result && global.currentUserId) {\n      actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n    }\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === TON_CURRENCY_CODE;\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n  const currency = isTon ? TON_CURRENCY_CODE : STARS_CURRENCY_CODE;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency, tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency,\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updatePeerStarGiftCollections,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveGiftsCollectionId,\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerCollectionSavedGifts,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const fetchingCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const currentGifts = selectPeerCollectionSavedGifts(global, peerId, fetchingCollectionId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n    collectionId: fetchingCollectionId === 'all' ? undefined : fetchingCollectionId,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n  const currentCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  if (!result || currentCollectionId !== fetchingCollectionId || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabState.id);\n    if (selectPeerCollectionSavedGifts(global, peerId, activeCollectionId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const oldGifts = selectTabState(global, tabId).savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  actions.reloadPeerSavedGifts({ peerId });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n\naddActionHandler('loadStarGiftCollections', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    hash,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStarGiftCollections', {\n    peer,\n    hash,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updatePeerStarGiftCollections(global, peerId, result.collections);\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\nimport { selectActiveStoriesCollectionId } from '../../selectors/stories';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const selectedAlbumId = selectActiveStoriesCollectionId(global, tabId);\n  if (selectedAlbumId !== 'all') {\n    let albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (albumData?.isFullyLoaded) {\n      return;\n    }\n\n    const result = await callApi('fetchAlbumStories', {\n      peer,\n      albumId: selectedAlbumId,\n      offset: offsetId || 0,\n    });\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds, false, selectedAlbumId);\n    peerStories = selectPeerStories(global, peerId);\n\n    albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (Object.values(result.stories).length === 0\n      || (albumData?.ids?.length && albumData.ids.length >= result.count)) {\n      global = updatePeerStoriesFullyLoaded(global, peerId, true, false, selectedAlbumId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('loadStoryAlbums', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const albums = await callApi('fetchAlbums', { peer });\n  if (!albums) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      albumsByPeerId: {\n        ...global.stories.albumsByPeerId,\n        [peerId]: albums,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('selectStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { peerId, albumId, tabId = getCurrentTabId() } = payload;\n\n  if (albumId && peerId) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, false);\n  }\n\n  global = updateTabState(global, {\n    selectedStoryAlbumId: albumId || undefined,\n  }, tabId);\n\n  setGlobal(global);\n\n  actions.loadPeerProfileStories({ peerId, tabId });\n});\n\naddActionHandler('loadAlbumStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, albumId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchAlbumStories', {\n    peer,\n    albumId,\n    offset: offsetId || 0,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('resetSelectedStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    selectedStoryAlbumId: undefined,\n  }, tabId);\n});\n","import type { ProfileTabType } from '../../../types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, execAfterActions, getGlobal, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n      // Reset chat info state for new chat\n      chatInfo: {\n        isOpen: tabState.chatInfo.isOpen,\n      },\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  window.open(hashUrl, '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab, isOwnProfile, tabId = getCurrentTabId(), ...rest } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const isSameMessageList = currentMessageList?.chatId === rest.id\n    && currentMessageList?.threadId === MAIN_THREAD_ID\n    && currentMessageList?.type === (rest.type || 'thread');\n\n  processChatInfoState({ global, isSameMessageList, profileTab, forceScrollProfileTab, isOwnProfile, tabId });\n\n  actions.openChat({ ...rest, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab, isOwnProfile, tabId = getCurrentTabId(), ...rest } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const isSameMessageList = currentMessageList?.chatId === rest.chatId\n    && currentMessageList?.threadId === rest.threadId\n    && currentMessageList?.type === (rest.type || 'thread');\n\n  processChatInfoState({ global, isSameMessageList, profileTab, forceScrollProfileTab, isOwnProfile, tabId });\n\n  actions.openThread({ ...rest, tabId });\n});\n\nfunction processChatInfoState<T extends GlobalState>({\n  global,\n  isSameMessageList,\n  profileTab,\n  forceScrollProfileTab,\n  isOwnProfile,\n  tabId,\n}: {\n  global: T;\n  isSameMessageList: boolean;\n  profileTab?: ProfileTabType;\n  forceScrollProfileTab?: boolean;\n  isOwnProfile?: boolean;\n  tabId: number;\n}) {\n  const currentChatInfo = selectTabState(global, tabId).chatInfo;\n\n  const newProfileTab = profileTab ?? (isSameMessageList ? currentChatInfo.profileTab : undefined);\n  const newForceScrollProfileTab = forceScrollProfileTab\n    ?? (isSameMessageList ? currentChatInfo.forceScrollProfileTab : undefined);\n  const newIsOwnProfile = isOwnProfile ?? (isSameMessageList ? currentChatInfo.isOwnProfile : undefined);\n\n  execAfterActions(() => {\n    global = getGlobal();\n    global = updateTabState(global, {\n      ...selectTabState(global, tabId),\n      chatInfo: {\n        isOpen: true,\n        profileTab: newProfileTab,\n        forceScrollProfileTab: newForceScrollProfileTab,\n        isOwnProfile: newIsOwnProfile,\n      },\n    }, tabId);\n    global = { ...global, lastIsChatInfoShown: true };\n    setGlobal(global);\n  });\n}\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getTranslationFn } from '../../../util/localization';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 7; // 7 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: { key: 'ErrorFocusInaccessibleMessage' }, tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      message: {\n        key: IS_TOUCH_ENV ? 'ContextMenuHintTouch' : 'ContextMenuHintMouse',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (CHANGELOG_DATETIME && Date.now() > CHANGELOG_DATETIME + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = getTranslationFn();\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openQuickPreview', (global, actions, payload): ActionReturnType => {\n  const { id: chatId, threadId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    quickPreview: { chatId, threadId },\n  }, tabId);\n});\n\naddActionHandler('closeQuickPreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    quickPreview: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\n\nimport { type LangFn } from '../../util/localization';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n\naddActionHandler('openProfileRatingModal', (global, actions, payload): ActionReturnType => {\n  const { userId, level, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    profileRatingModal: {\n      userId,\n      level,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeProfileRatingModal', 'profileRatingModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_TAURI } from './browser/globalEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport async function setPageTitleInstant(nextTitle: string) {\n  if (IS_TAURI) {\n    await window.tauri?.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n  PAGE_TITLE_TAURI,\n} from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const chatInfo = selectTabState(global, tabId).chatInfo;\n  const willChatInfoBeShown = force !== undefined ? force : !chatInfo.isOpen;\n\n  if (willChatInfoBeShown !== chatInfo.isOpen) {\n    global = updateTabState(global, {\n      chatInfo: {\n        ...chatInfo,\n        isOpen: willChatInfoBeShown,\n      },\n    }, tabId);\n  }\n  global = { ...global, lastIsChatInfoShown: willChatInfoBeShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('changeProfileTab', (global, actions, payload): ActionReturnType => {\n  const { profileTab, shouldScrollTo, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const chatInfo = selectTabState(global, tabId).chatInfo;\n\n  return updateTabState(global, {\n    chatInfo: {\n      ...chatInfo,\n      isOpen: true,\n      profileTab,\n      forceScrollProfileTab: shouldScrollTo,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('updateShouldSaveAttachmentsCompression', (global, actions, payload): ActionReturnType => {\n  const { shouldSave, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldSaveAttachmentsCompression: shouldSave,\n  }, tabId);\n});\n\naddActionHandler('applyDefaultAttachmentsCompression', (global): ActionReturnType => {\n  const { defaultAttachmentCompression } = global.attachmentSettings;\n  const shouldCompress = defaultAttachmentCompression === 'compress';\n\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      shouldCompress,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  const defaultTitle = IS_TAURI ? PAGE_TITLE_TAURI : PAGE_TITLE;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${defaultTitle} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  // Show blinking title in browser tab\n  if (!IS_TAURI && global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(`${prefix}${defaultTitle}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig;\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ApiSavedGifts } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique\n    && !updatedFilter.shouldIncludeUpgradable) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      shouldIncludeUpgradable: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { getPromiseActions } from '../../../global';\n\nimport type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await getPromiseActions().loadMessage({ chatId, messageId });\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openLockedGiftModalInfo', (global, actions, payload): ActionReturnType => {\n  const {\n    untilDate, reason, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    lockedGiftModal: {\n      untilDate,\n      reason,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeLockedGiftModal', 'lockedGiftModal');\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftInMarket', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  actions.closeGiftInfoValueModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: gift,\n      },\n    }, tabId);\n  }\n\n  actions.openGiftModal({\n    forUserId: global.currentUserId!,\n    selectedResaleGift: gift,\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('closeResaleGiftsMarket', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  actions.resetResaleGifts({ tabId });\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: undefined,\n      },\n    }, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftInfoValueModal', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('fetchUniqueStarGiftValueInfo', { slug: gift.slug });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftInfoValueModal: {\n      valueInfo: result,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftInfoValueModal', 'giftInfoValueModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n\naddActionHandler('updateSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, collectionId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: collectionId,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: undefined,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftUpgrade' && global.currentUserId) {\n        actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        withTags\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_TAURI && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, isOwnProfile: true });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener,noreferrer');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('TelegramFeaturesUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={handleSelectMyProfile}\n      >\n        {lang('MenuMyProfile')}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('MenuSavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('MenuArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {lang('MenuContacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('MenuSettings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('MenuNightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'AriaMenuDisableNightMode' : 'AriaMenuEnableNightMode')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('MenuAnimationsSwitch')}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('MenuTelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport GiftEffectWrapper from '../../common/gift/GiftEffectWrapper';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const collectibleEmojiStatus = emojiStatus?.type === 'collectible' ? emojiStatus : undefined;\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <GiftEffectWrapper\n            withSparkles={Boolean(collectibleEmojiStatus)}\n            sparklesClassName=\"statusSparkles\"\n            sparklesColor={collectibleEmojiStatus?.textColor}\n          >\n            <CustomEmoji\n              key={emojiStatus.documentId}\n              documentId={emojiStatus.documentId}\n              size={EMOJI_STATUS_SIZE}\n              loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            />\n          </GiftEffectWrapper>\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const version = useMemo(() => {\n    let fullVersion = '';\n    if (IS_TAURI && window.tauri.version) {\n      fullVersion = `Tauri ${window.tauri.version} | `;\n    }\n\n    fullVersion += `${APP_NAME} ${versionString}`;\n\n    return fullVersion;\n  }, [versionString]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div\n        id=\"LeftMainHeader\"\n        className=\"left-header\"\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={version}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_TAURI && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { Update } from '@tauri-apps/plugin-updater';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst TAURI_CHECK_UPDATE_INTERVAL = 10 * 60 * 1000;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [tauriUpdate, setTauriUpdate] = useState<Update>();\n  const [isTauriUpdateDownloading, setIsTauriUpdateDownloading] = useState(false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || Boolean(tauriUpdate));\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(async () => {\n    if (tauriUpdate) {\n      try {\n        setIsTauriUpdateDownloading(true);\n        await tauriUpdate.downloadAndInstall();\n        setIsTauriUpdateDownloading(false);\n\n        await window.tauri?.relaunch();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to download and install Tauri update', e);\n      } finally {\n        setIsTauriUpdateDownloading(false);\n      }\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const checkTauriUpdate = useLastCallback(() => {\n    window.tauri?.checkUpdate()\n      .then((update) => setTauriUpdate(update ?? undefined))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error('Tauri update check failed:', e);\n      });\n  });\n\n  useEffect(() => {\n    checkTauriUpdate();\n  }, []);\n\n  useInterval(\n    checkTauriUpdate,\n    (IS_TAURI && !DEBUG) ? TAURI_CHECK_UPDATE_INTERVAL : undefined,\n  );\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n          isLoading={isTauriUpdateDownloading}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  useEffect(() => {\n    if (isPlaying && message?.isDeleting) {\n      playPause();\n    }\n  }, [isPlaying, message?.isDeleting, playPause]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state as Complete<StateProps>;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      } as Complete<StateProps>;\n    }\n\n    return state as Complete<StateProps>;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCustomEmoji,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isDesktop, isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    // Force close My Profile if clicked on Saved Messages header\n    openThreadWithInfo({ chatId, threadId, isOwnProfile: false });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef} data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && selectCustomEmoji(global, emojiStatus.documentId);\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport backgroundStyles from '../../styles/_patternBackground.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    backgroundStyles.background,\n    withRightColumnAnimation && backgroundStyles.withTransition,\n    customBackground && backgroundStyles.customBgImage,\n    backgroundColor && backgroundStyles.customBgColor,\n    customBackground && isBackgroundBlurred && backgroundStyles.blurred,\n    isRightColumnShown && backgroundStyles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale}`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS && !(renderingChatId && renderingThreadId) ? true : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={resolveTransitionName(\n                'slide',\n                animationLevel,\n                shouldSkipHistoryAnimations || !withInterfaceAnimations,\n              )}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage}\n              />\n              <div className={footerClassName}>\n                <FloatingActionButtons\n                  withScrollDown={renderingIsScrollDownShown}\n                  canPost={renderingCanPost}\n                  withExtraShift={withExtraShift}\n                />\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    } as Complete<StateProps>;\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftLockedModal from './gift/locked/GiftLockedModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftInfoValueModal from './gift/value/GiftInfoValueModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ProfileRatingModal from './profileRating/ProfileRatingModal.async';\nimport QuickPreviewModal from './quickPreview/QuickPreviewModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftInfoValueModal' |\n  'lockedGiftModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen' |\n  'profileRatingModal' |\n  'quickPreview'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftInfoValueModal: GiftInfoValueModal,\n  lockedGiftModal: GiftLockedModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n  profileRatingModal: ProfileRatingModal,\n  quickPreview: QuickPreviewModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => (\n    pick(selectTabState(global), MODAL_KEYS) as Complete<StateProps>\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal?.isModalOpen);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal?.inputInvoice);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : undefined;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : undefined;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoValueModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoValueModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoValueModal = useModuleLoader(Bundles.Stars, 'GiftInfoValueModal', !modal);\n\n  return GiftInfoValueModal ? <GiftInfoValueModal {...props} /> : undefined;\n};\n\nexport default GiftInfoValueModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftLockedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftLockedModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftLockedModal = useModuleLoader(Bundles.Stars, 'GiftLockedModal', !modal);\n\n  return GiftLockedModal ? <GiftLockedModal {...props} /> : undefined;\n};\n\nexport default GiftLockedModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', !modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ProfileRatingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ProfileRatingModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ProfileRatingModal = useModuleLoader(Bundles.Extra, 'ProfileRatingModal', !modal);\n\n  return ProfileRatingModal ? <ProfileRatingModal {...props} /> : undefined;\n};\n\nexport default ProfileRatingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './QuickPreviewModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst QuickPreviewModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const QuickPreviewModal = useModuleLoader(Bundles.Extra, 'QuickPreviewModal', !modal);\n\n  return QuickPreviewModal ? <QuickPreviewModal {...props} /> : undefined;\n});\n\nexport default QuickPreviewModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","export class VTTypes {\n  private readonly hierarchy: string[] = [];\n\n  constructor(types: readonly string[]) {\n    this.hierarchy = [...(types || [])];\n  }\n\n  with(type: string): VTTypes {\n    return new VTTypes([...this.hierarchy, type]);\n  }\n\n  getTypes(): readonly string[] {\n    return this.hierarchy;\n  }\n}\n\n// View transition types\nexport const VTT_RIGHT_COLUMN = new VTTypes(['rightColumn']);\nexport const VTT_RIGHT_PROFILE_AVATAR = VTT_RIGHT_COLUMN.with('profileAvatar');\nexport const VTT_RIGHT_PROFILE_EXPAND = VTT_RIGHT_PROFILE_AVATAR.with('profileExpand');\nexport const VTT_RIGHT_PROFILE_COLLAPSE = VTT_RIGHT_PROFILE_AVATAR.with('profileCollapse');\n\nexport const VTT_PROFILE_GIFTS = VTT_RIGHT_COLUMN.with('profileGifts');\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState({\n  containerRef,\n  tabType,\n  profileState,\n  onProfileStateChange,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs,\n}: {\n  containerRef: ElementRef<HTMLDivElement>;\n  tabType: ProfileTabType;\n  profileState: ProfileState;\n  forceScrollProfileTab?: boolean;\n  allowAutoScrollToTabs?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  handleStopAutoScrollToTabs: NoneToVoidFunction;\n}) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    if (state !== profileState) {\n      onProfileStateChange(state);\n    }\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  className?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  className,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root, className)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect\n          noSparkleAnimation\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): Complete<StateProps> => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): Complete<StateProps> => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig;\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"_KBrROQt\",\"icon\":\"Y3vEed9M\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from './AnimatedIconFromSticker';\n\nimport styles from './AnimatedTabItem.module.scss';\n\ntype OwnProps = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n  onClick?: (id: string) => void;\n};\n\nconst AnimatedTabItem = ({\n  id,\n  title,\n  sticker,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(id);\n  });\n\n  return (\n    <div\n      className={styles.item}\n      onClick={handleClick}\n    >\n      {sticker && (\n        <AnimatedIconFromSticker\n          className={styles.icon}\n          sticker={sticker}\n          size={20}\n          forcePreview\n        />\n      )}\n      {title}\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabItem);\n","import { memo, useEffect, useRef, useState } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport AnimatedTabItem from './AnimatedTabItem';\n\nimport styles from './AnimatedTabList.module.scss';\n\nexport type TabItem = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n};\n\ntype OwnProps = {\n  items: TabItem[];\n  selectedItemId?: string;\n  className?: string;\n  animationLevel: AnimationLevel;\n  onItemSelect?: (itemId: string) => void;\n};\n\nconst AnimatedTabList = ({\n  items,\n  selectedItemId,\n  animationLevel,\n  onItemSelect,\n  className,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const clipPathContainerRef = useRef<HTMLDivElement>();\n  const selectedIndex = items.findIndex((item) => item.id === selectedItemId) || 0;\n  const [clipPath, setClipPath] = useState<string>('');\n  const shouldAnimate = animationLevel > 0;\n\n  useHorizontalScroll(containerRef, !items.length, true);\n\n  const updateClipPath = useLastCallback(() => {\n    const clipPathContainer = clipPathContainerRef.current;\n    const activeTab = selectedIndex >= 0 && clipPathContainer?.childNodes[selectedIndex] as HTMLElement | null;\n\n    if (clipPathContainer && activeTab && clipPathContainer.offsetWidth > 0) {\n      const { offsetLeft, offsetWidth } = activeTab;\n      const containerWidth = clipPathContainer.offsetWidth;\n      const left = (offsetLeft / containerWidth * 100).toFixed(1);\n      const right = ((containerWidth - (offsetLeft + offsetWidth)) / containerWidth * 100).toFixed(1);\n\n      const newClipPath = `inset(0 ${right}% 0 ${left}% round 1rem)`;\n      setClipPath(newClipPath);\n    }\n  });\n\n  useEffect(() => {\n    updateClipPath();\n  }, [selectedIndex, items]);\n\n  useResizeObserver(clipPathContainerRef, updateClipPath);\n\n  if (!items.length) return undefined;\n\n  return (\n    <div\n      ref={containerRef}\n      className={\n        buildClassName(\n          styles.container,\n          'no-scrollbar',\n          className,\n          clipPath && styles.isVisible,\n        )\n      }\n    >\n      {items.map((item) => (\n        <AnimatedTabItem\n          key={item.id}\n          id={item.id}\n          title={item.title}\n          sticker={item.sticker}\n          onClick={onItemSelect}\n        />\n      ))}\n\n      <div\n        ref={clipPathContainerRef}\n        className={buildClassName(\n          styles.clipPathContainer,\n          'clip-path-container',\n          !shouldAnimate && styles.noAnimation,\n        )}\n        style={clipPath ? `clip-path: ${clipPath}` : undefined}\n        aria-hidden\n      >\n        {items.map((item, i) => (\n          <AnimatedTabItem\n            key={item.id}\n            id={item.id}\n            title={item.title}\n            sticker={item.sticker}\n            onClick={onItemSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabList);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UQ6pUmuC\",\"clipPathContainer\":\"c397ZVz4\",\"isVisible\":\"_Nw3GzkO\",\"noAnimation\":\"zNFdzcTe\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGiftCollection } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StarGiftCollectionList.module.scss';\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  collections?: ApiStarGiftCollection[];\n  activeCollectionId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StarGiftCollectionList = ({\n  peerId,\n  className,\n  collections,\n  activeCollectionId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { updateSelectedGiftCollection, resetSelectedGiftCollection } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedGiftCollection({ peerId });\n    } else {\n      const collectionId = Number(itemId);\n      updateSelectedGiftCollection({ peerId, collectionId });\n    }\n  });\n\n  if (!collections || collections.length === 0) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllGiftsCategory'),\n    },\n    ...collections.map((collection) => ({\n      id: String(collection.collectionId),\n      title: collection.title,\n      sticker: collection.icon,\n    })),\n  ], [collections, lang]);\n\n  const selectedItemId = activeCollectionId ? String(activeCollectionId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { starGiftCollections } = global;\n    const collections = starGiftCollections?.byPeerId?.[peerId];\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId);\n\n    return {\n      collections,\n      activeCollectionId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarGiftCollectionList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"pvf61Tbm\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStoryAlbum } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../../global/selectors/stories';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StoryAlbumList.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  albums?: ApiStoryAlbum[];\n  selectedAlbumId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StoryAlbumList = ({\n  peerId,\n  className,\n  albums,\n  selectedAlbumId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { selectStoryAlbum, resetSelectedStoryAlbum } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedStoryAlbum();\n    } else {\n      const albumId = Number(itemId);\n      selectStoryAlbum({ peerId, albumId });\n    }\n  });\n\n  if (!albums?.length) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllStoriesCategory'),\n    },\n    ...albums.map((album) => ({\n      id: String(album.albumId),\n      title: album.title,\n    })),\n  ], [albums, lang]);\n\n  const selectedItemId = selectedAlbumId ? String(selectedAlbumId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { stories } = global;\n    const albums = stories?.albumsByPeerId?.[peerId];\n    const selectedAlbumId = selectActiveStoriesCollectionId(global);\n\n    return {\n      albums,\n      selectedAlbumId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StoryAlbumList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"GgK8T6WN\"};","import { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiStarGiftCollection,\n  ApiStoryAlbum,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { ProfileCollectionKey } from '../../global/selectors/payments';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport { selectActiveGiftsCollectionId } from '../../global/selectors/payments';\n\nconst CONTENT_PANEL_SHOW_DELAY = 300;\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../global/selectors/stories';\nimport {\n  VTT_PROFILE_GIFTS,\n  VTT_RIGHT_PROFILE_COLLAPSE,\n  VTT_RIGHT_PROFILE_EXPAND,\n} from '../../util/animations/viewTransitionTypes.ts';\nimport { areDeepEqual } from '../../util/areDeepEqual';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport { useVtn } from '../../hooks/animations/useVtn.ts';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useTopOverscroll from '../../hooks/scroll/useTopOverscroll.tsx';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/profile/ProfileInfo.tsx';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport StarGiftCollectionList from './gifts/StarGiftCollectionList';\nimport StoryAlbumList from './stories/StoryAlbumList';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  storyAlbums?: ApiStoryAlbum[];\n  giftCollections?: ApiStarGiftCollection[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  selectedStoryAlbumId: ProfileCollectionKey;\n  activeCollectionId: ProfileCollectionKey;\n  giftsFilter?: any;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  chatInfo: TabState['chatInfo'];\n  animationLevel: AnimationLevel;\n  shouldWarnAboutFiles?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  isSavedMessages?: boolean;\n  isSynced?: boolean;\n  hasAvatar?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst SHARED_MEDIA_TYPES = new Set<string>(['media', 'documents', 'links', 'audio', 'voice']);\n\nconst Profile = ({\n  chatId,\n  isActive,\n  threadId,\n  chatInfo,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  selectedStoryAlbumId,\n  activeCollectionId,\n  giftsFilter,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  storyAlbums,\n  giftCollections,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  animationLevel,\n  shouldWarnAboutFiles,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  isSavedMessages,\n  isSynced,\n  hasAvatar,\n  onProfileStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n    loadStarGiftCollections,\n    loadStoryAlbums,\n    resetSelectedStoryAlbum,\n    changeProfileTab,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n  const [isGiftTransitionEnabled, enableGiftTransition, disableGiftTransition] = useFlag();\n\n  const isClosed = !chatInfo.isOpen;\n  const { profileTab, forceScrollProfileTab, isOwnProfile } = chatInfo;\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isGeneralSavedMessages = isSavedMessages && !isSavedDialog;\n  const [isProfileExpanded, expandProfile, collapseProfile] = useFlag();\n\n  const [restoreContentHeightKey, setRestoreContentHeightKey] = useState(0);\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isGeneralSavedMessages) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isOwnProfile) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab && !isOwnProfile) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab && !isOwnProfile) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    if (!isOwnProfile) {\n      arr.push(...TABS);\n    }\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo && !isOwnProfile) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab && !isOwnProfile) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length && !isOwnProfile) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length && !isOwnProfile) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    // Fallback to prevent errors in edge cases\n    // TODO: Handle no tabs case, skip shared media block\n    if (!arr.length) {\n      arr.push(TABS[0]);\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isGeneralSavedMessages, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang, isOwnProfile,\n  ]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const setActiveTab = useLastCallback((type: ProfileTabType) => {\n    if (isClosed) return;\n    changeProfileTab({ profileTab: type });\n    setSharedMediaSearchType({ mediaType: SHARED_MEDIA_TYPES.has(type) ? type as SharedMediaType : undefined });\n  });\n\n  useEffect(() => {\n    if (isClosed) return;\n    if (profileTab) {\n      // Force reset scroll marker\n      changeProfileTab({ profileTab, shouldScrollTo: undefined });\n      return;\n    };\n\n    setActiveTab(tabs[0].type); // Set default tab\n  }, [isClosed, profileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(tabs[index].type);\n  }, [tabs]);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  useEffect(() => {\n    resetSelectedStoryAlbum();\n  }, [chatId]);\n\n  useSyncEffect(() => {\n    enableGiftTransition();\n  }, [giftsFilter]);\n\n  useSyncEffect(() => {\n    disableGiftTransition();\n  }, [gifts]);\n\n  useEffect(() => {\n    if (hasGiftsTab && isSynced) {\n      loadStarGiftCollections({ peerId: chatId });\n      loadStoryAlbums({ peerId: chatId });\n    }\n  }, [chatId, hasGiftsTab, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition } = useViewTransition();\n  const { createVtnStyle } = useVtn();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const activeTabIndex = useMemo(() => {\n    const index = tabs.findIndex(({ type }) => type === profileTab);\n    return index === -1 ? 0 : index;\n  }, [profileTab, tabs]);\n\n  const tabType = tabs[activeTabIndex].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (areDeepEqual(gifts, prevGifts)) {\n      return;\n    }\n\n    if (!gifts || !prevGifts || !isGiftTransitionEnabled) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(VTT_PROFILE_GIFTS, () => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition, isGiftTransitionEnabled]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n\n  const shouldRenderProfileInfo = !noProfileInfo && !isSavedMessages;\n\n  const isFirstTab = (isGeneralSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const [isGiftCollectionsShowed, markGiftCollectionsShowed, unmarkGiftCollectionsShowed] = useFlag(false);\n  const [isStoryAlbumsShowed, markStoryAlbumsShowed, unmarkStoryAlbums] = useFlag(false);\n\n  const hasGiftsCollections = giftCollections && giftCollections.length > 0;\n  const hasStoryAlbums = storyAlbums && storyAlbums.length > 0;\n  const isGiftsResult = resultType === 'gifts';\n  const isStoriesResult = resultType === 'stories';\n  const shouldShowContentPanel = (isGiftsResult && hasGiftsCollections) || (isStoriesResult && hasStoryAlbums);\n\n  useEffect(() => {\n    if (hasGiftsCollections) {\n      setTimeout(() => {\n        markGiftCollectionsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkGiftCollectionsShowed();\n    }\n\n    if (hasStoryAlbums) {\n      setTimeout(() => {\n        markStoryAlbumsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkStoryAlbums();\n    }\n  }, [hasGiftsCollections, hasStoryAlbums, markGiftCollectionsShowed, markStoryAlbumsShowed]);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const handleExpandProfile = useLastCallback(() => {\n    if (isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_EXPAND, () => {\n      expandProfile();\n    });\n  });\n\n  const handleCollapseProfile = useLastCallback(() => {\n    if (!isProfileExpanded) return;\n    startViewTransition(VTT_RIGHT_PROFILE_COLLAPSE, () => {\n      collapseProfile();\n    });\n  });\n\n  const { handleScroll } = useProfileState({\n    containerRef,\n    tabType: resultType,\n    profileState,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    onProfileStateChange,\n    handleStopAutoScrollToTabs,\n  });\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTabIndex === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = Math.min(activeTabIndex + (hasMembersTab ? 1 : -1), tabs.length - 1);\n\n    setActiveTab(tabs[newActiveTab].type);\n  }, [hasMembersTab, activeTabIndex, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useTopOverscroll({\n    containerRef,\n    onOverscroll: handleExpandProfile,\n    onReset: handleCollapseProfile,\n    isOverscrolled: isProfileExpanded,\n    isDisabled: !hasAvatar || !shouldRenderProfileInfo,\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          const nextIndex = Math.min(activeTabIndex + 1, tabs.length - 1);\n          setActiveTab(tabs[nextIndex].type);\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          const nextIndex = Math.max(0, activeTabIndex - 1);\n          setActiveTab(tabs[nextIndex].type);\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeTabIndex, tabs]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if ((!viewportIds && !botPreviewMedia) || (!gifts?.length && resultType === 'gifts')) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType,\n    activeTabIndex, activeCollectionId, selectedStoryAlbumId], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n\n    return (\n      <div>\n        {renderCategories()}\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </div>\n    );\n  }\n\n  function renderCategories() {\n    if (resultType === 'gifts') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isGiftCollectionsShowed && 'noTransition',\n          )}\n        >\n          <StarGiftCollectionList peerId={chatId} />\n        </div>\n      );\n    }\n\n    if (resultType === 'stories') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isStoryAlbumsShowed && 'noTransition',\n          )}\n        >\n          <StoryAlbumList peerId={chatId} />\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSpinnerOrContentBase(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text={lang('ChatMemberListNoAccess')} />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? lang('ChatMemberListNoAccess') : lang('NoMembersFound');\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    const noTransition = resultType === 'gifts' ? isGiftCollectionsShowed\n      : resultType === 'stories' ? isStoryAlbumsShowed : false;\n    return (\n      <div\n        className={buildClassName(\n          `content ${resultType}-list`,\n          shouldShowContentPanel && 'showContentPanel',\n          noTransition && 'noTransition',\n        )}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              datetime={messagesById[id].date}\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                className=\"saved-gift\"\n                style={createVtnStyle(getSavedGiftKey(gift))}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'stories' || resultType === 'gifts';\n  const contentTransitionKey = (() => {\n    if (resultType === 'stories') {\n      return selectedStoryAlbumId === 'all' ? 0 : selectedStoryAlbumId;\n    }\n    if (resultType === 'gifts') {\n      return activeCollectionId === 'all' ? 0 : activeCollectionId;\n    }\n    return 0;\n  })();\n\n  const handleOnStop = useLastCallback(() => {\n    setRestoreContentHeightKey(restoreContentHeightKey + 1);\n  });\n\n  function renderProfileInfo(peerId: string, isReady: boolean) {\n    return (\n      <div className=\"profile-info\">\n        <ProfileInfo\n          isExpanded={isProfileExpanded}\n          peerId={peerId}\n          canPlayVideo={isReady}\n          isForMonoforum={Boolean(monoforumChannel)}\n          onExpand={handleExpandProfile}\n        />\n        <ChatExtra\n          chatOrUserId={profileId}\n          isSavedDialog={isSavedDialog}\n          isOwnProfile={isOwnProfile}\n          style={createVtnStyle('chatExtra')}\n        />\n      </div>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    const baseContent = renderSpinnerOrContentBase(noContent, noSpinner);\n\n    const isSpinner = noContent && !noSpinner;\n\n    if (shouldUseTransitionForContent) {\n      return (\n        <Transition\n          className={`${resultType}-list`}\n          activeKey={contentTransitionKey}\n          name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n          shouldCleanup\n          shouldRestoreHeight\n          restoreHeightKey={restoreContentHeightKey}\n          contentSelector=\".Transition > .Transition_slide-active > .content\"\n        >\n          <Transition\n            activeKey={isSpinner ? 0 : 1}\n            name=\"fade\"\n            shouldCleanup\n            shouldRestoreHeight\n            restoreHeightKey={restoreContentHeightKey}\n            contentSelector=\".content\"\n            onStop={handleOnStop}\n          >\n            {baseContent}\n          </Transition>\n        </Transition>\n      );\n    }\n\n    return (\n      <Transition\n        activeKey={isSpinner ? 0 : 1}\n        name=\"fade\"\n        shouldCleanup\n        shouldRestoreHeight\n      >\n        {baseContent}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active`;\n  // eslint-disable-next-line @stylistic/max-len\n  const nestedSelector = `${activeListSelector} > .Transition > .Transition_slide-active > .Transition > .Transition_slide-active`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} .${resultType}-list > .scroll-item`\n    : `${nestedSelector} > .${resultType}-list > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n          style={createVtnStyle('sharedMedia')}\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n            restoreHeightKey={shouldUseTransitionForContent ? restoreContentHeightKey : undefined}\n            contentSelector={shouldUseTransitionForContent\n              ? '.Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .content'\n              : undefined}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={activeTabIndex} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const tabState = selectTabState(global);\n    const { chatInfo, savedGifts } = tabState;\n    const { isOwnProfile } = chatInfo;\n\n    const { animationLevel, shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedMessages = chatId === global.currentUserId && !isOwnProfile;\n    const isSavedDialog = !isOwnProfile ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedMessages\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedMessages;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const selectedStoryAlbumId = selectActiveStoriesCollectionId(global);\n    const storyIds = selectedStoryAlbumId !== 'all'\n      ? peerStories?.idsByAlbumId?.[selectedStoryAlbumId]?.ids\n      : peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedMessages;\n    const activeCollectionId = selectActiveGiftsCollectionId(global, chatId);\n    const peerGifts = savedGifts.collectionsByPeerId[chatId]?.[activeCollectionId];\n\n    const storyAlbums = global.stories.albumsByPeerId?.[chatId];\n    const giftCollections = global.starGiftCollections?.byPeerId?.[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n    const hasAvatar = Boolean(peer?.avatarPhotoId);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      storyAlbums,\n      giftCollections,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      selectedStoryAlbumId,\n      activeCollectionId,\n      giftsFilter: savedGifts.filter,\n      isChatProtected: chat?.isProtected,\n      chatInfo,\n      animationLevel,\n      shouldWarnAboutFiles,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSavedMessages,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      members: hasMembersTab ? members : undefined,\n      adminMembersById: hasMembersTab ? adminMembersById : undefined,\n      commonChatIds: commonChats?.ids,\n      monoforumChannel,\n      hasAvatar,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, SettingsScreens } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport { useVtn } from '../../hooks/animations/useVtn';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  isOwnProfile?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  isOwnProfile,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n  const { createVtnStyle } = useVtn();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUpgradable: shouldIncludeUpgradableGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleEditProfile = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.EditProfile });\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isOwnProfile) {\n      return lang('MyProfileHeader');\n    }\n\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeLimited: !shouldIncludeLimitedGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUpgradableGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeUpgradable: !shouldIncludeUpgradableGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterUpgradable')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n              {isOwnProfile && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditProfile}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div\n      className=\"RightHeader\"\n      data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      style={createVtnStyle('rightHeader', true)}\n    >\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isOwnProfile = tabState.chatInfo?.isOwnProfile;\n    const isSavedMessages = chatId && !isOwnProfile ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      isOwnProfile,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  isOwnProfile?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  isOwnProfile,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}_${Boolean(isOwnProfile)}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, shouldCloseRightColumn, chatInfo,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isOwnProfile = chatInfo?.isOwnProfile;\n    const isSavedMessages = chatId && !isOwnProfile ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      isOwnProfile,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): Complete<StateProps> => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['confetti']) as Complete<StateProps>,\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useTauriEvent from '../../hooks/tauri/useTauriEvent';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useTauriEvent<string>('deeplink', (event) => {\n    try {\n      const url = event.payload || '';\n      const decodedUrl = decodeURIComponent(url);\n      processDeepLink(decodedUrl);\n    } catch (e) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to process deep link', e);\n      }\n    }\n  });\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, IS_TAURI);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { Event } from '@tauri-apps/api/event';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\n\nexport default function useTauriEvent<T>(name: string, callback: (event: Event<T>) => void) {\n  return useEffect(() => {\n    if (!IS_TAURI) {\n      return undefined;\n    }\n\n    let removeListener: VoidFunction | undefined;\n\n    const setUpListener = async () => {\n      const { listen } = await import('@tauri-apps/api/event');\n      removeListener = await listen<T>(name, (event) => {\n        callback(event);\n      });\n    };\n\n    setUpListener().catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error(`Could not set up window event listener. ${error}`);\n    });\n\n    return () => {\n      removeListener?.();\n    };\n  }, [name, callback]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          onClearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["memo","GiftMenuItems","peerId","canManage","gift","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","showNotification","openChatWithDraft","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","closeGiftInfoModal","getActions","lang","useLang","oldLang","useOldLang","isSavedGift","savedGift","undefined","starGiftUniqueSlug","type","slug","starGiftUniqueLink","useMemo","TME_LINK_PREFIX","userCollectibleStatus","find","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","resellPrice","hasPinOptions","isUnsaved","handleTriggerVisibility","useLastCallback","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","message","handleLinkShare","text","handleTransfer","canTransferAt","getServerTime","key","variables","date","formatDateAtTime","handleSell","canResellAt","handleUnsell","price","currency","STARS_CURRENCY_CODE","amount","nanos","icon","title","number","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","_jsxs","_Fragment","children","_jsx","MenuItem","isPinned","onClick","Boolean","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","isNew","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","suggestedPostCurrency","suggestedPostAmount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","pluralValue","titleKey","formatStarsAsText","getTranslationFn","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","selectCustomEmoji","customEmoji","customEmojis","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","linkContext","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","isWhitelisted","whitelistedDomains","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","shouldSharePhoneNumber","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","currentInlineBotSettings","newResults","isGallery","searchInlineBot","botSender","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","starsPayment","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","lockedUntilDate","canSend","openLockedGiftModalInfo","untilDate","forUserId","selectedResaleGift","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","inputSavedGift","reloadPeerSavedGifts","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","fetchingCollectionId","selectActiveGiftsCollectionId","selectPeerCollectionSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","collectionId","currentFilter","currentCollectionId","replacePeerSavedGifts","activeCollectionId","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","collectionsByPeerId","g","areInputSavedGiftsEqual","samples","giftUpgradeModal","sampleAttributes","selectPeerSavedGifts","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","updatePeerStarGiftCollections","collections","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","selectedAlbumId","selectActiveStoriesCollectionId","albumData","idsByAlbumId","albumId","updatePeerStoriesFullyLoaded","profileIds","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","albums","albumsByPeerId","selectedStoryAlbumId","loadPeerProfileStories","processChatInfoState","isSameMessageList","profileTab","forceScrollProfileTab","isOwnProfile","currentChatInfo","chatInfo","newProfileTab","newForceScrollProfileTab","newIsOwnProfile","execAfterActions","lastIsChatInfoShown","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","rest","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","isMuted","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","CHANGELOG_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","quickPreview","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","profileRatingModal","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","IS_TAURI","tauri","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","willChatInfoBeShown","isActive","screen","nextScreen","getIsTablet","messageLists","shouldScrollTo","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldSaveAttachmentsCompression","defaultAttachmentCompression","shouldCompress","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","defaultTitle","PAGE_TITLE_TAURI","PAGE_TITLE","INACTIVE_MARKER","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeUpgradable","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","getPromiseActions","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","lockedGiftModal","giftResalePriceComposerModal","closeGiftInfoValueModal","openGiftModal","resetResaleGifts","giftInfoValueModal","valueInfo","giftStatusInfoModal","giftTransferModal","activeCollectionByPeerId","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","animationLevel","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","resolveTransitionName","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","withTags","ContactList","ConnectionStatusOverlay","connectionStatus","connectionStatusText","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","location","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectMyProfile","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","collectibleEmojiStatus","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","GiftEffectWrapper","withSparkles","sparklesClassName","sparklesColor","textColor","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","connectionStatusPosition","useConnectionStatus","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","fullVersion","APP_NAME","IS_MAC_OS","DropdownMenu","trigger","footer","forceOpen","transformOriginX","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","tauriUpdate","setTauriUpdate","isTauriUpdateDownloading","setIsTauriUpdateDownloading","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","downloadAndInstall","relaunch","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","checkTauriUpdate","checkUpdate","useInterval","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","blur","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","MessageSelectToolbar","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderText","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","isDisabled","onStateChange","handleBeforeContextMenu","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isGif","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","alt","draggable","playsInline","disablePictureInPicture","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","currentTransitionKey","MiddleHeader","isComments","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isDesktop","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","target","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","threshold","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","usePreviousDeprecated","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","selectSponsoredMessage","isBot","BotAdPane","viewSponsored","clickSponsored","openAboutAdsModal","renderingSponsoredMessage","withResizeObserver","contextMenuAnchor","handleAboutClick","peerColor","getApiPeerColorClass","BadgeButton","SponsoredMessageContextMenuContainer","anchor","triggerRef","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canAddContact","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","formatStarsAsIcon","asFont","messageStarIcon","containerClassName","messageStars","withMarkdown","withNodes","root","noForcedUpperCase","pill","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","useSignal","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","useSignalEffect","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","handleOpenPremiumModal","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","selectThemeValues","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","ANONYMOUS_USER_ID","isCreator","isUserRightBanned","getHasAdminRight","userFull","isContactRequirePremium","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","useDerivedSignal","pinnedLength","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","shouldCancelWaiting","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","isReady","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","IS_ANDROID","visualViewport","handleResize","isFixNeeded","documentElement","clientHeight","requestMutation","classList","toggle","requestMeasure","offsetTop","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","backgroundStyles","withTransition","customBgImage","customBgColor","blurred","withRightColumn","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","buildStyle","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","MessageList","onScrollDownToggle","onNotchToggle","withBottomShift","withDefaultBg","onIntersectPinnedMessage","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactFastList","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftInfoValueModal","GiftLockedModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","ProfileRatingModal","QuickPreviewModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","VTTypes","hierarchy","constructor","types","this","with","getTypes","VTT_RIGHT_COLUMN","VTT_RIGHT_PROFILE_AVATAR","VTT_RIGHT_PROFILE_EXPAND","VTT_RIGHT_PROFILE_COLLAPSE","VTT_PROFILE_GIFTS","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","SavedGift","observeIntersection","stickerRef","isHover","markHover","unmarkHover","totalIssued","getTotalGiftAvailability","starGiftUnique","resaleTonOnly","ribbonText","total","ribbonColor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","avatarPeer","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","StickerView","shouldLoop","shouldPreloadPreview","observeIntersectionForPlaying","observeIntersectionForLoading","nonInteractive","withSparkleEffect","noSparkleAnimation","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","PreviewMedia","idPrefix","isProtected","isIntersecting","useIsIntersecting","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","AnimatedTabItem","AnimatedIconFromSticker","forcePreview","AnimatedTabList","selectedItemId","onItemSelect","clipPathContainerRef","selectedIndex","setClipPath","shouldAnimate","useHorizontalScroll","updateClipPath","clipPathContainer","childNodes","offsetLeft","containerWidth","left","toFixed","right","useResizeObserver","starGiftCollections","StarGiftCollectionList","updateSelectedGiftCollection","resetSelectedGiftCollection","handleItemSelect","collection","StoryAlbumList","selectStoryAlbum","resetSelectedStoryAlbum","TABS","SHARED_MEDIA_TYPES","shouldWarnAboutFiles","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","activeDownloads","selectActiveDownloads","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","storyAlbums","giftCollections","monoforumChannel","selectMonoforumChannel","hasAvatar","giftsFilter","isChatProtected","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","loadStarGiftCollections","loadStoryAlbums","changeProfileTab","deletingUserId","setDeletingUserId","isGiftTransitionEnabled","enableGiftTransition","disableGiftTransition","profileId","isGeneralSavedMessages","isProfileExpanded","expandProfile","collapseProfile","restoreContentHeightKey","setRestoreContentHeightKey","tab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","useViewTransition","createVtnStyle","useVtn","giftIds","getSavedGiftKey","activeTabIndex","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","shouldRenderProfileInfo","isFirstTab","isGiftCollectionsShowed","markGiftCollectionsShowed","unmarkGiftCollectionsShowed","isStoryAlbumsShowed","markStoryAlbumsShowed","unmarkStoryAlbums","hasGiftsCollections","hasStoryAlbums","shouldShowContentPanel","usePeerStoriesPolling","handleStopAutoScrollToTabs","handleExpandProfile","handleCollapseProfile","handleScroll","prevTabType","tabsEl","scrollTop","forceDuration","prevProfileState","tabListEl","maxDistance","offsetHeight","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","useTopOverscroll","onOverscroll","isOverscrolled","nextIndex","SLIDE_TRANSITION_DURATION","canRenderContent","shouldUseTransitionForContent","contentTransitionKey","handleOnStop","renderSpinnerOrContent","noContent","noSpinner","baseContent","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","noLoop","noTransition","Media","MediaStory","getMessageDocument","datetime","smaller","isDownloading","getIsDownloading","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","renderSpinnerOrContentBase","isSpinner","shouldRestoreHeight","restoreHeightKey","contentSelector","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","onScroll","ProfileInfo","isExpanded","canPlayVideo","isForMonoforum","onExpand","ChatExtra","chatOrUserId","renderContent","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUpgradableGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","handleEditProfile","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","initialTab","renderingActiveTab","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","close","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","useLayoutEffectWithPrevDeps","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","runDebounced","useRunDebounced","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","focus","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerHeight","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","isAppConfigLoaded","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","callback","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","decodedUrl","removeListener","listen","setUpListener","parsedLocationHash","parseLocationHash","parentNode","childElementCount","addExtraClass","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","beginHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBackgroundMode","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","onClearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}