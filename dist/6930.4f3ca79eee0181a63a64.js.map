{"version":3,"file":"6930.4f3ca79eee0181a63a64.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/util/localization/format.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/global/helpers/payments.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"j9SVp5No\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\",\"modalDialog\":\"MFXAwnxJ\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog, styles.root)}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={styles.main} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size=\"huge\"\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getSenderTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(getGlobal(), modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  filterUsersByName, isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = [\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    const filteredContactIds = filterUsersByName(combinedIds, usersById, searchQuery);\n\n    return sortChatIds(unique(filteredContactIds).filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"balance\":\"LitvQduT\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentAmount\":\"sd2jk3Hn\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: number;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className }: OwnProps) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.balance, className)}>\n      <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n      <div className={styles.balanceBottom}>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined ? formatInteger(balance) : '…'}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{getSenderTitle(lang, peer)}</h3>\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\n\nexport function getTransactionTitle(lang: OldLangFn, transaction: ApiStarsTransaction) {\n  if (transaction.extendedMedia) return lang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return lang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return lang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return lang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return lang('StarsGiftSent');\n  if (transaction.isGift) return lang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return transaction.stars < 0 ? lang('Gift2TransactionSent') : lang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || lang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getTransactionTitle } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getSenderTitle(lang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || lang(customPeer.titleKey!);\n      description = lang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = lang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = lang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = lang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [lang, peer, transaction]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {extendedMedia ? <PaidMediaThumb media={extendedMedia} isTransactionPreview />\n          : <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />}\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        <p className={styles.description}>{data.description}</p>\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, lang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span className={buildClassName(styles.amount, stars < 0 ? styles.negative : styles.positive)}>\n          {formatStarsTransactionAmount(stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS: TabWithProperties[] = [\n  { title: 'StarsTransactionsAll' },\n  { title: 'StarsTransactionsIncoming' },\n  { title: 'StarsTransactionsOutgoing' },\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const user = selectUser(global, originGift.userId);\n      if (!user) return undefined;\n      return oldLang('StarsNeededTextGift', getUserFullName(user));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal className={styles.root} isOpen={isOpen} onClose={closeStarsBalanceModal}>\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              className={buildClassName(styles.starButton, 'settings-main-menu-star')}\n              color=\"translucent\"\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              <StarIcon className=\"icon\" type=\"gold\" size=\"big\" />\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={TRANSACTION_TABS}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [renderingModal, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, form, paidMediaChat, lang]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <>\n            <Avatar peer={bot} size=\"giant\" />\n            {photo && <Avatar className={styles.paymentPhoto} webPhoto={photo} size=\"giant\" />}\n          </>\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {oldLang('Stars.Transfer.Pay')}\n        <div className={styles.paymentAmount}>\n          {amount}\n          <StarIcon className={styles.paymentButtonStar} size=\"small\" />\n        </div>\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"starsHeader\":\"VqKkGnpy\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer, selectStarGiftSticker,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { getTransactionTitle } from '../helpers/transaction';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo,\n    } = transaction;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, transaction);\n\n    const messageLink = peer && transaction.messageId\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !topSticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const header = (\n      <div className={buildClassName(styles.header, styles.starsHeader)}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && topSticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={topSticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n            nonInteractive\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"jumbo\" />\n        )}\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span className={buildClassName(styles.amount, transaction.stars < 0 ? styles.negative : styles.positive)}>\n            {formatStarsTransactionAmount(transaction.stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(transaction.stars < 0 || transaction.isMyGift ? 'Stars.Transaction.To'\n        : peerId ? 'Star.Transaction.From' : 'Stars.Transaction.Via'),\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, peer, topSticker, canPlayAnimatedEmojis]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount);\n\n    const starGiftStickerId = modal?.transaction.starGift?.stickerId;\n    const starGiftSticker = starGiftStickerId && selectStarGiftSticker(global, starGiftStickerId);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starGiftSticker || starsGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"starsHeader\":\"gLkKCjkD\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    if (!isActive) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        checkChatInvite({ hash: subscription.chatInviteHash! });\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill,\n    } = subscription;\n\n    const header = (\n      <div className={buildClassName(styles.header, styles.starsHeader)}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={peer} size=\"jumbo\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang('StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>{oldLang('StarsSubscriptionCancelledText')}</p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectChatMessage, selectUser } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: number;\n  defaultPrivacy?: boolean;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMe?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiUser;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldShowUp, setShouldShowUp] = useState(true);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleAnonimityChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldShowUp(e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMe);\n    if (currentReactor) {\n      setShouldShowUp(!currentReactor.isAnonymous);\n      return;\n    }\n\n    setShouldShowUp(defaultPrivacy || true);\n  }, [defaultPrivacy, message?.reactions?.topReactors]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: !shouldShowUp,\n    });\n    closePaidReactionModal();\n  });\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasMe = false;\n\n    all.forEach((reactor) => {\n      const user = reactor.peerId ? selectUser(global, reactor.peerId) : undefined;\n      if (!user && !reactor.isAnonymous && !reactor.isMe) return;\n\n      if (reactor.isMe) {\n        hasMe = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: reactor.isMe && isTouched ? starsAmount : 0,\n        isMe: reactor.isMe,\n        isAnonymous: reactor.isAnonymous,\n        user,\n      });\n    });\n\n    if (!hasMe && isTouched) {\n      const me = selectUser(global, global.currentUserId!);\n      result.push({\n        amount: 0,\n        localAmount: starsAmount,\n        isMe: true,\n        user: me,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount]);\n\n  const chatTitle = chat && getChatTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n    >\n      <BalanceBlock balance={starBalance} className={styles.modalBalance} />\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMe && !shouldShowUp))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey) : getUserFullName(peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      <Checkbox\n        className={styles.checkbox}\n        checked={shouldShowUp}\n        onChange={handleAnonimityChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"modalBalance\":\"Q3560fzx\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"checkbox\":\"oQ5Ar48z\",\"disclaimer\":\"KRvkHeo1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiUser } from '../../../api/types';\nimport type { GiftOption } from './GiftModal';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/ActionMessage';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  userId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  patternColor?: string;\n  user?: ApiUser;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  userId,\n  user,\n  captionLimit,\n  patternColor,\n  currentUserId,\n  isPaymentFormLoading,\n}: OwnProps & StateProps) {\n  const { sendStarGift, openInvoice } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n\n  const isStarGift = 'id' in gift;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: true,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            targetUserIds: [userId],\n            mediaType: 'action',\n            text: 'ActionGiftInbound',\n            type: 'giftPremium',\n            amount: gift.amount,\n            currency: gift.currency,\n            months: gift.months,\n            message: {\n              text: giftMessage,\n            },\n            translationValues: ['%action_origin%', '%gift_payment_amount%'],\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: currentUserId!,\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          targetUserIds: [userId],\n          mediaType: 'action',\n          text: 'ActionGiftInbound',\n          type: 'starGift',\n          currency: STARS_CURRENCY_CODE,\n          amount: gift.stars,\n          starGift: {\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName,\n            starsToConvert: gift.starsToConvert,\n            isSaved: false,\n            isConverted: false,\n            gift,\n          },\n          translationValues: ['%action_origin%', '%gift_payment_amount%'],\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift, shouldHideName, userId]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        userId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [userId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n    return (\n      <div className={styles.optionsSection}>\n        <TextArea\n          className={styles.messageInput}\n          onChange={handleGiftMessageChange}\n          value={giftMessage}\n          label={lang('GiftMessagePlaceholder')}\n          maxLength={captionLimit}\n          maxLengthIndicator={symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined}\n        />\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const userFullName = getUserFullName(user)!;\n\n    const amount = isStarGift\n      ? formatCurrency(gift.stars, STARS_CURRENCY_CODE, lang.code, { iconClassName: 'star-amount-icon' })\n      : formatCurrency(gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && (\n          <div className={styles.description}>\n            {lang('GiftHideNameDescription', { profile: userFullName, receiver: userFullName })}\n          </div>\n        )}\n\n        <div className={styles.spacer} />\n\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'no-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={`--pattern-color: ${patternColor}`}\n      >\n        <ActionMessage key={isStarGift ? gift.id : gift.months} message={localMessage} />\n      </div>\n      {renderOptionsSection()}\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      patternColor,\n    } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      user,\n      patternColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {Boolean(discount) && (\n        <GiftRibbon color=\"red\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n  ApiSticker,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  onClick: (gift: ApiStarGift) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ sticker, gift, onClick }: OwnProps & StateProps) {\n  const { openGiftInfoModal } = getActions();\n  const lang = useLang();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.stickerId];\n\n    return {\n      sticker,\n    };\n  },\n)(GiftItemStar));\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  starGiftCategoriesByName: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  starGiftCategoriesByName,\n  onCategoryChanged,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] = useMemo(() => Object.keys(starGiftCategoriesByName)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [starGiftCategoriesByName]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') {\n      return lang('AllGiftsCategory');\n    }\n    if (category === 'limited') {\n      return lang('LimitedGiftsCategory');\n    }\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {category !== 'all' && category !== 'limited' && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {renderCategoryItem('limited')}\n      {starCategories.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGiftCategoriesByName } = global;\n\n    return {\n      starGiftCategoriesByName,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiStarGift,\n  ApiUser,\n} from '../../../api/types';\nimport type { StarGiftCategory, TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGift>;\n  starGiftCategoriesByName: Record<StarGiftCategory, string[]>;\n  starBalance?: number;\n  user?: ApiUser;\n};\n\nconst PremiumGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftCategoriesByName,\n  starBalance,\n  user,\n}) => {\n  const {\n    closeGiftModal, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [isHeaderHidden, setIsHeaderHidden] = useState(true);\n  const [isHeaderForStarGifts, setIsHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const filteredGifts = useMemo(() => {\n    return renderingModal?.gifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1);\n  }, [renderingModal]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIsHeaderHidden(true);\n      setSelectedGift(undefined);\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (selectedGift) return;\n\n    const { scrollTop } = e.currentTarget;\n\n    setIsHeaderHidden(scrollTop <= 150);\n\n    if (transitionRef.current && giftHeaderRef.current) {\n      const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n      const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n      setIsHeaderForStarGifts(headerTop - transitionTop <= 0);\n    }\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = lang('StarGiftDescription', {\n    user: getUserFullName(user)!,\n  }, { withNodes: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang('StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsHeaderForStarGifts('id' in gift);\n    setIsHeaderHidden(false);\n  });\n\n  function renderStarGifts() {\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && starGiftCategoriesByName[selectedCategory].map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              gift={gift}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (selectedGift) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size=\"huge\"\n            peer={user}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {renderGiftPremiumHeader()}\n        {renderGiftPremiumDescription()}\n\n        {renderPremiumGifts()}\n\n        {renderStarGiftsHeader()}\n        {renderStarGiftsDescription()}\n        <StarGiftCategoryList onCategoryChanged={onCategoryChanged} />\n        <Transition\n          name=\"zoomFade\"\n          activeKey={getCategoryKey(selectedCategory)}\n          className={styles.starGiftsTransition}\n        >\n          {renderStarGifts()}\n        </Transition>\n      </div>\n    );\n  }\n\n  const isBackButton = Boolean(selectedGift);\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} />\n      <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? 'StarsGiftHeader' : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={selectedGift ? 1 : 0}\n      >\n        {!selectedGift && renderMainScreen()}\n        {selectedGift && renderingModal?.forUserId && (\n          <GiftSendingOptions gift={selectedGift} userId={renderingModal.forUserId} />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const { starGiftsById, starGiftCategoriesByName, stars } = global;\n\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById,\n    starGiftCategoriesByName,\n    starBalance: stars?.balance,\n    user,\n  };\n})(PremiumGiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') {\n    return -1;\n  }\n  if (category === 'limited') {\n    return 0;\n  }\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUserId,\n  userIds,\n}) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = userIds ? filterUsersByName(userIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user) && userId !== currentUserId;\n    }));\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(GiftRecipientPicker));\n","import React from '../../lib/teact/teact';\n\nimport type { LangFn } from './types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../config';\n\nimport StarIcon from '../../components/common/icons/StarIcon';\n\nexport function formatStarsAsText(lang: LangFn, amount: number) {\n  return lang('StarsAmountText', { amount }, { pluralValue: amount });\n}\n\nexport function formatStarsAsIcon(lang: LangFn, amount: number) {\n  return lang('StarsAmount', { amount }, {\n    withNodes: true,\n    specialReplacement: {\n      [STARS_ICON_PLACEHOLDER]: <StarIcon type=\"gold\" className=\"star-amount-icon\" size=\"adaptive\" />,\n    },\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"p7FTs7_p\",\"amount\":\"zJS3I8BT\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiSticker, ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getUserFullName } from '../../../../global/helpers';\nimport { selectStarGiftSticker, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { formatInteger } from '../../../../util/textFormat';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  userFrom?: ApiUser;\n  targetUser?: ApiUser;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal, sticker, userFrom, targetUser, currentUserId, starGiftMaxConvertPeriod,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisilibity,\n    convertGiftToStars,\n    openChatWithInfo,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isUserGift = typeGift && 'gift' in typeGift;\n  const userGift = isUserGift ? typeGift : undefined;\n  const canUpdate = Boolean(userGift?.fromId && userGift.messageId);\n  const isSender = userGift?.fromId === currentUserId;\n  const canConvertDifference = (userGift && starGiftMaxConvertPeriod && (\n    userGift.date + starGiftMaxConvertPeriod - Date.now() / 1000\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { fromId, messageId, isUnsaved } = userGift!;\n    changeGiftVisilibity({ userId: fromId!, messageId: messageId!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { fromId, messageId } = userGift!;\n    convertGiftToStars({ userId: fromId!, messageId: messageId! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId!, profileTab: 'gifts' });\n    handleClose();\n  });\n\n  const modalData = useMemo(() => {\n    if (!typeGift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, message, starsToConvert, isUnsaved, isConverted,\n    } = userGift || {};\n    const gift = isUserGift ? typeGift.gift : typeGift;\n\n    const isVisibleForMe = isNameHidden && targetUser;\n\n    const description = (() => {\n      if (!userGift) {\n        return lang('GiftInfoSoldOutDescription');\n      }\n      if (!canUpdate && !isSender) return undefined;\n      if (!starsToConvert || canConvertDifference < 0) return undefined;\n      if (isConverted) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: formatInteger(starsToConvert!),\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoDescriptionOutConverted', {\n            amount: formatInteger(starsToConvert!),\n            user: getUserFullName(targetUser)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      return canUpdate\n        ? lang('GiftInfoDescription', {\n          amount: starsToConvert,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        })\n        : lang('GiftInfoDescriptionOut', {\n          amount: starsToConvert,\n          user: getUserFullName(targetUser)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n    })();\n\n    const header = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker sticker={sticker} noLoop nonInteractive size={STICKER_SIZE} />\n        <h1 className={styles.title}>\n          {!userGift && lang('GiftInfoSoldOutTitle')}\n          {userGift && lang(canUpdate ? 'GiftInfoReceived' : 'GiftInfoTitle')}\n        </h1>\n        {userGift && (\n          <p className={styles.amount}>\n            <span className={styles.amount}>\n              {formatInteger(gift.stars)}\n            </span>\n            <StarIcon type=\"gold\" size=\"middle\" />\n          </p>\n        )}\n        {description && (\n          <p className={buildClassName(styles.description, !userGift && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (fromId || isNameHidden) {\n      tableData.push([\n        lang('GiftInfoFrom'),\n        fromId ? { chatId: fromId } : (\n          <>\n            <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n            <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n          </>\n        ),\n      ]);\n    }\n\n    if (userGift?.date) {\n      tableData.push([\n        lang('GiftInfoDate'),\n        formatDateTimeToString(userGift.date * 1000, lang.code, true),\n      ]);\n    }\n\n    if (gift.firstSaleDate) {\n      tableData.push([\n        lang('GiftInfoFirstSale'),\n        formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n      ]);\n    }\n\n    if (gift.lastSaleDate) {\n      tableData.push([\n        lang('GiftInfoLastSale'),\n        formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n      ]);\n    }\n\n    tableData.push([\n      lang('GiftInfoValue'),\n      <div className={styles.giftValue}>\n        {formatStarsAsIcon(lang, gift.stars)}\n        {canUpdate && canConvertDifference > 0 && Boolean(starsToConvert) && (\n          <BadgeButton onClick={openConvertConfirm}>\n            {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n          </BadgeButton>\n        )}\n      </div>,\n    ]);\n\n    if (gift.availabilityTotal) {\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoAvailabilityValue', {\n          count: gift.availabilityRemains || 0,\n          total: gift.availabilityTotal,\n        }, {\n          pluralValue: gift.availabilityRemains || 0,\n        }),\n      ]);\n    }\n\n    if (message) {\n      tableData.push([\n        undefined,\n        renderTextWithEntities(message),\n      ]);\n    }\n\n    const footer = (\n      <div className={styles.footer}>\n        {canUpdate && (\n          <div className={styles.footerDescription}>\n            <div>\n              {isUnsaved ? lang('GiftInfoHidden')\n                : lang('GiftInfoSaved', {\n                  link: <Link isPrimary onClick={handleOpenProfile}>{lang('GiftInfoSavedView')}</Link>,\n                }, {\n                  withNodes: true,\n                })}\n            </div>\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {!canUpdate && (\n          <Button size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {canUpdate && (\n          <Button size=\"smaller\" onClick={handleTriggerVisibility}>\n            {lang(isUnsaved ? 'GiftInfoMakeVisible' : 'GiftInfoMakeInvisible')}\n          </Button>\n        )}\n      </div>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [typeGift, userGift, isUserGift, targetUser, sticker, lang, canUpdate, canConvertDifference, isSender, oldLang]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        header={modalData?.header}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        onClose={handleClose}\n      />\n      {userGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoConvertDescription1', {\n              amount: formatStarsAsText(lang, userGift.starsToConvert!),\n              user: getUserFullName(userFrom)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {canConvertDifference > 0 && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isUserGift = typeGift && 'gift' in typeGift;\n    const gift = isUserGift ? typeGift.gift : typeGift;\n    const stickerId = gift?.stickerId;\n    const sticker = stickerId ? selectStarGiftSticker(global, stickerId) : undefined;\n\n    const fromId = isUserGift && typeGift.fromId;\n    const userFrom = fromId ? selectUser(global, fromId) : undefined;\n    const targetUser = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n    return {\n      sticker,\n      userFrom,\n      targetUser,\n      currentUserId: global.currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer | CustomPeer;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size=\"large\" peer={peer} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  footer,\n  buttonText,\n  className,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      isSlim\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PickerSelectedItem\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(option.amount, option.currency, oldLang.code)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'stargift') {\n    const {\n      userId, shouldHideName, giftId, message,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stargift',\n      user,\n      shouldHideName,\n      giftId,\n      message,\n    };\n  }\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option, message,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n        message,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    giveawayPostId: message.id,\n  };\n}\n"],"names":["memo","withGlobal","global","_ref2","modal","user","forUserId","selectUser","getGlobal","undefined","_ref","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","root","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getSenderTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","filteredContactIds","filterUsersByName","sortChatIds","unique","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","balance","lang","smallerText","balanceBottom","StarIcon","formatInteger","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","preview","subscriptionStar","info","status","statusEnded","statusPricing","star","statusPeriod","getTransactionTitle","transaction","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","buildStarsTransactionCustomPeer","titleKey","SingleMediaThumb","boughtMedia","index","media","video","photo","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","Icon","name","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","PaidMediaThumb","webPhoto","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS","TRANSACTION_ITEM_CLASS","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","closeStarsBalanceModal","loadStarsTransactions","openStarsGiftingPickerModal","history","subscriptions","useLang","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","shouldShowItems","all","transactions","shouldSuggestGifting","tosText","handleLoadMoreTransactions","openStarsGiftingPickerModalHandler","handleBuyStars","BalanceBlock","modalBalance","starButton","topupOptions","tos","list","sectionTitle","StarsSubscriptionItem","key","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","StarsTransactionItem","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","content","paidMedia","paidMediaMessage","paidMediaChat","closeStarsPaymentModal","openStarsBalanceModal","sendStarPaymentForm","isLoading","markLoading","unmarkLoading","prevModal","usePrevious","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withNodes","withMarkdown","pluralValue","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","contentClassName","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","paymentImageBackground","paymentButton","paymentAmount","paymentButtonStar","disclaimer","starCount","starsGiftSticker","selectGiftStickerForStars","starGiftStickerId","stickerId","starGiftSticker","selectStarGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","AnimatedIconFromSticker","sticker","play","noLoop","nonInteractive","tableData","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","buttonText","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","handleButtonClick","hash","chatInviteHash","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","isText","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","style","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","closePaidReactionModal","addLocalPaidReaction","starsAmount","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldShowUp","setShouldShowUp","handleAnonimityChange","target","checked","handleAmountChange","currentReactor","reactions","topReactors","find","reactor","isMe","isAnonymous","handleSend","isPrivate","hasMe","forEach","localAmount","me","sort","a","b","chatTitle","StarSlider","Separator","countText","PeerBadge","badgeText","badgeIcon","badgeClassName","Checkbox","label","theme","selectTheme","patternColor","themes","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","sendStarGift","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","isStarGift","localMessage","isOutgoing","senderId","action","targetUserIds","mediaType","STARS_CURRENCY_CODE","isNameHidden","starsToConvert","isSaved","isConverted","translationValues","months","handleGiftMessageChange","handleShouldHideNameChange","handleMainButtonClick","inert","ActionMessage","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","ripple","Switcher","renderOptionsSection","userFullName","formatCurrency","iconClassName","profile","receiver","availabilityRemains","PremiumProgress","isPrimary","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","handleGiftClick","perMonth","discount","ceil","tabIndex","role","caption","renderMonths","pill","fluid","GiftRibbon","percent","stickers","starGifts","openGiftInfoModal","isLimited","isSoldOut","withSparkleEffect","starGiftCategoriesByName","onCategoryChanged","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","renderCategoryName","useHorizontalScroll","starGiftsById","boostPerSentGift","boostsPerSentGift","closeGiftModal","transitionRef","giftHeaderRef","selectedGift","setSelectedGift","setIsHeaderHidden","isHeaderForStarGifts","setIsHeaderForStarGifts","filteredGifts","gifts","prevGift","baseGift","reduce","prev","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","handleCloseButtonClick","isBackButton","buttonClassName","slideClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","starGiftsDescription","StarGiftCategoryList","starGiftsTransition","starGiftsContainer","giftId","GiftItemStar","GiftSendingOptions","userSelectionLimit","giveawayAddPeersMax","closeGiftRecipientPicker","openGiftModal","selectedId","formatStarsAsText","formatStarsAsIcon","children","typeGift","isUserGift","fromId","userFrom","targetUser","starGiftMaxConvertPeriod","closeGiftInfoModal","changeGiftVisilibity","convertGiftToStars","openChatWithInfo","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","userGift","canUpdate","isSender","canConvertDifference","conversionLeft","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenProfile","profileTab","modalData","isVisibleForMe","soldOut","CUSTOM_PEER_HIDDEN","unknown","firstSaleDate","lastSaleDate","giftValue","BadgeButton","total","renderTextWithEntities","footerDescription","Link","ConfirmDialog","confirmHandler","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","disabled","headerAvatarPeer","onButtonClick","openChat","handleOpenChat","PickerSelectedItem","forceShowSelf","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","noForcedUpperCase","iconDown","getRequestInputInvoice","boostChannelId","boostChannel","additionalChannelIds","untilDate","areWinnersVisible","countries","isOnlyForNewSubscribers","prizeDescription","additionalChannels","peerColorId","abs","getStarsTransactionFromGift","transactionId","getPrizeStarsTransactionFromGiveaway","targetChatId"],"sourceRoot":""}