{"version":3,"file":"7768.6afe1830795c395f543e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content,\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUnreadMentions,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const currentReplyInfo = selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: oldTranslate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds, users, chats,\n      } = result;\n\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n      global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateLocalTextSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    chats, users, messages,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateChats,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectChatFullInfo, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let userFullInfo = selectUserFullInfo(global, profileId);\n  let chatFullInfo = selectChatFullInfo(global, profileId);\n  if (user && !userFullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo?.profilePhoto) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = userFullInfo?.fallbackPhoto;\n  const personalPhoto = userFullInfo?.personalPhoto;\n  const chatCurrentPhoto = chatFullInfo?.profilePhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n  if (chatCurrentPhoto && photos[0]?.id !== chatCurrentPhoto.id) photos.unshift(chatCurrentPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      users, chats, accountResultIds, globalResultIds,\n    } = result;\n\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, appendStarsTransactions, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateReceiptFromStarsTransaction,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users,\n  } = result;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('getStarsReceipt', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return updateReceiptFromStarsTransaction(global, transaction, tabId);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(status.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(status.users, 'id'));\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction && 'emoticon' in reaction && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice, updatePayment } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  type: 'story';\n  peerId: string;\n  id: number;\n};\n\nexport type MessageRepairInfo = {\n  type: 'message';\n  peerId: string;\n  id: number;\n};\n\nexport type RepairInfo = {\n  localRepairInfo?: StoryRepairInfo | MessageRepairInfo;\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  documents: Record<string, GramJs.Document & RepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & RepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiFactCheck,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiPoll,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiFormattedText,\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerColor, buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    message, entities, randomId, recommended, sponsorInfo, additionalInfo, buttonText, canReport, title, url, color,\n  } = mtpMessage;\n\n  let photo: ApiPhoto | undefined;\n  if (mtpMessage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(mtpMessage.photo);\n    photo = buildApiPhoto(mtpMessage.photo);\n  }\n\n  return {\n    randomId: serializeBytes(randomId),\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: recommended,\n    sponsorInfo,\n    additionalInfo,\n    buttonText,\n    canReport,\n    title,\n    url,\n    peerColor: color && buildApiPeerColor(color),\n    photo,\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Partial<GramJs.Message & GramJs.MessageService>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n  const factCheck = mtpMessage.factcheck && buildApiFactCheck(mtpMessage.factcheck);\n\n  const isInvertedMedia = mtpMessage.invertMedia;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n    factCheck,\n    effectId: mtpMessage.effect?.toString(),\n    isInvertedMedia,\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date, effect,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n    effectId: effect?.toString(),\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiFactCheck(factCheck: GramJs.FactCheck): ApiFactCheck {\n  return {\n    shouldFetch: factCheck.needCheck,\n    hash: factCheck.hash.toString(),\n    text: factCheck.text && buildApiFormattedText(factCheck.text),\n    countryCode: factCheck.country,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: number;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    type = 'receipt';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    mediaType: 'action',\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number): ApiPoll {\n  return {\n    mediaType: 'poll',\n    id: String(localId),\n    summary: pick(poll.summary, ['question', 'answers']),\n    results: {},\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n  isInvertedMedia?: true,\n  effectId?: string,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      poll: poll && buildNewPoll(poll, localId),\n      contact,\n      storyData: story && {\n        mediaType: 'storyData',\n        ...story,\n      },\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n    isInvertedMedia,\n    effectId,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n    isInvertedMedia,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    isInvertedMedia,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            mediaType: 'photo',\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            date: Math.round(Date.now() / 1000),\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            mediaType: 'video',\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          mediaType: 'voice',\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n          size,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          mediaType: 'audio',\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mediaType: 'document',\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  leaveChat,\n  removeUnreadMentions,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.loadChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          mediaType: 'action',\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftPremiumModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftPremiumModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  shouldDelayInit?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  shouldDelayInit,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n        shouldDelayInit={shouldDelayInit}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  getIsMessageListReady: Signal<boolean>;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const isMessageListReady = useDerivedState(getIsMessageListReady);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const signature = viaBusinessBotTitle || (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        getIsMessageListReady={getIsMessageListReady}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n    && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            getIsMessageListReady={getIsMessageListReady}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (paidMedia) return; // TODO: Implement MV and remove this line\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isRevenueSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onScrollDownToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n  areAdsEnabled,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownShown, setIsScrollDownShown] = useState(false);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApp'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApp: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.voice!)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dates/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback((e) => {\n    e.preventDefault();\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img\n                        src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                        className={styles.giveawayIcon}\n                        alt={lang('Giveaway')}\n                      />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <div className={styles.section}>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </div>\n            )}\n            <div className={styles.section}>\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount, 'i')}\n                </ListItem>\n              )}\n            </div>\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingModal ? <PremiumGiftingModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingModal from './premium/PremiumGiftingModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isAppendModalOpen?: boolean;\n  isGiveawayModalOpen?: boolean;\n  isPremiumGiftingModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isPremiumGiftingModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingModalOpen && <PremiumGiftingModal isOpen={isPremiumGiftingModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      giftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isPremiumGiftingModalOpen: giftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","isModalShown","currentChat","selectReplyCanBeSentToChat","replyToPeerId","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","globalSearch","accountResultIds","globalResultIds","localResults","peerIds","globalResults","timestampPlusDay","resultsByType","foundIds","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","chatIds","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userFullInfo","userOrChat","chatCurrentPhoto","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","setReceipt","receipt","transaction","updateReceiptFromStarsTransaction","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","replace","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","forUserIds","giftPremiumModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","stars","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","updateSharedMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","replaceTabThreadParam","shouldPreventComposerAnimation","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","quoteText","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","mediaIndex","isAvatarView","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","fileName","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","loadChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrencyAsString","giftModalState","isCompleted","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","shouldDelayInit","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","counter","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","isMessageListReady","useDerivedState","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","isRound","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","hasFooter","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAds","onReportAd","isRevenueSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isBot","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownShown","setIsScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isPremiumGiftingModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}