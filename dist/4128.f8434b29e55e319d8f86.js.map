{"version":3,"file":"4128.f8434b29e55e319d8f86.js","mappings":"sFAgGAA,EAAOC,QAzFP,SAAcC,GACZ,MAAMC,EAAQ,4BAMRC,EAAS,CACbC,MAAO,SACPC,MAAO,KACPC,IAAK,YACLC,YAAY,EACZC,UAAW,EACXC,SAAU,CACR,CACEL,MAAO,SACPC,MAAO,IACPC,IAAK,KAEP,CACEF,MAAO,UACPM,MAnBW,CACf,OACA,QACA,MAgBoBC,KAAK,MAEvB,CACEP,MAAO,WACPM,MAAO,0BAET,CACEN,MAAO,WACPM,MAAO,+CAIPE,EAAkB,CACtBF,MAAO,CACLR,EACA,UAEFE,MAAO,CACL,EAAG,WAELK,SAAU,CAAEN,IAGd,OADAA,EAAOM,SAASI,QAAQD,GACjB,CACLE,KAAM,OACNL,SAAU,CAER,CACEC,MAAO,CACL,KACAR,EACA,UAEFE,MAAO,CACL,EAAG,cACH,EAAG,WAILW,OAAQ,CACNN,SAAU,CACR,CACEC,MAAO,KACPN,MAAO,iBAIbK,SAAU,CACRN,IAIJ,CACEO,MAAO,CACL,KACAR,EACA,MAEFE,MAAO,CACL,EAAG,cACH,EAAG,UACH,EAAG,iBAKb,C","sources":["webpack://telegram-t/./node_modules/highlight.js/lib/languages/leaf.js"],"sourcesContent":["/*\nLanguage: Leaf\nDescription: A Swift-based templating language created for the Vapor project.\nWebsite: https://docs.vapor.codes/leaf/overview\nCategory: template\n*/\n\nfunction leaf(hljs) {\n  const IDENT = /([A-Za-z_][A-Za-z_0-9]*)?/;\n  const LITERALS = [\n    'true',\n    'false',\n    'in'\n  ];\n  const PARAMS = {\n    scope: 'params',\n    begin: /\\(/,\n    end: /\\)(?=\\:?)/,\n    endsParent: true,\n    relevance: 7,\n    contains: [\n      {\n        scope: 'string',\n        begin: '\"',\n        end: '\"'\n      },\n      {\n        scope: 'keyword',\n        match: LITERALS.join(\"|\"),\n      },\n      {\n        scope: 'variable',\n        match: /[A-Za-z_][A-Za-z_0-9]*/\n      },\n      {\n        scope: 'operator',\n        match: /\\+|\\-|\\*|\\/|\\%|\\=\\=|\\=|\\!|\\>|\\<|\\&\\&|\\|\\|/\n      }\n    ]\n  };\n  const INSIDE_DISPATCH = {\n    match: [\n      IDENT,\n      /(?=\\()/,\n    ],\n    scope: {\n      1: \"keyword\"\n    },\n    contains: [ PARAMS ]\n  };\n  PARAMS.contains.unshift(INSIDE_DISPATCH);\n  return {\n    name: 'Leaf',\n    contains: [\n      // #ident():\n      {\n        match: [\n          /#+/,\n          IDENT,\n          /(?=\\()/,\n        ],\n        scope: {\n          1: \"punctuation\",\n          2: \"keyword\"\n        },\n        // will start up after the ending `)` match from line ~44\n        // just to grab the trailing `:` if we can match it\n        starts: {\n          contains: [\n            {\n              match: /\\:/,\n              scope: \"punctuation\"\n            }\n          ]\n        },\n        contains: [\n          PARAMS\n        ],\n      },\n      // #ident or #ident:\n      {\n        match: [\n          /#+/,\n          IDENT,\n          /:?/,\n        ],\n        scope: {\n          1: \"punctuation\",\n          2: \"keyword\",\n          3: \"punctuation\"\n        }\n      },\n    ]\n  };\n}\n\nmodule.exports = leaf;\n"],"names":["module","exports","hljs","IDENT","PARAMS","scope","begin","end","endsParent","relevance","contains","match","join","INSIDE_DISPATCH","unshift","name","starts"],"sourceRoot":""}