{"version":3,"file":"2859.026bf180c94801b34d24.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n  ApiTopic,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  MAX_INT_32,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addNotifyExceptions,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.markChatRead({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  let { mutedUntil } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if (isMuted && !mutedUntil) {\n    mutedUntil = MAX_INT_32;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { mutedUntil } });\n});\n\naddActionHandler('updateChatSilentPosting', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { isSilentPosting: isEnabled } });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isMuted, mutedUntil,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, mutedUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('markChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  void callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markChatRead', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  if (!chat.isForum) {\n    await callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    actions.readAllMentions({ chatId: id });\n    actions.readAllReactions({ chatId: id });\n    return;\n  }\n\n  let hasMoreTopics = true;\n  let lastTopic: ApiTopic | undefined;\n  let processedCount = 0;\n\n  while (hasMoreTopics) {\n    const result = await callApi('fetchTopics', {\n      chat, offsetDate: lastTopic?.date, offsetTopicId: lastTopic?.id, offsetId: lastTopic?.lastMessageId, limit: 100,\n    });\n\n    if (!result?.topics?.length) return;\n\n    result.topics.forEach((topic) => {\n      if (!topic.unreadCount && !topic.unreadMentionsCount && !topic.unreadReactionsCount) return;\n      actions.markTopicRead({ chatId: id, topicId: topic.id });\n    });\n\n    lastTopic = result.topics[result.topics.length - 1];\n    processedCount += result.topics.length;\n    if (result.count <= processedCount) {\n      hasMoreTopics = false;\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n  actions.readAllMentions({ chatId, threadId: topicId });\n  actions.readAllReactions({ chatId, threadId: topicId });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n  global = addNotifyExceptions(global, result.notifyExceptionById);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","addChatListIds","addUserStatuses","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","addNotifyExceptions","notifyExceptionById","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","length","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openChatWithParams","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","callAttachBot","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","markChatRead","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","isMuted","mutedUntil","MAX_INT_32","settings","isEnabled","isSilentPosting","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","readAllMentions","readAllReactions","lastTopic","hasMoreTopics","processedCount","date","offsetTopicId","lastMessageId","topics","unreadCount","unreadMentionsCount","unreadReactionsCount","markTopicRead","count","selectTopic","lastTopicMessageId","updateTopic","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","inviteHash","voicechat","livestream","substring","start","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","key","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","channelPostId","currentChat","starRefStartPrefixes","appConfig","prefix","p","slice","action","usernameChat","requestAppWebView","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","peer","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}