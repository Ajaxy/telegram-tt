{"version":3,"file":"6930.89b4f9dea1cc666588ff.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.module.scss?be1f","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(getGlobal(), modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          <StarIcon type=\"gold\" size=\"middle\" />\n          {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n          {withAddButton && (\n            <BadgeButton\n              className={styles.addStarsButton}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openStarsBalanceModal({})}\n            >\n              <Icon\n                className={styles.addStarsIcon}\n                name=\"add\"\n              />\n            </BadgeButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(lang: OldLangFn, transaction: ApiStarsTransaction) {\n  if (transaction.starRefCommision) {\n    return lang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return lang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return lang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || lang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return lang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return lang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return lang('StarsGiftSent');\n  if (transaction.isGift) return lang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? lang('Gift2TransactionSent') : lang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || lang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = transaction.starGift.title;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { getChatTitle, getPeerTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium, shouldForceHeight,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              isText\n              noForcedUpperCase\n              className={styles.starButton}\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const shouldForceHeight = Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: string;\n  className?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  className,\n}: OwnProps) => {\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={styles.transitionSlide}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {subtitle && (\n        <p className={styles.subtitle} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n          {subtitle}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n  let didUpdate = false;\n\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  useMemo(() => { activeKey.current += 1; didUpdate = true; }, deps);\n\n  if (noAnimation && didUpdate) activeKey.current -= 1;\n\n  return activeKey.current;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction.starRefCommision) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={styles.sendAsPeerMenu}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />) }\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getPeerTitle } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectTabState, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n}: OwnProps & StateProps) {\n  const { sendStarGift, openInvoice, openGiftUpgradeModal } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const isStarGift = 'id' in gift;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            currency: gift.currency,\n            amount: gift.amount,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: '0',\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          mediaType: 'action',\n          type: 'starGift',\n          message: giftMessage?.length ? {\n            text: giftMessage,\n          } : undefined,\n          isNameHidden: shouldHideName || undefined,\n          starsToConvert: gift.starsToConvert,\n          canUpgrade: shouldPayForUpgrade || undefined,\n          alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n          gift,\n          peerId,\n          fromId: currentUserId,\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift, shouldHideName, shouldPayForUpgrade, peerId]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [peerId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n        <TextArea\n          className={styles.messageInput}\n          onChange={handleGiftMessageChange}\n          value={giftMessage}\n          label={lang('GiftMessagePlaceholder')}\n          maxLength={captionLimit}\n          maxLengthIndicator={symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined}\n        />\n\n        {isStarGift && gift.upgradeStars && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldPayForUpgradeChange}>\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && gift.upgradeStars && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = isStarGift\n      ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n      : formatCurrency(lang, gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : gift.months}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = global.settings.themes[theme] || {};\n    const peer = selectPeer(global, peerId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {Boolean(discount) && (\n        <GiftRibbon color=\"red\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {renderCategoryItem('limited')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getPeerTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst PremiumGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n}) => {\n  const {\n    closeGiftModal,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const filteredGifts = useMemo(() => {\n    return renderingModal?.gifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1);\n  }, [renderingModal]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && starGiftIdsByCategory?.[selectedCategory].map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={peer}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && !chat && renderGiftPremiumHeader()}\n        {!isSelf && !chat && renderGiftPremiumDescription()}\n        {!isSelf && !chat && renderPremiumGifts()}\n\n        {renderStarGiftsHeader()}\n        {renderStarGiftsDescription()}\n        <StarGiftCategoryList onCategoryChanged={onCategoryChanged} />\n        <Transition\n          name=\"zoomFade\"\n          activeKey={getCategoryKey(selectedCategory)}\n          className={styles.starGiftsTransition}\n        >\n          {renderStarGifts()}\n        </Transition>\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(styles.header, !shouldShowHeader && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : 0}\n      >\n        {!isGiftScreen && renderMainScreen()}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions gift={selectedGift} peerId={renderingModal.forPeerId} />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n  };\n})(PremiumGiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'limited') return -1;\n  if (category === 'stock') return 0;\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"starAmountIcon\":\"_5guecUe\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible,\n  ApiEmojiStatusType,\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../../config';\nimport { getHasAdminRight, getPeerTitle } from '../../../../global/helpers';\nimport { isApiPeerChat } from '../../../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport MenuItem from '../../../ui/MenuItem';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    openChatWithDraft,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    openGiftTransferModal,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canUpdate = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n    handleClose();\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (savedGift?.gift.type !== 'starGiftUnique') return;\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    if (!savedGift?.upgradeMsgId || !renderingTargetPeer) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: renderingTargetPeer.id, messageId: upgradeMsgId! });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isMenuOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AriaMoreButton')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canUpdate && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canUpdate && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canUpdate) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canUpdate) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canUpdate ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n          {lang('CopyLink')}\n        </MenuItem>\n        <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n          {lang('Share')}\n        </MenuItem>\n        {canUpdate && isGiftUnique && (\n          <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n            {lang('GiftInfoTransfer')}\n          </MenuItem>\n        )}\n        {canWear && (\n          <MenuItem icon=\"crown-wear\" onClick={handleWear}>\n            {lang('GiftInfoWear')}\n          </MenuItem>\n        )}\n        {canTakeOff && (\n          <MenuItem icon=\"crown-take-off\" onClick={handleTakeOff}>\n            {lang('GiftInfoTakeOff')}\n          </MenuItem>\n        )}\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        <Button\n          className={styles.modalCloseButton}\n          round\n          color=\"translucent-white\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {isOpen && uniqueGiftContextMenu}\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {description && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          formatDateTimeToString(savedGift.date * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.firstSaleDate) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canUpdate && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n            {canUpdate && <BadgeButton onClick={handleOpenUpgradeModal}>{lang('GiftInfoUpgradeBadge')}</BadgeButton>}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canUpdate || tonLink) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canUpdate && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canUpdate, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isOpen, isGiftUnique, canWear, canTakeOff,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n      />\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      targetPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getPeerTitle, getStickerMediaHash } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>{\n            lang('UniqueStatusWearTitle', {\n              gift: mockPeerWithStatus?.emojiStatus?.title,\n            })\n          }\n          </div>\n          <div className={styles.infoDescription}>{\n            lang('UniqueStatusBenefitsDescription')\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React, {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const { closeGiftWithdrawModal, clearGiftWithdrawError, processStarGiftWithdrawal } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"PvaNNycU\",\"giftPreview\":\"nCQxWKdu\",\"backdrop\":\"JCP9JNuS\",\"arrow\":\"p_1cyCau\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nimport styles from './GiftTransferModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={renderingSelectedPeer}\n              size={AVATAR_SIZE}\n              className={styles.avatar}\n            />\n          </div>\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","getGlobal","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","lang","useLang","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","StarIcon","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","isNegativeStarsAmount","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","history","all","transactions","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","shouldShowItems","shouldSuggestGifting","transactionTabs","key","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","minimal","modalBalance","starButton","isText","noForcedUpperCase","topupOptions","tos","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withNodes","withMarkdown","pluralValue","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","deps","noAnimation","didUpdate","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","style","buildStyle","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","model","number","regularHeader","noLoop","tableData","peerLabel","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","currentUser","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","find","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","themes","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","sendStarGift","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","customBackgroundValue","useCustomBackground","isStarGift","isPeerUser","isSelf","localMessage","isOutgoing","senderId","action","mediaType","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","months","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","handleOpenUpgradePreview","giftId","handleMainButtonClick","shouldUpgrade","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","fluid","GiftRibbon","percent","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGifts","idsByCategory","StarGiftCategoryList","onCategoryChanged","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","PremiumGiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","filteredGifts","gifts","prevGift","baseGift","reduce","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","starGiftsDescription","starGiftsTransition","starGiftsContainer","GiftItemStar","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","openChatWithDraft","openGiftStatusInfoModal","setEmojiStatus","openGiftTransferModal","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","renderingFromPeer","renderingTargetPeer","isTargetChat","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","hasConvertOption","currenUniqueEmojiStatusSlug","starGiftUniqueSlug","starGiftUniqueLink","TME_LINK_PREFIX","userCollectibleStatus","isGiftUnique","canTakeOff","canWear","canFocusUpgrade","upgradeMsgId","canUpdate","inputGift","handleCopyLink","handleLinkShare","handleTransfer","handleWear","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleFocusUpgraded","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","SettingsMenuButton","isMenuOpen","renderFooterButton","isShiny","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","icon","uniqueGiftModalHeader","modalHeader","modalCloseButton","uniqueGift","soldOut","CUSTOM_PEER_HIDDEN","unknown","firstSaleDate","lastSaleDate","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerName","ownerAddress","ownerId","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","shouldSkipModal","ConfirmDialog","confirmHandler","formatStarsAsText","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","models","attr","patterns","backdrops","random","getRandomAttributes","useInterval","attributes","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","onCheck","TableAboutModal","isCurrentUserPremium","selectIsCurrentUserPremium","GiftStatusInfoModal","closeGiftStatusInfoModal","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","GIFT_STICKER_SIZE","REM","byKey","hasPassword","twoFaSettings","hint","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","giftPreview","arrow","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","placeholder","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","AVATAR_SIZE","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","useCallback","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","closeConfirmModal","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","noDefaultTitle","confirmLabel","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","children","headerIconName","withSeparator","onButtonClick","absoluteCloseButtonColor","isStatic","multiline","iconClassName","headerAvatarPeer","handleOpenChat","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown"],"sourceRoot":""}