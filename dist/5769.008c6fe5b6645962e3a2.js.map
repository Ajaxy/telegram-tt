{"version":3,"file":"5769.008c6fe5b6645962e3a2.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !message.replyToStoryId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiTypeReplyTo,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const replyingToId = !isStoryReply ? selectReplyingToId(global, chatId!, threadId!) : undefined;\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId!, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId!, threadId!)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n  const replyingTo: ApiTypeReplyTo | undefined = replyingToId\n    ? { replyingTo: replyingToId, replyingToTopId }\n    : (isStoryReply ? { userId: storyPeerId!, storyId: storyId! } : undefined);\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: threadId!,\n    replyingTo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo: replyingToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo: replyingToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingTo: toThreadId ? { replyingTo: toThreadId, replyingToTopId: toThreadId } : undefined,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: ApiTypeReplyTo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  currentThreadId: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (params.currentThreadId !== MAIN_THREAD_ID) {\n    if (!params.replyingTo || !('replyingTo' in params.replyingTo)) {\n      params.replyingTo = {\n        replyingTo: params.currentThreadId,\n      };\n    }\n\n    if (!params.replyingTo.replyingTo) {\n      params.replyingTo.replyingTo = params.currentThreadId;\n    }\n    if (params.replyingTo.replyingTo && !params.replyingTo.replyingToTopId) {\n      params.replyingTo.replyingToTopId = params.currentThreadId;\n    }\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    currentThreadId: MAIN_THREAD_ID,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectThreadInfo,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type {\n  ApiChat, ApiChatType, ApiContact, ApiPeer, ApiUrlAuthResult,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectIsTrustedBot,\n  selectReplyingToId, selectSendAs, selectTabState, selectThreadTopMessageId, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || (isFromSideMenu && (bot?.isInactive || bot?.isDisclaimerNeeded));\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId, url } = payload;\n    actions.openChat({ id: chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingTo: replyingTo ? {\n      replyingTo,\n      replyingToTopId: threadId,\n    } : undefined,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectPeer, selectPeerStories, selectPeerStory, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updatePeerStory(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const applyInfoResult = await callApi('fetchCanApplyBoost', {\n    chat,\n  });\n\n  if (!applyInfoResult?.info) return;\n\n  const applyInfo = applyInfoResult.info;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(applyInfoResult.chats, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      applyInfo,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  return APP_VERSION_REGEX.test(remoteVersion) && remoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER,\n  PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (selectPeerStories(global, previousPeerId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectPeerStories(global, previousPeerId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectPeerStories(global, nextPeerId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID, IS_STORIES_ENABLED } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {IS_STORIES_ENABLED && shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n  IS_STORIES_ENABLED,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          {IS_STORIES_ENABLED && (\n            <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_APP, IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getPeerColorKey,\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        sender && !noUserColors && `color-${getPeerColorKey(sender)}`,\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p dir=\"auto\">\n          {isExpiredStory && (\n            <i className=\"icon icon-story-expired\" aria-hidden />\n          )}\n          {isFullStory && (\n            <i className=\"icon icon-story-reply\" aria-hidden />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getPeerColorKey,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport EmbeddedStory from '../../common/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyStory,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasStoryReply = Boolean(message.replyToStoryId);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useEnsureStory(\n    message.replyToStoryUserId ? message.replyToStoryUserId : chatId,\n    message.replyToStoryId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getPeerColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <i className={`icon ${forwardInfo?.hiddenUserName ? 'icon-forward' : 'icon-share-filled'}`} />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeEmojiInteractions, activeReactions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, forwardInfo,\n      transcriptionId, isPinned, replyToStoryUserId, replyToStoryId, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = replyToStoryId && replyToStoryUserId\n      ? selectPeerStory(global, replyToStoryUserId, replyToStoryId)\n      : undefined;\n    const storySender = replyToStoryUserId ? selectUser(global, replyToStoryUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyStory,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Button from '../../ui/Button';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { isLocalMessageId } from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  IS_STORIES_ENABLED,\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = IS_STORIES_ENABLED\n      && peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","push","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","replyToStoryId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","map","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","selectThreadTopMessageId","replyToTopMessageId","userId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyingToForFirstMessage","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","boostModal","closeBoostModal","boostStatus","applyInfoResult","info","applyInfo","newStatusResult","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","trim","test","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","localChat","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","IS_STORIES_ENABLED","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","dividend","getPeerIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorKey","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","openComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","noLoop","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","path","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","replyToStoryUserId","isChatWithSelf","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasReply","isReplyMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","customTitle","forwardAuthor","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isComments","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","ConfirmDialog","confirmIsDestructive","confirmLabel","confirmHandler","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}