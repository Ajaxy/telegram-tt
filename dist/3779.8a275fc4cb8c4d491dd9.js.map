{"version":3,"file":"3779.8a275fc4cb8c4d491dd9.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.module.scss?df39","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/AppendEntityPicker.module.scss?b380","webpack://telegram-t/./src/components/main/AppendEntityPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.module.scss?a8f0","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getSelectionAsFormattedText.ts","webpack://telegram-t/./src/components/common/PinMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.module.scss?c38f","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/isSelectionRangeInsideMessage.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiMessage, ApiPeer,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getMessageActionPhoto,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoAvatarMediaHash,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPhoto,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsDownloading,\n  selectIsMessageProtected,\n} from '../../global/selectors';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered && !isUnsupported, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectTabState, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { ARE_WEBCODECS_SUPPORTED, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: ThreadId;\n  avatarOwner?: ApiPeer;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({ message, forcePlayback: true, isForMediaViewer: true });\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../api/types';\n\nimport { getSenderTitle } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectPeer,\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/date/dateFormat';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: selectPeer(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiPeer;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiPeer | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!]?.id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../global/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../global/types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium } : StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <i className=\"icon icon-eye-closed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-past', styles.icon)} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-future', styles.icon)} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import React, { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  usersById: Record<string, ApiUser>;\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  usersById,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterUsersByName([...selectedIds || [], ...contactIds], usersById, searchQuery));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds, usersById]);\n\n  return (\n    <Picker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterUsersByName([...closeFriendIds, ...contactIds], usersById, searchQuery));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery, usersById]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiUser } from '../../api/types';\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport { getSenderTitle, getUserFullName } from '../../global/helpers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryPinned } = getActions();\n\n  const lang = useLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isPinned);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isPinned !== isPinned) {\n      toggleStoryPinned({ peerId: story!.peerId, storyId: story!.id, isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getSenderTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? convertSecondsToHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <i className={`icon icon-${option.icon}`} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <i className=\"icon icon-next\" aria-hidden />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story as ApiStory : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n\nfunction convertSecondsToHours(seconds: number): number {\n  const secondsInHour = 3600;\n  const minutesInHour = 60;\n\n  const hours = Math.floor(seconds / secondsInHour);\n  const remainingSeconds = seconds % secondsInHour;\n  const remainingMinutes = Math.floor(remainingSeconds / minutesInHour);\n\n  // If remaining minutes are greater than or equal to 30, round up the hours\n  return remainingMinutes >= 30 ? hours + 1 : hours;\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport {\n  getSenderTitle,\n  isUserId,\n} from '../../../global/helpers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../Icon';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const showMoreButtonRef = useRef<HTMLDivElement>(null);\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransition(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      if (!showMoreButtonRef.current) {\n        return;\n      }\n\n      const button = showMoreButtonRef.current;\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        button.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const lineHeight = parseInt(getComputedStyle(textContainer).lineHeight, 10);\n      const isOverflowing = textContainer.clientHeight > lineHeight * LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport { getStoryKey, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && 'emoticon' in sentReaction\n    ? sentReaction.emoticon === HEART_REACTION.emoticon : false;\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}><Icon name=\"channelviews\" className={styles.viewIcon} />{viewsCount}</span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={'documentId' in sentReaction ? sentReaction.documentId : sentReaction.emoticon}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import React, {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { getSenderTitle, isChatChannel, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativeTime } from '../../util/date/dateFormat';\nimport download from '../../util/download';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport { IS_SAFARI } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isReportModalOpen?: boolean;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  areChatSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  areChatSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryPinned,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadChatSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isPinned : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isPinned : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story!.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getSenderTitle(lang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.usernames?.length,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransition(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransition(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransition(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransition(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransition(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransition(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransition(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !areChatSettingsLoaded) {\n      loadChatSettings({ chatId: peerId });\n    }\n  }, [areChatSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress(handleLongPressStart, handleLongPressEnd);\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryPinned({ peerId, storyId, isPinned: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryPinned({ peerId, storyId, isPinned: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getSenderTitle(lang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = lang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = lang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = lang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: lang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: lang('StealthModeOn'),\n        message: lang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: lang('StoryNotFound'),\n    });\n  }, [lang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={lang('AccDescrOpenMenu2')}\n        >\n          <i className={buildClassName('icon icon-more')} aria-hidden />\n        </Button>\n      );\n    };\n  }, [isMobile, lang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <i className={`icon icon-${privacyIcon}`} aria-hidden />\n        {isOut && <i className=\"icon icon-next\" aria-hidden />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getSenderTitle(lang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getSenderTitle(lang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativeTime(lang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{lang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={lang('Volume')}\n            >\n              <i\n                className={buildClassName(\n                  'icon',\n                  isMuted || noSound ? 'icon-speaker-muted-story' : 'icon-speaker-story',\n                )}\n                aria-hidden\n              />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{lang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {lang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {lang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {lang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-closed-outline\" onClick={handleOpenStealthModal}>\n                {lang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{lang('lng_report_story')}</MenuItem>}\n            {isOut && <MenuItem icon=\"delete\" destructive onClick={handleDeleteStoryClick}>{lang('Delete')}</MenuItem>}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className={buildClassName('icon icon-close')} aria-hidden />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={lang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={lang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay story={story} isActive />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getSenderTitle(lang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={lang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={lang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately')}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || isReportModalOpen || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    areChatSettingsLoaded: Boolean(chat?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n  };\n})(Story));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress(\n  onStart: NoneToVoidFunction,\n  onEnd: NoneToVoidFunction,\n) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart();\n      isLongPressActive.current = true;\n    }, DEFAULT_THRESHOLD);\n  }, [onStart]);\n\n  const cancel = useCallback(() => {\n    if (isLongPressActive.current) {\n      onEnd();\n    }\n\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  }, [onEnd]);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(timerId.current);\n    };\n  }, []);\n\n  return {\n    onMouseDown: start,\n    onMouseUp: cancel,\n    onMouseLeave: cancel,\n    onTouchStart: start,\n    onTouchEnd: cancel,\n  };\n}\n\nexport default useLongPress;\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getSenderTitle, getStoryMediaHash } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getSenderTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSignal from '../../hooks/useSignal';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isReportModalOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePrevious(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement | null }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | null, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isReportModalOpen={isReportModalOpen}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isReportModalOpen={isReportModalOpen}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName, isUserId } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story!.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews!.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <i className={buildClassName(\n          'icon',\n          areReactionsFirst ? 'icon-heart-outline' : 'icon-recent',\n          styles.iconSort,\n        )}\n        />\n        <i className={buildClassName('icon icon-down', styles.iconDown)} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              // eslint-disable-next-line react/no-array-index-key\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor } = getActions();\n\n  const lang = useLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePrevious(isOpen);\n  const prevBestImageData = usePrevious(bestImageData);\n  const prevPeerId = usePrevious(peerId);\n  const prevOrigin = usePrevious(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeReportModal();\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  }, []);\n\n  const handleCloseDeleteModal = useCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className={buildClassName('icon icon-close')} aria-hidden />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isReportModalOpen={isReportModalOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openReportModal}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        subject=\"story\"\n        peerId={peerId!}\n        storyId={storyId}\n      />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const topicsResult = forumId ? chatsById[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById[forumId!], topic.id, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfoById[id]);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName, isUserId } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingIsStory = usePrevious(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: Number(threadId) });\n    }\n  }, [currentUserId, isManyMessages, isStory, lang]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title, duration,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          duration={duration}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiGeoPoint } from '../../../api/types';\n\nimport { prepareMapUrl } from '../../../util/map';\nimport { IS_IOS, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  geoPoint?: ApiGeoPoint;\n  zoom?: number;\n};\n\nconst OpenMapModal = ({ geoPoint, zoom }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          Open Street Maps\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"eha3Z6eU\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUserName?: string;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUserName,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, currentUserName]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/date/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        closeWebApp();\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport type { PopupOptions, WebAppInboundEvent } from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst LUMA_THRESHOLD = 128;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [isSettingsButtonVisible, setIsSettingsButtonVisible] = useState(false);\n\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n\n  const [shouldConfirmClosing, setShouldConfirmClosing] = useState(false);\n  const [isCloseModalOpen, openCloseModal, hideCloseModal] = useFlag(false);\n  const [isRemoveModalOpen, openRemoveModal, hideRemoveModal] = useFlag(false);\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequesingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyInfo,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyInfo,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(webApp!.url);\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (shouldConfirmClosing) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeWebApp();\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      openRemoveModal();\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    const result = await callApi('allowBotSendMessages', { bot: bot! });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot: bot!,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n\n      setShouldConfirmClosing(false);\n      hideCloseModal();\n      hideRemoveModal();\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setIsSettingsButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      setIsSettingsButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      if (eventData.color_key) {\n        const themeParams = extractCurrentThemeParams();\n        const key = eventData.color_key;\n        const newColor = themeParams[key];\n        const color = validateHexColor(newColor) ? newColor : headerColor;\n        setHeaderColor(color);\n      }\n\n      if (eventData.color) {\n        const color = validateHexColor(eventData.color) ? eventData.color : headerColor;\n        setHeaderColor(color);\n      }\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setShouldConfirmClosing(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n      || eventData.buttons.length > 3 || isRequestingPhone || isRequesingWriteAccess\n      || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequesingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n  }\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.moreButton, isMenuOpen && 'active')}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme]);\n\n  function renderHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {isSettingsButtonVisible && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        text={lang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequesingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={lang('lng_bot_allow_write_title')}\n        text={lang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={lang('lng_bot_allow_write_confirm')}\n      />\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={hideCloseModal}\n        title={lang('lng_bot_close_warning_title')}\n        text={lang('lng_bot_close_warning')}\n        confirmHandler={closeWebApp}\n        confirmIsDestructive\n        confirmLabel={lang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={hideRemoveModal}\n        title={lang('BotRemoveFromMenuTitle')}\n        textParts={renderText(lang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  icon: string;\n  isFontIcon?: boolean;\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\n// eslint-disable-next-line @typescript-eslint/comma-dangle\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <i\n          className={buildClassName(styles.fontIcon, `icon icon-${icon}`)}\n          aria-hidden\n          style={`--item-color: rgb(${r},${g},${b})`}\n        />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport Button from '../ui/Button';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, `icon-${floatingBadgeIcon}`, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import React, { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-closed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = 5.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type { ApiPremiumPromo, ApiPremiumSubscriptionOption } from '../../../api/types';\nimport type { ApiLimitTypeForPromo, ApiPremiumSection, GlobalState } from '../../../global/types';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium ? lang('OK') : lang('SubscribeToPremium', formatCurrency(perMonthPrice, currency, lang.code));\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {subscriptionButtonText && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumGiftOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const lang = useLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={lang('GiftDiscount')}\n            > &minus;{discount}%\n            </span>\n          )}\n          {lang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrency(amount, currency, lang.code)} x ${users!}`\n            : lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrency(amount, currency, lang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ApiPremiumSection, GlobalState } from '../../../global/types';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    }\n  }, [isOpen]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const stickerSetTitle = useMemo(() => {\n    if (!fromUserStatusSet || !fromUser) return undefined;\n\n    const template = lang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n    const [first, second] = template.split('{link}');\n\n    const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n      <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n    ) : undefined;\n    const link = (\n      <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n        {emoji}{renderText(fromUserStatusSet.title)}\n      </span>\n    );\n    return [renderText(first), link, renderText(second)];\n  }, [fromUser, fromUserStatusSet, lang]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      perMonthPrice,\n      currency,\n      lang.code,\n    );\n  }, [selectedSubscriptionOption, lang.code]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return lang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            {fromUserStatusEmoji ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {fromUserStatusSet ? stickerSetTitle : renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"PMXzSiTT\",\"closeButton\":\"j3gx2vFZ\",\"avatars\":\"yIKcy5ir\",\"center\":\"EIXAUV27\",\"description\":\"TJy4zGvM\",\"premiumFeatures\":\"JqQfM_r9\",\"options\":\"eXU0NjiF\",\"boostIcon\":\"ZsR31o4m\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n} from '../../../api/types';\n\nimport { BOOST_PER_SENT_GIFT } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Modal from '../../ui/Modal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  isCompleted?: boolean;\n  gifts?: ApiPremiumGiftCodeOption[] | undefined;\n  forUserIds?: string[];\n  boostPerSentGift?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isCompleted,\n  gifts,\n  boostPerSentGift = BOOST_PER_SENT_GIFT,\n  forUserIds,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const {\n    openPremiumModal, closeGiftPremiumModal, openInvoice, requestConfetti,\n  } = getActions();\n\n  const lang = useLang();\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n\n  const selectedUserQuantity = forUserIds && forUserIds.length * boostPerSentGift;\n\n  useEffect(() => {\n    if (forUserIds?.length) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [gifts, forUserIds]);\n\n  const giftingUserList = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return forUserIds?.map((userId) => usersById[userId]).filter(Boolean);\n  }, [forUserIds]);\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === forUserIds?.length);\n  }, [gifts, selectedMonthOption, forUserIds?.length]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users\n      === forUserIds?.length);\n  }, [gifts, forUserIds?.length]);\n\n  const fullMonthlyGiftAmount = useMemo(() => {\n    if (!filteredGifts?.length) {\n      return undefined;\n    }\n\n    const basicGift = filteredGifts.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    });\n\n    return Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const handleSubmit = useLastCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: forUserIds!,\n      currency: selectedGift!.currency,\n      amount: selectedGift!.amount,\n      option: selectedGift!,\n    });\n  });\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isCompleted) {\n      showConfetti();\n    }\n  }, [isCompleted, showConfetti]);\n\n  const userNameList = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return forUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [forUserIds]);\n\n  function renderGiftTitle() {\n    if (isCompleted) {\n      return renderText(lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle',\n        [userNameList, selectedGift?.months]), ['simple_markdown']);\n    }\n\n    return lang('GiftTelegramPremiumTitle');\n  }\n\n  function renderGiftText() {\n    if (isCompleted) {\n      return renderText(lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', userNameList),\n        ['simple_markdown']);\n    }\n    return renderText(lang('GiftPremiumUsersGiveAccessManyZero', userNameList), ['simple_markdown']);\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={buildClassName(styles.premiumFeatures, styles.center)}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function renderBoostsPluralText() {\n    const giftParts = renderText(lang('GiftPremiumWillReceiveBoostsPlural', selectedUserQuantity), ['simple_markdown']);\n    return giftParts.map((part) => {\n      if (typeof part === 'string') {\n        return part.split(/(⚡)/g).map((subpart) => {\n          if (subpart === '⚡') {\n            return <Icon name=\"boost\" className={styles.boostIcon} />;\n          }\n          return subpart;\n        });\n      }\n      return part;\n    });\n  }\n\n  function renderSubscriptionGiftOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={gift.months}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyGiftAmount}\n              checked={gift.months === selectedMonthOption}\n              onChange={setSelectedMonthOption}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={styles.avatars}>\n          <AvatarList\n            size=\"large\"\n            peers={giftingUserList}\n          />\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={buildClassName(styles.description, styles.center)}>\n          {renderGiftText()}\n        </p>\n        {!isCompleted && (\n          <>\n            <p className={styles.description}>\n              {renderText(renderBoostsPluralText(), ['simple_markdown', 'emoji'])}\n            </p>\n\n            <div className={styles.options}>\n              {renderSubscriptionGiftOptions()}\n            </div>\n          </>\n        )}\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      {!isCompleted && (\n        <Button withPremiumGradient className={styles.button} isShiny disabled={!selectedGift} onClick={handleSubmit}>\n          {lang(\n            'GiftSubscriptionFor', selectedGift\n            && formatCurrency(selectedGift!.amount, selectedGift.currency, lang.code),\n          )}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    gifts, forUserIds, isCompleted,\n  } = selectTabState(global).giftPremiumModal || {};\n\n  return {\n    isCompleted,\n    gifts,\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    forUserIds,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './Icon';\nimport Picker from './Picker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePrevious(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList\n      .filter((country) => !country.isHidden)\n      .map((country) => country.iso2);\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <Picker\n          className={styles.picker}\n          itemIds={displayedIds}\n          selectedIds={selectedCountryIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          isCountryList\n          countryList={countryList}\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fAO_fMJD\",\"main\":\"vtyWYWNc\",\"filter\":\"OM3FgjkD\",\"title\":\"d3EvpDij\",\"buttons\":\"w2D1Ddo7\",\"picker\":\"dWDj6lW6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUserStatus } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName, isChatChannel, isChatPublic, isChatSuperGroup, isUserBot, sortUserIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Picker from '../common/Picker';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Modal from '../ui/Modal';\n\nimport styles from './AppendEntityPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  chatId?: string;\n  entityType: 'members' | 'channels' | undefined;\n  onSubmit: (value: string[]) => void;\n  selectionLimit: number;\n};\n\ninterface StateProps {\n  chatId?: string;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  channelList?: (ApiChat | undefined)[] | undefined;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  currentUserId?: string | undefined;\n}\n\nconst AppendEntityPickerModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  onClose,\n  members,\n  adminMembersById,\n  userStatusesById,\n  entityType,\n  isChannel,\n  isSuperGroup,\n  onSubmit,\n  currentUserId,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const channelsIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    const activeChatIds = getGlobal().chats.listIds.active;\n\n    return activeChatIds!.map((id) => chatsById[id])\n      .filter((chat) => chat && (isChatChannel(chat)\n        || isChatSuperGroup(chat)) && chat.id !== chatId)\n      .map((chat) => chat!.id);\n  }, [chatId]);\n\n  const adminIds = useMemo(() => {\n    return adminMembersById && Object.keys(adminMembersById);\n  }, [adminMembersById]);\n\n  const memberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return adminIds ? userIds.filter((userId) => userId !== currentUserId) : userIds;\n  }, [adminIds, currentUserId, members, userStatusesById]);\n\n  const displayedMembersIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = memberIds ? filterUsersByName(memberIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const displayedChannelIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    const foundChannelIds = channelsIds ? filterChatsByName(lang, channelsIds, chatsById, searchQuery) : [];\n\n    return sortChatIds(unique(foundChannelIds).filter((contactId) => {\n      const chat = chatsById[contactId];\n      if (!chat) {\n        return true;\n      }\n\n      return isChannel || isSuperGroup;\n    }),\n    false,\n    selectedIds);\n  }, [channelsIds, lang, searchQuery, selectedIds, isSuperGroup, isChannel]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    onSubmit([]);\n    onClose();\n  });\n\n  const handleSendIdList = useLastCallback(() => {\n    onSubmit(selectedIds);\n    onClose();\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds((prevIds) => unique([...prevIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const handleClose = useLastCallback(() => {\n    onSubmit([]);\n    onClose();\n  });\n\n  function renderSearchField() {\n    return (\n      <div className={styles.filter} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleCloseButtonClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={styles.title}>{lang(entityType === 'channels'\n          ? 'RequestPeer.ChooseChannelTitle' : 'BoostingAwardSpecificUsers')}\n        </h3>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onEnter={handleSendIdList}\n    >\n      <div className={styles.main}>\n        {renderSearchField()}\n        <div className={buildClassName(styles.main, 'custom-scroll')}>\n          <Picker\n            className={styles.picker}\n            itemIds={entityType === 'members' ? displayedMembersIds : displayedChannelIds}\n            selectedIds={selectedIds}\n            filterValue={searchQuery}\n            filterPlaceholder={lang('Search')}\n            searchInputId={`${entityType}-picker-search`}\n            onSelectedIdsChange={entityType === 'channels'\n              ? handleSelectedChannelIdsChange : handleSelectedMemberIdsChange}\n            onFilterChange={setSearchQuery}\n            isSearchable\n          />\n        </div>\n        <div className={styles.buttons}>\n          <Button size=\"smaller\" onClick={handleSendIdList}>\n            {lang('Save')}\n          </Button>\n        </div>\n      </div>\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { chatId, entityType }): StateProps => {\n  const { statusesById: userStatusesById } = global.users;\n  let isChannel;\n  let isSuperGroup;\n  let members: ApiChatMember[] | undefined;\n  let adminMembersById: Record<string, ApiChatMember> | undefined;\n  let currentUserId: string | undefined;\n\n  if (entityType === 'members') {\n    currentUserId = global.currentUserId;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    if (chatFullInfo) {\n      members = chatFullInfo.members;\n      adminMembersById = chatFullInfo.adminMembersById;\n    }\n  } if (entityType === 'channels') {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (chat) {\n      isChannel = isChatChannel(chat);\n      isSuperGroup = isChatSuperGroup(chat);\n    }\n  }\n\n  return {\n    chatId,\n    members,\n    adminMembersById,\n    userStatusesById,\n    isChannel,\n    isSuperGroup,\n    currentUserId,\n  };\n})(AppendEntityPickerModal));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'random_users' | 'specific_users';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? `${selectedMemberIds.length}` : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(`${name}`)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry, ApiPremiumGiftCodeOption, ApiPrepaidGiveaway, ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport AppendEntityPickerModal from '../AppendEntityPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiveawayUsersRound from '../../../assets/premium/GiveawayUsersRound.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiPrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n};\n\ntype GiveawayAction = 'createRandomlyUsers' | 'createSpecificUsers';\ntype ApiGiveawayType = 'random_users' | 'specific_users';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway,\n  } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isEntityPickerModalOpen, openEntityPickerModal, closeEntityPickerModal] = useFlag();\n  const [entityType, setEntityType] = useState<'members' | 'channels' | undefined>(undefined);\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'BoostingCreateGiveaway',\n    text: 'BoostingWinnersRandomly',\n    value: 'random_users',\n    img: GiftBlueRound,\n    actions: 'createRandomlyUsers',\n    isLink: false,\n  }, {\n    name: 'BoostingAwardSpecificUsers',\n    text: 'BoostingSelectRecipients',\n    value: 'specific_users',\n    img: GiveawayUsersRound,\n    actions: 'createSpecificUsers',\n    isLink: true,\n    onClickAction: () => {\n      openEntityPickerModal();\n      setEntityType('members');\n    },\n  }];\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedUserCount, setSelectedUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountriesIds, setSelectedCountriesIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const isRandomUsers = selectedGiveawayOption === 'random_users';\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountriesIds && selectedCountriesIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountriesIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountriesIds && selectedCountriesIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountriesIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountriesIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n\n  const selectedGift = useMemo(() => {\n    return gifts!.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users\n      === (selectedUserIds?.length ? selectedUserIds?.length : selectedUserCount));\n  }, [gifts, selectedUserIds, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    if (!filteredGifts?.length) {\n      return undefined;\n    }\n\n    const basicGift = filteredGifts.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    });\n\n    return Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    const uniqueUserCounts = new Set(gifts?.map((gift) => gift.users));\n    return Array.from(uniqueUserCounts).sort((a, b) => a - b);\n  }, [gifts]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedMonthOption(prepaidGiveaway ? prepaidGiveaway.months : gifts?.[0].months);\n    }\n  }, [gifts, isOpen, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (prepaidGiveaway) {\n      setSelectedUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedUserIds?.length) {\n      openInvoice({\n        type: 'giftcode',\n        boostChannelId: chatId!,\n        userIds: selectedUserIds,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n        option: selectedGift!,\n      });\n    } else {\n      openInvoice({\n        type: 'giveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountriesIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n        option: selectedGift!,\n      });\n    }\n\n    closeGiveawayModal();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    launchPrepaidGiveaway({\n      chatId: chatId!,\n      giveawayId: dataPrepaidGiveaway!.id,\n      paymentPurpose: {\n        additionalChannelIds: selectedChannelIds,\n        countries: selectedCountriesIds,\n        prizeDescription,\n        areWinnersVisible: shouldShowWinners,\n        untilDate: customExpireDate / 1000,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n      },\n    });\n\n    closeConfirmModal();\n    closeGiveawayModal();\n  });\n\n  const handleUserCountChange = useLastCallback((newValue) => {\n    setSelectedUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  const handleAdd = useLastCallback(() => {\n    openEntityPickerModal();\n    setEntityType('channels');\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountriesIds(value);\n  });\n\n  const handleSetIdsListChange = useLastCallback((value: string[]) => {\n    return entityType === 'members'\n      ? (value?.length ? setSelectedUserIds(value) : setGiveawayOption('random_users'))\n      : setSelectedChannelIds(value);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiveawayModal();\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  if (!gifts) return undefined;\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount!}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <div className={styles.main} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {dataPrepaidGiveaway ? (\n          <div className={styles.status}>\n            <div>\n              <img className={styles.prepaidImg} src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway.months]} alt=\"\" />\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway.quantity)}\n              </h3>\n              <p className={styles.month}>{lang('PrepaidGiveawayMonths', dataPrepaidGiveaway.months)}</p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataPrepaidGiveaway.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isRandomUsers && (\n          <>\n            {!dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingChannelsIncludedGiveaway')}\n              </h2>\n\n              <ListItem\n                inactive\n                className=\"chat-item-clickable contact-list-item\"\n              >\n                <GroupChatInfo\n                  chatId={chatId!}\n                  status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                    : 'BoostingGroupWillReceiveBoost', boostQuantity, 'i')}\n                />\n              </ListItem>\n\n              {selectedChannelIds?.map((channelId) => {\n                return (\n                  <ListItem\n                    ripple\n                    key={channelId}\n                    className=\"chat-item-clickable contact-list-item\"\n                    /* eslint-disable-next-line react/jsx-no-bind */\n                    onClick={() => deleteParticipantsHandler(channelId)}\n                    rightElement={(<Icon name=\"close\" />)}\n                  >\n                    <GroupChatInfo\n                      chatId={channelId.toString()}\n                    />\n                  </ListItem>\n                );\n              })}\n\n              {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n                <ListItem\n                  icon=\"add\"\n                  ripple\n                  onClick={handleAdd}\n                  className={styles.addButton}\n                  iconClassName={styles.addChannel}\n                >\n                  {lang('BoostingAddChannelOrGroup')}\n                </ListItem>\n              )}\n            </div>\n\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingEligibleUsers')}\n              </h2>\n\n              {renderSubscribersOptions()}\n            </div>\n\n            <div className={styles.subscription}>\n              {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n            </div>\n\n            <div className={styles.section}>\n              <div className={styles.checkboxSection}>\n                <h2 className={styles.title}>\n                  {lang('BoostingGiveawayAdditionalPrizes')}\n                </h2>\n\n                <Switcher\n                  label={lang('BoostingGiveawayAdditionalPrizes')}\n                  checked={shouldShowPrizes}\n                  onChange={handleShouldShowPrizesChange}\n                />\n              </div>\n\n              {shouldShowPrizes && (\n                <div className={styles.prizesSection}>\n                  <h2 className={styles.title}>\n                    {dataPrepaidGiveaway ? dataPrepaidGiveaway.quantity : selectedUserCount}\n                  </h2>\n                  <InputText\n                    className={styles.prizesInput}\n                    value={prizeDescription}\n                    onChange={handlePrizeDescriptionChange}\n                    label={lang('BoostingGiveawayEnterYourPrize')}\n                  />\n                </div>\n              )}\n            </div>\n\n            {shouldShowPrizes ? (\n              <div className={styles.subscription}>\n                {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                  dataPrepaidGiveaway\n                    ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                    : [selectedUserCount, prizeDescription, monthQuantity],\n                  undefined,\n                  selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                  dataPrepaidGiveaway\n                    ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                    : [selectedUserCount, monthQuantity],\n                  undefined,\n                  selectedMonthOption), ['simple_markdown'])}\n              </div>\n            ) : (\n              <div className={styles.subscription}>\n                {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n              </div>\n            )}\n\n            <div className={styles.section}>\n              <div className={styles.checkboxSection}>\n                <h2 className={styles.title}>\n                  {lang('BoostingGiveawayShowWinners')}\n                </h2>\n\n                <Switcher\n                  label={lang('BoostingGiveawayAdditionalPrizes')}\n                  checked={shouldShowWinners}\n                  onChange={handleShouldShowWinnersChange}\n                />\n              </div>\n            </div>\n\n            <div className={styles.subscription}>\n              {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n            </div>\n\n            <div className={buildClassName(styles.section, dataPrepaidGiveaway && styles.subscriptionFooter)}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDateWhenGiveawayEnds')}\n              </h2>\n\n              <Button\n                ariaLabel={lang('BoostGift.DateEnds')}\n                className={buildClassName(styles.dateButton, 'expire-limit')}\n                isText\n                onClick={openCalendar}\n              >\n                <h3 className={styles.title}>\n                  {lang('BoostGift.DateEnds')}\n                </h3>\n                {formatDateTimeToString(customExpireDate, lang.code)}\n              </Button>\n            </div>\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button className={styles.button} onClick={dataPrepaidGiveaway ? openConfirmModal : handleClick}>\n              {lang('BoostingStartGiveaway')}\n              <div className={styles.quantity}>\n                <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n                  <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                  <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                    {dataPrepaidGiveaway ? dataPrepaidGiveaway.quantity : boostQuantity}\n                  </div>\n                </div>\n              </div>\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <AppendEntityPickerModal\n        key={entityType}\n        isOpen={isEntityPickerModalOpen}\n        onClose={closeEntityPickerModal}\n        entityType={entityType}\n        chatId={chatId}\n        onSubmit={handleSetIdsListChange}\n        selectionLimit={entityType === 'members' ? userSelectionLimit : GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n  };\n})(GiveawayModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKwZp5xA\",\"main\":\"bo8ICYep\",\"filter\":\"HK8ZNKHl\",\"title\":\"LUU19p8W\",\"buttons\":\"CdZFeuxb\",\"picker\":\"JBzw9a0l\",\"avatars\":\"UAhbe3L3\",\"center\":\"JZ7y_T5c\",\"description\":\"OySCJvvR\",\"premiumFeatures\":\"CrYMy2g6\",\"options\":\"IRkNlxtz\",\"button\":\"HIPk0a6e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GIVEAWAY_MAX_ADDITIONAL_CHANNELS } from '../../../config';\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PremiumGiftingModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst PremiumGiftingModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  userIds,\n}) => {\n  const { closePremiumGiftingModal, openGiftPremiumModal, showNotification } = getActions();\n\n  const lang = useLang();\n\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = userIds ? filterUsersByName(userIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user) && userId !== currentUserId;\n    }));\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSendIdList = useLastCallback(() => {\n    if (selectedUserIds?.length) {\n      openGiftPremiumModal({ forUserIds: selectedUserIds });\n\n      closePremiumGiftingModal();\n    }\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > userSelectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', userSelectionLimit),\n      });\n      return;\n    }\n    setSelectedUserIds(newSelectedIds);\n  });\n\n  function renderSearchField() {\n    return (\n      <div className={styles.filter} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closePremiumGiftingModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={styles.title}>{lang('GiftTelegramPremiumTitle')}\n        </h3>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closePremiumGiftingModal}\n      onEnter={handleSendIdList}\n    >\n      <div className={styles.main}>\n        {renderSearchField()}\n        <div className={buildClassName(styles.main, 'custom-scroll')}>\n          <Picker\n            className={styles.picker}\n            itemIds={displayedUserIds}\n            selectedIds={selectedUserIds}\n            filterValue={searchQuery}\n            filterPlaceholder={lang('Search')}\n            searchInputId=\"users-picker-search\"\n            onSelectedIdsChange={handleSelectedUserIdsChange}\n            onFilterChange={setSearchQuery}\n            isSearchable\n          />\n        </div>\n        <div className={styles.buttons}>\n          <Button withPremiumGradient size=\"smaller\" onClick={handleSendIdList} disabled={!selectedUserIds?.length}>\n            {lang('Continue')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(PremiumGiftingModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <Icon name=\"double-badge\" className={styles.x2} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const hasOnlyStaticThumb = hasStaticThumb && !hasVideoThumb && !hasAnimatedThumb && !thumbCustomEmojiId;\n\n  const shouldFallbackToStatic = hasOnlyStaticThumb || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb);\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTimeOffset } from '../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, !hasCustomColor);\n\n  const {\n    id, isCustomEmoji, hasEffect: isPremium, stickerSetInfo,\n  } = sticker;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuPosition);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n\n  const getLayout = () => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true });\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      openPremiumModal({ initialSection: 'premium_stickers' });\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: sticker,\n      expires: Date.now() / 1000 + duration + getServerTimeOffset(),\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <i className=\"icon icon-lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <i className=\"icon icon-premium\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lu0K9UZP\",\"selected\":\"UF8XKO4C\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport CustomEmoji from './CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport ReactionEmoji from './ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID\n    && !isChatEmojiSet && !isChatStickerSet;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiReaction, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateInFuture } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  info: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  info,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(info);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(lang, chat);\n  }, [chat, lang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(lang, prevBoostedChat);\n  }, [prevBoostedChat, lang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!info?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: lang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = info.boostStatus;\n\n    const firstBoost = info?.myBoosts && getFirstAvailableBoost(info.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = info?.myBoosts && !areAllBoostsInChannel(info.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(info.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = lang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = lang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? lang('BoostChannel') : lang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = lang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = lang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = lang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = lang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, info, lang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !info?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== info?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {lang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {lang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : lang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(lang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {lang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {lang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={lang('OK')}\n          title={lang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            lang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatDateInFuture(lang, getServerTime(), boost!.cooldownUntil),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={lang('Common.Yes')}\n          title={lang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(lang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const chat = info && selectChat(global, info?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = info?.myBoosts && getFirstAvailableBoost(info.myBoosts, info.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"M9b5KmrN\",\"clickable\":\"IzcASdzD\",\"title\":\"_dRihuUh\",\"table\":\"VkcHpgVG\",\"chat-item\":\"imIhcLMN\",\"chatItem\":\"imIhcLMN\",\"logo\":\"Mtx4SWww\",\"centered\":\"xVLGjLub\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport LinkField from '../../common/LinkField';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, openChat, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    closeGiftCodeModal();\n  });\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  function renderContent() {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    return (\n      <>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n        <table className={styles.table}>\n          <tr>\n            <td className={styles.title}>{lang('BoostingFrom')}</td>\n            <td>\n              {fromId ? (\n                <PickerSelectedItem\n                  peerId={fromId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={fromId}\n                  onClick={handleOpenChat}\n                />\n              ) : lang('BoostingNoRecipient')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingTo')}\n            </td>\n            <td>\n              {info.toId ? (\n                <PickerSelectedItem\n                  peerId={info.toId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={info.toId}\n                  onClick={handleOpenChat}\n                />\n              ) : lang('BoostingNoRecipient')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingGift')}\n            </td>\n            <td>\n              {lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingReason')}\n            </td>\n            <td className={buildClassName(info.giveawayMessageId && styles.clickable)} onClick={handleOpenGiveaway}>\n              {info.isFromGiveaway && !info.toId ? lang('BoostingIncompleteGiveaway')\n                : lang(info.isFromGiveaway ? 'BoostingGiveaway' : 'BoostingYouWereSelected')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingDate')}\n            </td>\n            <td>\n              {formatDateTimeToString(info.date * 1000, lang.code, true)}\n            </td>\n          </tr>\n        </table>\n        <span className={styles.centered}>\n          {renderText(\n            info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n              : lang('BoostingSendLinkToAnyone'),\n            ['simple_markdown'],\n          )}\n        </span>\n        <Button onClick={handleButtonClick}>\n          {canUse ? lang('BoostingUseLink') : lang('Close')}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      isSlim\n      title={lang('lng_gift_link_title')}\n      contentClassName={styles.content}\n      onClose={closeGiftCodeModal}\n    >\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/date/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getPrivateChatUserId, isUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyExceptions,\n  selectNotifySettings, selectUser,\n} from '../../../global/selectors';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"large\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"large\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountChatIds?: string[];\n  accountUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountChatIds,\n  accountUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const localContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const localChatIds = filterChatsByName(lang, orderedChatIds, chatsById, searchQuery, currentUserId);\n\n    const localPeerIds = unique([\n      ...localContactIds,\n      ...localChatIds,\n    ]);\n\n    const accountPeerIds = unique([\n      ...(accountChatIds ?? []),\n      ...(accountUserIds ?? []),\n    ].filter((accountPeerId) => !localPeerIds.includes(accountPeerId)));\n\n    return [\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds),\n    ];\n  }, [searchQuery, currentUserId, contactIds, lang, accountChatIds, accountUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      true,\n    );\n  }, [globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              peerId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: accountChatIds, userIds: accountUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      contactIds,\n      accountChatIds,\n      accountUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/date/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport Checkbox from '../../../ui/Checkbox';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            peerId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\n\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport Loading from '../../../ui/Loading';\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport LinkField from '../../../common/LinkField';\nimport Picker from '../../../common/Picker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? lang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedSelectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n};\n\nfunction PrivacyLockedOption({ label }: OwnProps) {\n  const lang = useLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={styles.contactsAndPremiumOptionTitle}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_and_premium_option-title\":\"TGUdGos3\",\"contactsAndPremiumOptionTitle\":\"TGUdGos3\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { selectIsCurrentUserPremium, selectNewNoncontactPeersRequirePremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  shouldNewNonContactPeersRequirePremium,\n  isCurrentUserPremium,\n  onReset,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings } = getActions();\n  const lang = useLang();\n\n  const canChange = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChange ? (\n          lang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption label={lang('PrivacyMessagesContactsAndPremium')} />\n        ),\n        hidden: !canChange,\n      },\n    ];\n  }, [lang, canChange]);\n\n  const handleChange = useLastCallback((privacy: string) => {\n    updateGlobalPrivacySettings({ shouldNewNonContactPeersRequirePremium: privacy === 'contacts_and_premium' });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={shouldNewNonContactPeersRequirePremium ? 'contacts_and_premium' : 'everybody'}\n        />\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Privacy.Messages.SectionFooter')}\n        </p>\n      </div>\n      {!canChange && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition, unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\",\"checkbox\":\"obmoCKjY\",\"languages\":\"BccnzXwC\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/username';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti({})}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('GeneralSettings.StatusBarItem')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{lang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{lang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{lang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiLanguage } from '../../../api/types';\nimport type { ISettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n}) => {\n  const {\n    loadProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openPremiumGiftingModal,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumGiftingModal()}\n          >\n            {lang('GiftPremiumGifting')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('TelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('PrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('lng_settings_ask_ok')}\n        title={lang('AskAQuestion')}\n        text={lang('lng_settings_ask_sure')}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedUsers();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, []);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBio)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBirthday)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <PremiumIcon big withGradient />}\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyVoiceMessages)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <PremiumIcon big withGradient />}\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyMessages)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldNewNonContactPeersRequirePremium\n                ? lang('PrivacyMessagesContactsAndPremium')\n                : lang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle, shouldNewNonContactPeersRequirePremium,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n  }\n\n  return undefined;\n}\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onScreenSelect,\n  onReset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        onScreenSelect={onScreenSelect}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {secondaryScreen && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n          onScreenSelect={onScreenSelect}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  onScreenSelect,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n}) {\n  const { setPrivacyVisibility } = getActions();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={lang('P2PContacts')} />\n        ) : (\n          lang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={lang('P2PNobody')} />\n        ) : (\n          lang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [lang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? lang('PrivacyPhoneInfo') : lang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return lang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return lang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return lang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const prepareSubtitle = useLastCallback((userIds?: string[], chatIds?: string[]) => {\n    const userIdsCount = userIds?.length || 0;\n    const chatIdsCount = chatIds?.length || 0;\n\n    if (!userIdsCount && !chatIdsCount) {\n      return lang('EditAdminAddUsers');\n    }\n\n    const userCountString = userIdsCount > 0 ? lang('Users', userIdsCount) : undefined;\n    const chatCountString = chatIdsCount > 0 ? lang('Chats', chatIdsCount) : undefined;\n\n    return [userCountString, chatCountString].filter(Boolean).join(', ');\n  });\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(privacy?.allowUserIds, privacy?.allowChatIds);\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(allowedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(deniedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { filterChatsByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) setNewSelectedContactIds(selectedContactIds);\n  }, [isActive, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => chatId !== currentUserId);\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { filterUsersByName, isUserBot } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          onSettingsScreenSelect={onSettingsScreenSelect}\n          onLeftColumnContentChange={onLeftColumnContentChange}\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiFormattedText } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\nconst ALLOWED_QUOTE_ENTITIES = new Set([\n  ApiMessageEntityTypes.Bold,\n  ApiMessageEntityTypes.Italic,\n  ApiMessageEntityTypes.Underline,\n  ApiMessageEntityTypes.Strike,\n  ApiMessageEntityTypes.Spoiler,\n  ApiMessageEntityTypes.CustomEmoji,\n]);\n\nexport function getSelectionAsFormattedText(range: Range) {\n  const html = getSelectionAsHtml(range);\n  const formattedText = parseHtmlAsFormattedText(html, false, true);\n\n  return stripEntitiesForQuote(formattedText);\n}\n\nfunction getSelectionAsHtml(range: Range) {\n  const clonedSelection = range.cloneContents();\n  div.appendChild(clonedSelection);\n\n  const html = wrapHtmlWithMarkupTags(range, div.innerHTML);\n  div.innerHTML = '';\n\n  return html\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/&nbsp;/gi, ' ') // Convert nbsp's to spaces\n    .replace(/\\u00a0/gi, ' ');\n}\n\nfunction stripEntitiesForQuote(text: ApiFormattedText): ApiFormattedText {\n  if (!text.entities) return text;\n\n  const entities = text.entities.filter((entity) => ALLOWED_QUOTE_ENTITIES.has(entity.type as ApiMessageEntityTypes));\n  return { ...text, entities: entities.length ? entities : undefined };\n}\n\nfunction wrapHtmlWithMarkupTags(range: Range, html: string) {\n  const container = range.commonAncestorContainer;\n  if (container.nodeType === Node.ELEMENT_NODE && (container as Element).classList.contains('text-content')) {\n    return html;\n  }\n  let currentElement = range.commonAncestorContainer.parentElement;\n  while (currentElement && !currentElement.classList.contains('text-content')) {\n    const tag = currentElement.tagName.toLowerCase();\n    const entityType = currentElement.dataset.entityType;\n    html = `<${tag} ${entityType ? `data-entity-type=\"${entityType}\"` : ''}>${html}</${tag}>`;\n    currentElement = currentElement.parentElement;\n  }\n\n  return html;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PinMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PinMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PinMessageModal = useModuleLoader(Bundles.Extra, 'PinMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PinMessageModal ? <PinMessageModal {...props} /> : undefined;\n};\n\nexport default PinMessageModalAsync;\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: IconName;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMessageLocalBlobUrl(message))\n    && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: onCopyLink,\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"lhinieg0\",\"get\":\"wysoV1T4\",\"skeleton\":\"gPqaUijR\",\"transition\":\"Yg6u_MIn\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Transition from '../../ui/Transition';\n\nimport styles from './ReadTimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  menuSeparatorSize: 'thin' | 'thick';\n  closeContextMenu: NoneToVoidFunction;\n};\n\nfunction ReadTimeMenuItem({\n  message, shouldRenderShowWhen, canLoadReadDate, closeContextMenu, menuSeparatorSize,\n}: OwnProps) {\n  const { openPrivacySettingsNoticeModal } = getActions();\n  const lang = useLang();\n  const { readDate } = message;\n  const shouldRenderSkeleton = canLoadReadDate && !readDate && !shouldRenderShowWhen;\n\n  const handleOpenModal = () => {\n    closeContextMenu();\n    openPrivacySettingsNoticeModal({ chatId: message.chatId, isReadDate: true });\n  };\n\n  return (\n    <>\n      <MenuSeparator size={menuSeparatorSize} />\n      <MenuItem icon=\"message-read\" className={styles.item}>\n        <Transition name=\"fade\" activeKey={shouldRenderSkeleton ? 1 : 2} className={styles.transition}>\n          {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : (\n            <>\n              {Boolean(readDate) && lang('PmReadAt', formatDateAtTime(lang, readDate * 1000))}\n              {!readDate && shouldRenderShowWhen && (\n                <div>\n                  {lang('PmRead')}\n                  <span className={styles.get} onClick={handleOpenModal}>\n                    {lang('PmReadShowWhen')}\n                  </span>\n                </div>\n              )}\n            </>\n          )}\n        </Transition>\n      </MenuItem>\n    </>\n  );\n}\n\nexport default memo(ReadTimeMenuItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport AvatarList from '../../common/AvatarList';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport ReactionSelector from './reactions/ReactionSelector';\nimport ReadTimeMenuItem from './ReadTimeMenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canQuote?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: ApiPeer[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  isInSavedMessages?: boolean;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst REACTION_SELECTOR_HEIGHT_REM = 3;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canQuote,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  isInSavedMessages,\n  shouldRenderShowWhen,\n  canLoadReadDate,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message,\n      targetHref,\n      canCopy,\n      handleAfterCopy,\n      canCopyLink ? onCopyLink : undefined,\n      onCopyMessages,\n      onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      topShiftY: withReactions && !isMobile ? -REACTION_SELECTOR_HEIGHT_REM * REM : 0,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          defaultTagReactions={defaultTagReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        dir={lang.isRtl ? 'rtl' : undefined}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && (\n          <MenuItem icon=\"reply\" onClick={onReply}>\n            {lang(canQuote ? 'lng_context_quote_and_reply' : 'Reply')}\n          </MenuItem>\n        )}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator size=\"thick\" />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <>\n            <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n            <MenuItem\n              icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n              onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n              disabled={!canShowReactionsCount && !seenByDatesCount}\n            >\n              <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n                <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {canShowReactionsCount && message.reactors?.count ? (\n                    canShowSeenBy && seenByDatesCount\n                      ? lang(\n                        'Chat.OutgoingContextMixedReactionCount',\n                        [message.reactors.count, seenByDatesCount],\n                      )\n                      : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                  ) : (\n                    seenByDatesCount === 1 && seenByRecentPeers\n                      ? renderText(\n                        isUserId(seenByRecentPeers[0].id)\n                          ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                          : (seenByRecentPeers[0] as ApiChat).title,\n                      ) : (\n                        seenByDatesCount\n                          ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                          : lang('Conversation.ContextMenuNoViews')\n                      )\n                  )}\n                </span>\n              </span>\n              <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n            </MenuItem>\n          </>\n        )}\n        {!isSponsoredMessage && (canLoadReadDate || shouldRenderShowWhen) && (\n          <ReadTimeMenuItem\n            canLoadReadDate={canLoadReadDate}\n            shouldRenderShowWhen={shouldRenderShowWhen}\n            message={message}\n            menuSeparatorSize={hasCustomEmoji ? 'thin' : 'thick'}\n            closeContextMenu={onClose}\n          />\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type { IAlbum, IAnchorPosition, ThreadId } from '../../../types';\nimport {\n  type ApiAvailableReaction,\n  type ApiChatReactions,\n  type ApiMessage,\n  type ApiReaction,\n  type ApiStickerSet,\n  type ApiStickerSetInfo,\n  type ApiThreadInfo,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageVideo,\n  hasMessageTtl,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectCanTranslateMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsMessageUnread,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getSelectionAsFormattedText } from './helpers/getSelectionAsFormattedText';\nimport { isSelectionRangeInsideMessage } from './helpers/isSelectionRangeInsideMessage';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal.async';\nimport ReportModal from '../../common/ReportModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  threadId?: ThreadId;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  isMessageTranslated?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  canLoadReadDate?: boolean;\n  shouldRenderShowWhen?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n  isInSavedMessages?: boolean;\n};\n\nconst selection = window.getSelection();\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  threadId,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  messageListType,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  canLoadReadDate,\n  shouldRenderShowWhen,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  isMessageTranslated,\n  canShowOriginal,\n  canSelectLanguage,\n  isReactionPickerOpen,\n  isInSavedMessages,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openThread,\n    updateDraftReplyInfo,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n    openPremiumModal,\n    loadOutboxReadDate,\n    copyMessageLink,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n  const [canQuoteSelection, setCanQuoteSelection] = useState(false);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canLoadReadDate && isOpen) {\n      loadOutboxReadDate({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canLoadReadDate, isOpen, message.chatId, message.id, message.readDate]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const selectionRange = canReply && selection?.rangeCount ? selection.getRangeAt(0) : undefined;\n\n  useEffect(() => {\n    if (isMessageTranslated) {\n      setCanQuoteSelection(false);\n      return;\n    }\n\n    const isMessageTextSelected = selectionRange\n      && !selectionRange.collapsed\n      && Boolean(message.content.text?.text)\n      && isSelectionRangeInsideMessage(selectionRange);\n\n    if (!isMessageTextSelected) {\n      setCanQuoteSelection(false);\n      return;\n    }\n\n    const selectionText = getSelectionAsFormattedText(selectionRange);\n\n    setCanQuoteSelection(\n      selectionText.text.trim().length > 0\n      && message.content.text!.text!.includes(selectionText.text),\n    );\n  }, [\n    selectionRange, selectionRange?.collapsed, selectionRange?.startOffset, selectionRange?.endOffset,\n    isMessageTranslated, message.content.text,\n  ]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    updateDraftReplyInfo({\n      replyToMsgId: message.id,\n      quoteText: canQuoteSelection && selectionRange ? getSelectionAsFormattedText(selectionRange) : undefined,\n    });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyMessageLink({\n      chatId: message.chatId,\n      messageId: message.id,\n      shouldIncludeThread: threadId !== MAIN_THREAD_ID,\n      shouldIncludeGrouped: true, // TODO: Provide correct value when ability to target specific message is added\n    });\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isInSavedMessages && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n    } else {\n      toggleReaction({\n        chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        defaultTagReactions={defaultTagReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canQuote={canQuoteSelection}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        shouldRenderShowWhen={shouldRenderShowWhen}\n        canLoadReadDate={canLoadReadDate}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        isInSavedMessages={isInSavedMessages}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n\n    const { defaultTags, topReactions, availableReactions } = global.reactions;\n\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const {\n      seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions, readDateExpiresAt,\n    } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const userStatus = isPrivate ? selectUserStatus(global, chat.id) : undefined;\n    const isOwn = isOwnMessage(message);\n    const isMessageUnread = selectIsMessageUnread(global, message);\n    const canLoadReadDate = Boolean(\n      isPrivate\n        && isOwn\n        && !isMessageUnread\n        && readDateExpiresAt\n        && message.date > Date.now() / 1000 - readDateExpiresAt\n        && !userStatus?.isReadDateRestricted,\n    );\n    const shouldRenderShowWhen = Boolean(\n      canLoadReadDate && isPrivate && selectUserStatus(global, chat.id)?.isReadDateRestrictedByMe,\n    );\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const hasTtl = hasMessageTtl(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && !isMessageUnread\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n\n    return {\n      threadId,\n      availableReactions,\n      topReactions,\n      defaultTagReactions: defaultTags,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: (canCopyNumber || (!isProtected && canCopy)),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      canLoadReadDate,\n      shouldRenderShowWhen,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction\n        && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID && !hasTtl,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      isMessageTranslated: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      isInSavedMessages,\n    };\n  },\n)(ContextMenuContainer));\n","export function isSelectionRangeInsideMessage(range: Range) {\n  const ancestor = range.commonAncestorContainer;\n  const el = ancestor.nodeType === Node.TEXT_NODE\n    ? ancestor.parentNode! as Element\n    : ancestor as Element;\n\n  return Boolean(el.closest('.message-content-wrapper .text-content'))\n    && !(Boolean(el.closest('.EmbeddedMessage')) || Boolean(el.closest('.WebPage')));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat, chatFullInfo) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo)\n        && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanManage, selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsPremiumPurchaseBlocked,\n  selectIsRightColumnShown, selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openBoostStatistics,\n    openGiftPremiumModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserIds: [chatId] });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    blockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return lang('Delete');\n    }\n\n    if (isPrivate) {\n      return lang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return lang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return lang('LeaveChannel');\n    }\n\n    return lang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, lang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {lang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {lang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? lang('BotRestart') : lang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? lang('Unblock') : lang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            peerId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getIsSavedDialog, getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/date/dateFormat';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS } from '../../util/windowEnvironment';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\nimport SavedTagButton from './message/reactions/SavedTagButton';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: ThreadId;\n  query?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  searchTag?: ApiReaction;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  savedTags,\n  searchTag,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const tagsRef = useRef<HTMLDivElement>(null);\n\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  const hasQueryData = Boolean(query || searchTag);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const tags = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasTags = Boolean(tags?.length);\n  const areTagsDisabled = hasTags && !isCurrentUserPremium;\n\n  useHorizontalScroll(tagsRef, !hasTags);\n\n  useEffect(() => {\n    if (isActive) loadSavedReactionTags();\n  }, [hasTags, isActive]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (hasQueryData) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleTagClick = useLastCallback((tag: ApiReaction) => {\n    if (areTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    setLocalTextSearchTag({ tag });\n\n    runDebouncedForSearch(searchTextMessagesLocal);\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      {hasTags && (\n        <div\n          ref={tagsRef}\n          className=\"tags-subheader custom-scroll-x no-scrollbar\"\n        >\n          {tags.map((tag) => (\n            <SavedTagButton\n              containerId=\"mobile-search\"\n              key={getReactionKey(tag.reaction)}\n              reaction={tag.reaction}\n              tag={tag}\n              withCount\n              isDisabled={areTagsDisabled}\n              isChosen={isSameReaction(tag.reaction, searchTag)}\n              onClick={handleTagClick}\n            />\n          ))}\n        </div>\n      )}\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {hasQueryData ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, savedTag, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      searchTag: savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(MobileSearchFooter));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiAvailableReaction, ApiChatReactions, ApiReaction } from '../../../../api/types';\n\nimport { getReactionKey, sortReactions } from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiMessageEntity,\n  ApiReaction, ApiReactionCustomEmoji, ApiSticker, ApiStory, ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\n\nimport { getReactionKey, getStoryKey, isUserId } from '../../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectIsCurrentUserPremium,\n  selectPeerStory, selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  withCustomReactions,\n  sendAsMessage,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReaction | ApiSticker) => {\n    const reaction = 'id' in item ? { documentId: item.id } : item;\n\n    const sticker = 'documentId' in item\n      ? getGlobal().customEmojis.byId[item.documentId] : 'emoticon' in item ? undefined : item;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('emoticon' in item) {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !withCustomReactions && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        chatId={renderedChatId}\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !(withCustomReactions || renderedStoryId)}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions && !renderedStoryId ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n        onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    story,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              'icon',\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"drop-target\":\"LhhRTsy6\",\"dropTarget\":\"LhhRTsy6\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentType, isUserId } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = attachments?.length && getAttachmentType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                    // eslint-disable-next-line react/jsx-no-bind\n                      <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                        {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n                    // eslint-disable-next-line react/jsx-no-bind\n                      <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {lang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {lang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n                // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? lang('Next') : editingMessage ? lang('Save') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text,\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [addedSetIds, stickerSetsById, favoriteStickers, recentStickers, chatStickerSetId, lang]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\n// eslint-disable-next-line @typescript-eslint/comma-dangle\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{command}</span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {canSchedule && onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const linkUrlInputRef = useRef<HTMLInputElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <i className=\"icon icon-eye-closed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <i className=\"icon icon-bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <i className=\"icon icon-italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <i className=\"icon icon-underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <i className=\"icon icon-strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <i className=\"icon icon-monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <i className=\"icon icon-link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <i className=\"icon icon-check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { ANONYMOUS_USER_ID, REPLIES_USER_ID } from '../../config';\nimport { getIsSavedDialog, getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectCurrentTextSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport { debounce } from '../../util/schedulers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport SavedTagButton from '../middle/message/reactions/SavedTagButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  searchTag?: ApiReaction;\n  totalCount?: number;\n  foundIds?: number[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  savedTags,\n  searchTag,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    setLocalTextSearchTag,\n    focusMessage,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const tagsRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const tags = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasTags = Boolean(tags?.length);\n  const areTagsDisabled = hasTags && !isCurrentUserPremium;\n\n  useHorizontalScroll(tagsRef, !hasTags);\n\n  useEffect(() => {\n    if (isActive) loadSavedReactionTags();\n  }, [hasTags, isActive]);\n\n  const handleSearchTextMessagesLocal = useLastCallback(() => {\n    runDebouncedForSearch(searchTextMessagesLocal);\n  });\n\n  const handleTagClick = useLastCallback((tag: ApiReaction) => {\n    if (areTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    if (isSameReaction(tag, searchTag)) {\n      setLocalTextSearchTag({ tag: undefined });\n      return;\n    }\n\n    setLocalTextSearchTag({ tag });\n    handleSearchTextMessagesLocal();\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !searchTag) || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      const originalSender = (isSavedMessages || chatId === REPLIES_USER_ID || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n\n      const senderPeer = originalSender || messageSender;\n\n      const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n      return {\n        message,\n        senderPeer,\n        hiddenForwardTitle,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, searchTag, viewportIds, messagesById, isSavedMessages, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, hiddenForwardTitle, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer?: ApiPeer;\n    hiddenForwardTitle?: string;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n          text={hiddenForwardTitle}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            {senderPeer && <FullNameTitle peer={senderPeer} withEmojiStatus />}\n            {!senderPeer && hiddenForwardTitle}\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {hasTags && (\n        <div\n          ref={tagsRef}\n          className=\"search-tags custom-scroll-x no-scrollbar\"\n          key=\"search-tags\"\n        >\n          {tags.map((tag) => (\n            <SavedTagButton\n              containerId=\"local-search\"\n              key={getReactionKey(tag.reaction)}\n              reaction={tag.reaction}\n              tag={tag}\n              withCount\n              isDisabled={areTagsDisabled}\n              isChosen={isSameReaction(tag.reaction, searchTag)}\n              onClick={handleTagClick}\n            />\n          ))}\n        </div>\n      )}\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, savedTag, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      isSavedMessages,\n      savedTags,\n      searchTag: savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && lang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: LangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small-mobile\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview\n        statistics={statistics}\n        type={isGroup ? 'group' : 'channel'}\n        title={lang('StatisticOverview')}\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage } from '../../api/types';\n\nimport { getMessagePoll } from '../../global/helpers';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}` });\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || chat?.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport {\n  filterUsersByName, getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, sortUserIds,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <LinkField\n            className=\"section\"\n            link={primaryInviteLink}\n            withShare\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice, ApiPaymentCredentials,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n    botName?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} draggable={false} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { RefObject } from 'react';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { Price, ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest, isPaymentFormUrl,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n      botName,\n    } = selectTabState(global).payment;\n\n    let providerName = nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId!) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider: providerName,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\nimport type { Price } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMissingInvitedUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AvatarList from '../../common/AvatarList';\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  chatId?: string;\n  missingUsers?: ApiMissingInvitedUser[];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  missingUsers,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id), [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds! });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds!.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  if (!userIds) return undefined;\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <Picker\n            className={styles.userPicker}\n            itemIds={userIds!}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            isRoundCheckbox\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  info: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  info,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useLang();\n  const message = useCurrentOrPrev(info?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(Boolean(info));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","getNodes","message","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","SharedMedia","SearchResult","MiddleHeaderAvatar","SuggestedAvatar","ScheduledInline","Inline","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","DeleteMessageModal","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","MediaViewerActions","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","MediaViewerFooter","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","connector","index","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","element","selector","matches","isAvatar","sender","selectPeer","selectSender","SenderInfo","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","MediaViewer","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","ReportModal","subject","peerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","BASE_SCREEN_WIDTH","BASE_SCREEN_HEIGHT","BASE_ACTIVE_SLIDE_WIDTH","BASE_ACTIVE_SLIDE_HEIGHT","BASE_SLIDE_WIDTH","BASE_SLIDE_HEIGHT","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","tabState","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","usersById","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterUsersByName","Picker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","forceShowSelf","onSelectedIdsChange","onFilterChange","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryPinned","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","seconds","hours","remainingSeconds","convertSecondsToHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","closeFriends","denyList","handleActionClick","actionInner","getUserFullName","Switcher","label","footer","info","submit","renderPrivacyList","CloseFriends","AllowDenyList","modal","noBackdrop","onCloseAnimationEnd","header","closeButton","headerTitle","renderHeaderContent","slideClassName","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","toLowerCase","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","Icon","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","parseInt","getComputedStyle","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isChannel","isSentStoryReactionHeart","emoticon","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","documentId","withEffectOnly","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","areChatSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadChatSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","isChatChannel","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","usernames","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransition","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","onMouseLeave","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","onStart","isLongPressActive","isPressed","timerId","canProcessEvent","cancel","useLongPress","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","StoryProgress","formatRelativeTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","inputPlaceholder","onFocus","onBlur","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","parts","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","isLoading","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","query","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","selected","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","thumb","safeAreaBottom","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","topicsResult","searchTitle","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","clickArg","TopicIcon","letterClassName","Loading","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","chatIds","isDeletedUser","sorted","sortChatIds","filterChatsByName","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","isSelf","toChatId","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","dialog","contactRequest","invite","hash","about","participantsCount","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","Notifications","notifications","dismissNotification","localId","actionText","Notification","onDismiss","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","OpenMapModal","geoPoint","closeMapModal","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","openUrl","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","UrlAuthModal","urlAuth","currentUserName","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","WebAppModal","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","isSettingsButtonVisible","setIsSettingsButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","shouldConfirmClosing","setShouldConfirmClosing","isCloseModalOpen","openCloseModal","hideCloseModal","isRemoveModalOpen","openRemoveModal","hideRemoveModal","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequesingWriteAccess","setIsRequestingWriteAccess","unlockPopupsAt","handlePopupOpened","handlePopupClosed","sequentialLimit","resetAfter","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyInfo","isSimple","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","openInvoice","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","forceReloadFrame","once","eventType","isNonStable","eventData","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","color_key","newColor","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","shouldShowMainButton","useInterval","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","buttonId","button_id","handleAppPopupModalClose","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleToggleClick","handleBackClick","handleAcceptPhone","handleAcceptWriteAccess","openBotChat","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","shortName","isAttachBot","sandbox","allow","allowFullScreen","hasCloseButton","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","count","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","description","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","fill","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","currentUser","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","amount","months","currency","perMonthPrice","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","dialogRef","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","options","showConfetti","prevIsPremium","defaultOption","handleOpenStatusSet","stickerSetTitle","template","first","second","emoji","thumbCustomEmojiId","CustomEmoji","link","monthOption","subscribeButtonText","isBig","PremiumLogo","statusText","entities","statusEntities","renderFooterText","gifts","forUserIds","isCompleted","giftPremiumModal","boostPerSentGift","boostsPerSentGift","GiftPremiumModal","BOOST_PER_SENT_GIFT","closeGiftPremiumModal","selectedMonthOption","setSelectedMonthOption","selectedUserQuantity","giftingUserList","selectedGift","gift","filteredGifts","fullMonthlyGiftAmount","basicGift","handlePremiumClick","userNameList","modalDialog","avatars","headerText","center","part","subpart","boostIcon","subscriptionOptions","match","premiumFeatures","Link","isPrimary","renderPremiumFeaturesLink","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","noScrollRestore","isCountryList","entityType","statusesById","userStatusesById","isSuperGroup","members","adminMembersById","chatFullInfo","selectChatFullInfo","AppendEntityPickerModal","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","pendingChannelId","setPendingChannelId","channelsIds","adminIds","memberIds","sortUserIds","displayedMembersIds","filteredContactIds","isUserBot","displayedChannelIds","foundChannelIds","contactId","handleSendIdList","confirmPrivateLinkChannelSelection","prevIds","handleSelectedMemberIdsChange","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isEntityPickerModalOpen","openEntityPickerModal","closeEntityPickerModal","setEntityType","TYPE_OPTIONS","GiveawayUsersRound","customExpireDate","setCustomExpireDate","selectedUserCount","setSelectedUserCount","selectedGiveawayOption","setGiveawayOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","selectedCountriesIds","setSelectedCountriesIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","boostQuantity","isRandomUsers","SUBSCRIBER_OPTIONS","subLabel","monthQuantity","userCountOptions","uniqueUserCounts","Set","quantity","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleUserCountChange","newValue","handlePrizeDescriptionChange","handleAdd","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSetIdsListChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","RangeSliderWithMarks","rangeCount","marks","filteredChannelIds","deleteParticipantsHandler","iconClassName","RadioGroup","subLabelClassName","formatDateTimeToString","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","PremiumGiftingModal","closePremiumGiftingModal","openGiftPremiumModal","displayedUserIds","handleSelectedUserIdsChange","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","currentIndex","stickerSetEl","isClose","animateScroll","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","coords","useCoordsInSharedCanvas","accessHash","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isSavedMessages","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","setEmojiStatus","menuRef","isCustomEmoji","hasEffect","isLocked","shouldLoad","isIntesectingForShowing","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","shouldRenderContextMenu","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","expires","getServerTimeOffset","shouldShowCloseButton","contextMenuItems","item","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","isSameReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","getReactionKey","isHqEmoji","canvasRef","has","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","prefix","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","cleanRecentReactions","some","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","userSetIds","unshift","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","boosts","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","handleCloseClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","formatDateInFuture","chatMessage","messageSender","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","LinkField","PickerSelectedItem","isFromGiveaway","ChatlistAlready","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","newChatsCount","badgeText","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","alreadyPeerIds","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","folderTitle","foldersWrapper","folders","badgeCount","isBadgeActive","AboutAdsModal","SafeLink","isPrivateChat","isGroup","canPinForAll","PinMessageModal","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","DeleteSelectedMessageModal","exitMessageSelectMode","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","onBackspace","onEsc","handleCopy","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","userName","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","LOCAL_TGS_URLS","ReadTime","LastSeen","Separator","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","LoadMoreDirection","Backwards","formatIntegerCompact","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","secondaryIcon","narrow","highlight","createMapStateToProps","fetchingStatus","globalSearch","currentType","isVoice","byChatId","globalMessagesByChatId","activeDownloads","searchChatId","shouldWarnAboutSvg","byKey","runThrottled","cb","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","handleMessageFocus","handlePlayAudio","canRenderContents","noFastList","NothingFound","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","shouldReplaceHistory","useSelectWithEnter","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","onReset","openThread","nothingFound","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","storyViewerOrigin","MuteChatModal","ChatFolderModal","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","globalResults","localResults","globalChatIds","globalUserIds","accountChatIds","accountUserIds","ChatResults","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","localContactIds","orderedChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","localPeerIds","accountPeerIds","accountPeerId","handleClickShowMoreLocal","handleClickShowMoreGlobal","noScrollRestoreOnTop","CURRENT_TYPE","FileResults","observeIntersectionForMedia","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","TABS","GlobalSearchContent","Links","Files","Music","Voice","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","maxChats","selectCurrentLimit","SettingsFoldersChatsPicker","mode","selectedChatTypes","shouldHideChatTypes","onSelectedChatTypesChange","onSaveFilter","openLimitReachedModal","chatTypes","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","shouldMinimize","isTouched","setIsTouched","handleItemClick","splice","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","typeKey","isMinimized","canClose","withChatType","SettingsFoldersChatFilters","dispatch","chatFilter","selectedChatIds","selectChatFilters","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","isChatList","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","renderChatType","ShowMoreButton","itemName","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","pinnedChatIds","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","FoldersShare","withShare","onRevoke","onDisabledClick","isRoundCheckbox","SettingsFolders","currentScreen","shownScreen","onScreenSelect","openShareChatFolderModal","editChatFolder","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","premiumSection","handleOpenPremiumModal","PremiumIcon","withGradient","big","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","canLimitNewMessagesWithoutPremium","canChange","PrivacyLockedOption","hidden","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appName","appVersion","ip","region","getLocation","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","avatar","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","language","doNotTranslate","SettingsDoNotTranslate","displayedOptions","setDisplayedOptions","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","ManageUsernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","Experimental","IS_ELECTRON","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","SettingsGeneral","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","newSize","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyGroupChats","PrivacyPhoneCall","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","languages","canTranslate","canTranslateChats","SettingsLanguage","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","loadProfilePhotos","openSupportChat","openPremiumGiftingModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","langName","FAQ_URL","PRIVACY_URL","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","hasPasscode","blockedCount","totalCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","lastSeen","profilePhoto","birthday","forwards","phoneCall","allowDisabledClick","voiceMessages","chatInvite","blockedIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","availableContactIds","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","screen","PrivacyPhoneP2P","PrivacyAddByPhone","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","prepareSubtitle","userIdsCount","chatIdsCount","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","addByPhone","phoneP2P","SettingsPrivacyVisibility","secondaryScreen","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","setPrivacySettings","selectedContactIds","updatedIds","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","isInactive","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","animatedEmoji","selectAnimatedEmoji","codeLength","twoFaSettings","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","_isFrom","_currentKey","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","ContactList","openNewContactDialog","filteredIds","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","div","ALLOWED_QUOTE_ENTITIES","ApiMessageEntityTypes","Bold","Italic","Underline","Strike","Spoiler","getSelectionAsFormattedText","range","html","clonedSelection","cloneContents","commonAncestorContainer","nodeType","Node","ELEMENT_NODE","currentElement","tag","wrapHtmlWithMarkupTags","innerHTML","getSelectionAsHtml","entity","stripEntitiesForQuote","parseHtmlAsFormattedText","useModuleLoader","Bundles","Extra","getCopyLabel","hasSelection","shouldRenderShowWhen","canLoadReadDate","closeContextMenu","menuSeparatorSize","openPrivacySettingsNoticeModal","readDate","MenuSeparator","handleOpenModal","MessageContextMenu","isReactionPickerOpen","enabledReactions","maxUniqueReactions","anchor","targetHref","canSendNow","canReschedule","canReply","canQuote","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","isInSavedMessages","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onToggleReaction","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","shouldRenderAsHtml","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","extraMarginTop","topShiftY","menuElMinWidth","withScroll","handleOpenMessageReactionPicker","bubbleStyle","ReactionSelector","allAvailableReactions","currentReactions","onShowMore","messagesCount","inline","withWrap","sponsorInfo","ReadTimeMenuItem","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","readDateExpiresAt","noOptions","isOwn","isOwnMessage","isMessageUnread","selectIsMessageUnread","isReadDateRestricted","isReadDateRestrictedByMe","isScheduled","isMessageLocal","hasTtl","hasMessageTtl","isChatGroup","membersCount","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","isMessageTranslated","selectIsReactionPickerOpen","ContextMenuContainer","updateDraftReplyInfo","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","loadOutboxReadDate","copyMessageLink","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","canQuoteSelection","setCanQuoteSelection","requestCalendar","calendar","useSchedule","uniqueReactors","PREVIEW_AVATAR_COUNT","msg","selectionRange","getRangeAt","collapsed","ancestor","TEXT_NODE","isSelectionRangeInsideMessage","selectionText","startOffset","endOffset","handleDelete","handleReport","closeMenu","closePinModal","handleReply","replyToMsgId","quoteText","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","shouldIncludeThread","shouldIncludeGrouped","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","SponsoredMessageContextMenuContainer","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","premiumGifts","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openBoostStatistics","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","botButtons","cmd","deleteTitle","DeleteChatModal","isSavedDialog","runDebouncedForSearch","savedTag","selectCurrentTextSearch","savedTags","savedReactionTags","isHistoryCalendarOpen","searchTag","MobileSearchFooter","setLocalTextSearchQuery","setLocalTextSearchTag","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","loadSavedReactionTags","tagsRef","focusedIndex","setFocusedIndex","hasQueryData","visualViewport","mainEl","pageTop","blur","tags","hasTags","areTagsDisabled","handleMessageSearchQueryChange","newQuery","handleTagClick","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SavedTagButton","withCount","isChosen","getDayStartAt","ReactionPickerLimited","isTouchScreen","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","REACTION_SELECTOR_WIDTH","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","ReactionPicker","closeReactionPicker","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","handleStoryReactionSelect","isFree","customEmojiMessage","buildCustomEmojiHtml","isReaction","chosenOrder","backdropExcludedSelector","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","isInAlbum","groupedId","notEditingFile","getAttachmentType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","canSchedule","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","noReplaceNewlines","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","favorite","chatStickerSetId","recentStickers","selectShouldLoopStickers","StickerPicker","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","EDITABLE_INPUT_ID","textFormat","restoreSelection","removeAllRanges","addRange","updateSelectedRange","getSelectedText","shouldDropCustomEmoji","replaceChildren","INPUT_CUSTOM_EMOJI_SELECTOR","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","RightSearch","handleSearchTextMessagesLocal","viewportResults","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","senderPeer","hiddenForwardTitle","hiddenUserName","foundResult","isOnTop","preloadBackwards","renderSearchResult","teactOrderKey","LastMessageMeta","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","toggleStoryStatistics","imgBlobUrl","withStorySolid","forceUnreadStorySolid","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","msgId","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","PollResults","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","isSignaturesShown","canChangeInfo","canInvite","exportedInvites","ManageChannel","updateChat","toggleSignatures","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","canAddNewAdmins","adminRights","addAdmins","adminMembers","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","canDeleteMembers","removedMembers","ManageChatRemovedUsers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","bannedRights","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canBanUsers","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","permissions","setPermissions","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handlePermissionChange","handleSavePermissions","handleDismissAdmin","getControlIsDisabled","memberStatus","handleCustomTitleChange","changeInfo","blocking","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","inviteUsers","pinMessages","manageCall","manageTopics","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","ManageGroupMembers","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","memberId","DeleteMemberModal","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","havePermissionChanged","setHavePermissionChanged","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","assign","embedLinks","sendPlain","sendMessages","ManageGroupPermissions","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleSaveClick","formatFullDate","n","inviteInfo","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","personalPhoto","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","defaultName","Checkout","invoice","prices","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","botName","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","invoiceInfo","renderCheckoutItem","customIcon","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","passwordHint","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","providerName","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","handleModalClose","modalHeader","isSubmitDisabled","isRecurring","getIsSubmitDisabled","cleanupOnlyKey","currentStep","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","ReceiptModal","fullAddress","InviteViaLinkModal","missingUsers","sendInviteMessages","closeInviteViaLinkModal","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedIds","lockedUnselectedSubtitle","isViewOnly","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","closeBtnTitle","voice","OneTimeModal","isRound","RoundVideo","onStop","renderMedia","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","MonkeyClose","playSegment","MonkeyPeek","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}