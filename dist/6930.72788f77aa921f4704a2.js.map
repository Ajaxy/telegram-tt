{"version":3,"file":"6930.72788f77aa921f4704a2.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftManageButtons.module.scss?f41d","webpack://telegram-t/./src/components/modals/gift/UniqueGiftManageButtons.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModalResaleScreen.tsx","webpack://telegram-t/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.module.scss?8276","webpack://telegram-t/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.tsx","webpack://telegram-t/./src/components/modals/gift/GiftResaleFilters.module.scss?c5a8","webpack://telegram-t/./src/components/modals/gift/GiftResaleFilters.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.module.scss?0f0d","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.module.scss?3884","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.module.scss?6666","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/GoldStar.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"lastSection\":\"f749AI4g\",\"sectionTitle\":\"FF8gm7MP\",\"hint\":\"Rs8WXoOz\",\"tos\":\"Vu6blJk9\",\"topUpButton\":\"dc_DZoVF\",\"tonBalanceContainer\":\"lorbW9II\",\"tonBalance\":\"h2Fs3tOv\",\"tonIconBalance\":\"Ut6GidJP\",\"tonInUsd\":\"FdcdsB4l\",\"tonIconLogo\":\"_hCjjyEv\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiTypeCurrencyAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  const renderStarsAmount = () => {\n    return (\n      <>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined && balance.currency === STARS_CURRENCY_CODE\n          ? formatStarsAmount(lang, balance) : '…'}\n        {withAddButton && (\n          <BadgeButton\n            className={styles.addStarsButton}\n            onClick={() => openStarsBalanceModal({})}\n          >\n            <Icon\n              className={styles.addStarsIcon}\n              name=\"add\"\n            />\n          </BadgeButton>\n        )}\n      </>\n    );\n  };\n\n  const renderTonAmount = () => {\n    return (\n      <>\n        <Icon name=\"toncoin\" />\n        {balance !== undefined ? convertCurrencyFromBaseUnit(balance.amount, balance.currency) : '…'}\n      </>\n    );\n  };\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          {balance?.currency === TON_CURRENCY_CODE ? renderTonAmount() : renderStarsAmount()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction, ApiTypeCurrencyAmount } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer, shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n\n  if (transaction.isGiftResale) {\n    return isNegativeAmount(transaction.amount)\n      ? lang('StarGiftSaleTransaction')\n      : lang('StarGiftPurchaseTransaction');\n  }\n  if (transaction.isPostsSearch) {\n    return lang('PostsSearchTransaction');\n  }\n\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) {\n    if (transaction.amount.currency === TON_CURRENCY_CODE) {\n      return lang('TonGiftReceived');\n    }\n    return oldLang('StarsGiftReceived');\n  }\n  if (transaction.starGift) {\n    return isNegativeAmount(transaction.amount) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n    && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n\nexport function isNegativeAmount(currencyAmount: ApiTypeCurrencyAmount) {\n  if (currencyAmount.currency === STARS_CURRENCY_CODE) {\n    return isNegativeStarsAmount(currencyAmount);\n  }\n  return currencyAmount.amount < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    amount,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (!shouldUseCustomPeer(transaction)) {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isGiftResale && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isPostsSearch) {\n      title = getTransactionTitle(oldLang, lang, transaction);\n      description = undefined;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, amountColorClass)}\n        >\n          {formatStarsTransactionAmount(lang, amount)}\n        </span>\n        {amount.currency === STARS_CURRENCY_CODE && <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />}\n        {amount.currency === TON_CURRENCY_CODE && <Icon name=\"toncoin\" className={amountColorClass} />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  PAID_MESSAGES_PURPOSE,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit, convertTonToUsd, formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ParticlesHeader from '../common/ParticlesHeader.tsx';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  tonBalanceState?: GlobalState['ton'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n  tonUsdRate?: number;\n  tonTopupUrl: string;\n  animationLevel: AnimationLevel;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, tonBalanceState, canBuyPremium, shouldForceHeight, tonUsdRate, tonTopupUrl, animationLevel,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n    openUrl,\n  } = getActions();\n\n  const currency = modal?.currency || STARS_CURRENCY_CODE;\n  const currentState = currency === TON_CURRENCY_CODE ? tonBalanceState : starsBalanceState;\n  const { balance, history } = currentState || {};\n  const { subscriptions } = (currency === STARS_CURRENCY_CODE && starsBalanceState) || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && (starsBalanceState || tonBalanceState));\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const modalHeight = useMemo(() => {\n    const transactionCount = history?.all?.transactions.length || 0;\n    if (transactionCount === 1) {\n      return '35.5rem';\n    }\n    if (transactionCount === 2) {\n      return '39.25rem';\n    }\n    if (transactionCount === 3) {\n      return '43rem';\n    }\n    return '45rem';\n  }, [history?.all?.transactions.length]);\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  const renderStarsHeaderSection = () => {\n    return (\n      <>\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"gold\"\n          title={starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          description={renderText(\n            starsNeededText || oldLang('TelegramStarsInfo'),\n            ['simple_markdown', 'emoji'],\n          )}\n          isDisabled={!isOpen}\n        />\n        {canBuyPremium && !areBuyOptionsShown && (\n          <Button\n            className={styles.starButton}\n            onClick={showBuyOptions}\n            fluid\n          >\n            {oldLang('Star.List.BuyMoreStars')}\n          </Button>\n        )}\n        {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n          <Button\n            isText\n            noForcedUpperCase\n            className={styles.starButton}\n            fluid\n            onClick={openStarsGiftingPickerModalHandler}\n          >\n            {oldLang('TelegramStarsGift')}\n          </Button>\n        )}\n        {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n          <StarTopupOptionList\n            starsNeeded={starsNeeded}\n            options={starsBalanceState.topupOptions}\n            onClick={handleBuyStars}\n          />\n        )}\n      </>\n    );\n  };\n\n  const renderTonHeaderSection = () => {\n    const tonAmount = convertCurrencyFromBaseUnit(balance?.amount || 0, TON_CURRENCY_CODE);\n    return (\n      <>\n        <ParticlesHeader\n          model=\"speeding-diamond\"\n          color=\"blue\"\n          title={lang('CurrencyTon')}\n          description={lang('DescriptionAboutTon')}\n          isDisabled={!isOpen}\n        />\n        <div className={styles.tonBalanceContainer}>\n          <div className={styles.tonBalance}>\n            <Icon name=\"toncoin\" className={styles.tonIconBalance} />\n            {tonAmount}\n          </div>\n          {Boolean(tonUsdRate) && (\n            <span className={styles.tonInUsd}>\n              {`≈ ${formatCurrencyAsString(\n                convertTonToUsd(balance?.amount || 0, tonUsdRate, true),\n                'USD',\n                lang.code,\n              )}`}\n            </span>\n          )}\n        </div>\n        <Button\n          className={styles.topUpButton}\n          onClick={handleTonTopUp}\n          fluid\n        >\n          {lang('ButtonTopUpViaFragment')}\n        </Button>\n      </>\n    );\n  };\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n      isTon: currency === TON_CURRENCY_CODE,\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  const handleTonTopUp = useLastCallback(() => {\n    openUrl({ url: tonTopupUrl });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n      dialogStyle={`--modal-height: ${modalHeight}`}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {currency !== TON_CURRENCY_CODE && <BalanceBlock balance={balance} className={styles.modalBalance} />}\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          {currency === TON_CURRENCY_CODE ? renderTonHeaderSection() : renderStarsHeaderSection()}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {currency === TON_CURRENCY_CODE && (\n          <div className={styles.hint}>\n            {lang('TonModalHint')}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.lastSection}>\n              <Transition\n                name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const shouldForceHeight = modal?.currency === TON_CURRENCY_CODE\n      ? Boolean(global.ton?.history?.all?.transactions.length)\n      : Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      tonBalanceState: global.ton,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      tonUsdRate: global.appConfig.tonUsdRate,\n      tonTopupUrl: global.appConfig.tonTopupUrl,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarsBalanceModal));\n","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => Boolean(media.duration));\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {Boolean(disclaimerText) && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"manageButtons\":\"feHNN0j8\",\"manageButton\":\"biAUzmLA\",\"text\":\"hsDNs5hG\",\"icon\":\"APNjRx1K\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible,\n  ApiEmojiStatusType,\n  ApiSavedStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID } from '../../../config';\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './UniqueGiftManageButtons.module.scss';\n\ntype OwnProps = {\n  savedGift?: ApiSavedStarGift;\n};\n\ntype StateProps = {\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst UniqueGiftManageButtons = ({\n  savedGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps & StateProps) => {\n  const {\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    updateStarGiftPrice,\n    showNotification,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const gift = savedGift?.gift;\n  const isGiftUnique = gift?.type === 'starGiftUnique';\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const global = getGlobal();\n  const modal = selectTabState(global).giftInfoModal;\n  const peerId = modal?.peerId;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((status) =>\n      status.type === 'collectible' && status.slug === starGiftUniqueSlug,\n    ) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currentUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n  const canTakeOff = starGiftUniqueSlug !== undefined && currentUniqueEmojiStatusSlug === starGiftUniqueSlug;\n  const canWear = Boolean(userCollectibleStatus) && !canTakeOff;\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    } else if (userCollectibleStatus) {\n      openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n    }\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift || !peerId) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnlist = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  return (\n    <div className={styles.manageButtons}>\n      <Button\n        color=\"transparentBlured\"\n        iconName=\"gift-transfer-inline\"\n        iconAlignment=\"top\"\n        iconClassName={styles.icon}\n        onClick={handleTransfer}\n        ariaLabel={lang('GiftInfoTransfer')}\n        noForcedUpperCase\n        fluid\n        className={styles.manageButton}\n      >\n        <span className={styles.text}>\n          {lang('GiftInfoTransfer')}\n        </span>\n      </Button>\n      {(canWear || !canTakeOff) && (\n        <Button\n          color=\"transparentBlured\"\n          iconName={canTakeOff ? 'crown-take-off' : 'crown-wear'}\n          iconAlignment=\"top\"\n          iconClassName={styles.icon}\n          onClick={canWear || canTakeOff ? handleWear : undefined}\n          disabled={!canWear && !canTakeOff}\n          ariaLabel={lang(canTakeOff ? 'GiftInfoTakeOff' : 'GiftInfoWear')}\n          noForcedUpperCase\n          fluid\n          className={styles.manageButton}\n        >\n          <span className={styles.text}>\n            {lang(canTakeOff ? 'GiftInfoTakeOff' : 'GiftInfoWear')}\n          </span>\n        </Button>\n      )}\n      {!giftResalePrice && (\n        <Button\n          color=\"transparentBlured\"\n          iconName=\"sell\"\n          iconAlignment=\"top\"\n          iconClassName={styles.icon}\n          onClick={handleSell}\n          ariaLabel={lang('Sell')}\n          noForcedUpperCase\n          fluid\n          className={styles.manageButton}\n        >\n          <span className={styles.text}>\n            {lang('Sell')}\n          </span>\n        </Button>\n      )}\n      {Boolean(giftResalePrice) && (\n        <Button\n          color=\"transparentBlured\"\n          iconName=\"unlist\"\n          iconAlignment=\"top\"\n          iconClassName={styles.icon}\n          onClick={handleUnlist}\n          ariaLabel={lang('GiftInfoUnlist')}\n          noForcedUpperCase\n          fluid\n          className={styles.manageButton}\n        >\n          <span className={styles.text}>\n            {lang('GiftInfoUnlist')}\n          </span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(UniqueGiftManageButtons));\n","import type { TeactNode } from '@teact';\nimport { memo, useMemo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiSavedStarGift,\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n  ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport {\n  formatStarsTransactionAmount,\n} from '../../../global/helpers/payments';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\nimport UniqueGiftManageButtons from './UniqueGiftManageButtons';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: TeactNode;\n  subtitlePeer?: ApiPeer;\n  className?: string;\n  resellPrice?: ApiTypeCurrencyAmount;\n  showManageButtons?: boolean;\n  savedGift?: ApiSavedStarGift;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  subtitlePeer,\n  className,\n  resellPrice,\n  showManageButtons,\n  savedGift,\n}: OwnProps) => {\n  const {\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const [isGiftHover, markGiftHover, unmarkGiftHover] = useFlag(false);\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root,\n      isGiftHover && 'interactive-gift',\n      showManageButtons && styles.withManageButtons,\n      className)}\n    >\n      <Transition\n        className={styles.transition}\n        slideClassName={buildClassName(styles.transitionSlide)}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n          noLoop={!isGiftHover}\n          onMouseEnter={!IS_TOUCH_ENV ? markGiftHover : undefined}\n          onMouseLeave={!IS_TOUCH_ENV ? unmarkGiftHover : undefined}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {Boolean(subtitle) && (\n        <div\n          className={buildClassName(styles.subtitle, subtitlePeer && styles.subtitleBadge)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n          onClick={() => {\n            if (subtitlePeer) {\n              openChat({ id: subtitlePeer.id });\n            }\n          }}\n        >\n          {subtitle}\n        </div>\n      )}\n      {savedGift && showManageButtons && (\n        <UniqueGiftManageButtons\n          savedGift={savedGift}\n        />\n      )}\n      {resellPrice && (\n        <p className={styles.amount}>\n          <span>\n            {formatStarsTransactionAmount(lang, resellPrice)}\n          </span>\n          {resellPrice.currency === 'XTR' && <StarIcon type=\"gold\" size=\"middle\" />}\n          {resellPrice.currency === 'TON' && <Icon name=\"toncoin\" />}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"withManageButtons\":\"QcTw5OSp\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"subtitleBadge\":\"V7kDVPLm\",\"amount\":\"zTVWZg63\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"refunded\":\"sxWAwxTd\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\",\"avatar\":\"hcrszlpT\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../../config';\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal,\n  peer,\n  canPlayAnimatedEmojis,\n  topSticker,\n  paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, amount, isGiftUpgrade, starGift, isGiftResale,\n      starRefCommision,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n      && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId ? getMessageLink(peer, undefined, giveawayPostId) : undefined;\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker && !transaction.isPostsSearch;\n    const avatarPeer = !photo ? ((!shouldUseCustomPeer(transaction) && peer) || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n          resellPrice={transaction.amount}\n        />\n      </div>\n    );\n\n    const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar\n            className={styles.avatar}\n            peer={avatarPeer}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n        )}\n        {!sticker && !transaction.isPostsSearch && (\n          <InteractiveSparkles\n            className={buildClassName(styles.starsBackground)}\n            color=\"gold\"\n            onRequestAnimation={handleRequestAnimation}\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n          />\n        )}\n        {Boolean(title) && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, amountColorClass)}\n          >\n            {formatStarsTransactionAmount(lang, amount)}\n          </span>\n          {amount.currency === STARS_CURRENCY_CODE && <StarIcon type=\"gold\" size=\"middle\" />}\n          {amount.currency === 'TON' && <Icon name=\"toncoin\" className={amountColorClass} />}\n          {transaction.isRefund && (\n            <p className={styles.refunded}>{lang('Refunded')}</p>\n          )}\n        </p>\n        {Boolean(transaction.paidMessages && transaction.starRefCommision && paidMessageCommission) && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission! / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    if (isGiftResale) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        isNegativeAmount(transaction.amount)\n          ? lang('StarGiftSaleTransaction')\n          : lang('StarGiftPurchaseTransaction'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeAmount(amount) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    if (!transaction.isPostsSearch) {\n      tableData.push([\n        peerLabel,\n        peerId ? { chatId: peerId } : toName || '',\n      ]);\n    }\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.amount.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink && transaction.amount.currency === STARS_CURRENCY_CODE) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.amount, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker,\n    paidMessageCommission, handleRequestAnimation]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig.starsPaidMessageCommissionPermille;\n\n    const currencyAmount = modal?.transaction.amount;\n    const starsGiftSticker = modal?.transaction.isGift\n      ? (currencyAmount?.currency === STARS_CURRENCY_CODE ? selectGiftStickerForStars(global, currencyAmount?.amount)\n        : selectGiftStickerForTon(global, currencyAmount?.amount)) : undefined;\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\",\"avatarWrapper\":\"wuTMXDP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar\n            peer={!photo ? peer : undefined}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <InteractiveSparkles\n          className={buildClassName(styles.starsBackground)}\n          color=\"gold\"\n          onRequestAnimation={handleRequestAnimation}\n          centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  const floatingBadgeRef = useRef<HTMLDivElement>();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />)}\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift && gift.type === 'starGift';\n  const isPremiumGift = 'months' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (isPremiumGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    if (isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName || undefined,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n    return undefined;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars, isPremiumGift]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    if (isPremiumGift) {\n      openInvoice({\n        type: 'giftcode',\n        userIds: [peerId],\n        currency: gift.currency,\n        amount: gift.amount,\n        option: gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n    }\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : isPremiumGift ? formatCurrency(lang, gift.amount, gift.currency) : undefined;\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && Boolean(gift.availabilityRemains) && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  if ((!isStarGift && !isPremiumGift) || !localMessage) return;\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : isPremiumGift ? gift.months : undefined}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"premiumRequired\":\"NBYIITte\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\",\"radialPattern\":\"Nkotr8Q4\",\"stickerWrapper\":\"rUSoeQXb\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import { memo, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGift, ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { getGiftAttributes, getStickerFromGift } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGift, target: 'original' | 'resell') => void;\n  isResale?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({\n  gift, observeIntersection, onClick, isResale, isCurrentUserPremium,\n}: OwnProps & StateProps) {\n  const { openGiftInfoModal, openPremiumModal, showNotification } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  function getPriceAmount(amounts?: ApiTypeCurrencyAmount[]) {\n    if (!amounts) return { amount: 0, currency: STARS_CURRENCY_CODE };\n\n    if (gift.type === 'starGiftUnique' && gift.resaleTonOnly) {\n      const tonAmount = amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n      if (tonAmount) return tonAmount;\n    }\n\n    const starsAmount = amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n    return starsAmount;\n  }\n\n  const lang = useLang();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const sticker = getStickerFromGift(gift);\n  const isGiftUnique = gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n  const regularGift = !isGiftUnique ? gift : undefined;\n\n  const priceInfo = !isGiftUnique\n    ? { amount: regularGift?.stars || 0, currency: STARS_CURRENCY_CODE }\n    : getPriceAmount(uniqueGift?.resellPrice);\n  const priceCurrency = priceInfo?.currency || STARS_CURRENCY_CODE;\n  const resellMinStars = regularGift?.resellMinStars;\n  const priceInStarsAsString = !isGiftUnique && isResale && resellMinStars\n    ? lang.number(resellMinStars) + '+' : priceInfo?.amount || 0;\n  const isLimited = !isGiftUnique && Boolean(regularGift?.isLimited);\n  const isSoldOut = !isGiftUnique && Boolean(regularGift?.isSoldOut);\n  const isPremiumRequired = Boolean(gift?.requirePremium);\n  const isUserLimitReached = Boolean(regularGift?.limitedPerUser && !regularGift?.perUserRemains);\n  const perUserTotal = regularGift?.perUserTotal;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut && !isResale) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    if (isUserLimitReached) {\n      showNotification({\n        message: lang('NotificationGiftsLimit2', {\n          count: perUserTotal,\n        }, {\n          pluralValue: perUserTotal!,\n          withMarkdown: true,\n          withNodes: true,\n        }),\n      });\n      return;\n    }\n\n    if (isPremiumRequired && !isCurrentUserPremium) {\n      openPremiumModal({\n        gift,\n      });\n      return;\n    }\n\n    onClick(gift, isResale ? 'resell' : 'original');\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift]);\n\n  const giftNumber = isGiftUnique ? gift.number : 0;\n\n  const giftRibbon = useMemo(() => {\n    if (isGiftUnique) {\n      const { backdrop } = getGiftAttributes(gift) || {};\n      if (!backdrop) {\n        return undefined;\n      }\n      return (\n        <GiftRibbon\n          color={[backdrop.centerColor, backdrop.edgeColor]}\n          text={\n            lang('GiftSavedNumber', { number: giftNumber })\n          }\n        />\n      );\n    }\n    if (isPremiumRequired) {\n      return <GiftRibbon color=\"orange\" text={lang('LimitPremium')} />;\n    }\n    if (isResale) {\n      return <GiftRibbon color=\"green\" text={lang('GiftRibbonResale')} />;\n    }\n    if (isSoldOut) {\n      return <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />;\n    }\n    if (isLimited) {\n      return <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />;\n    }\n    return undefined;\n  }, [isGiftUnique, isResale, gift, isSoldOut, isLimited, lang, giftNumber, isPremiumRequired]);\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    const visible = entry.isIntersecting;\n    setIsVisible(visible);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'interactive-gift',\n        styles.container,\n        styles.starGift,\n        'starGiftItem',\n        isPremiumRequired && styles.premiumRequired,\n      )}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      <Button\n        className={styles.buy}\n        nonInteractive\n        size=\"tiny\"\n        color={isGiftUnique ? 'bluredStarsBadge' : 'stars'}\n        withSparkleEffect={isVisible}\n        pill\n        fluid\n      >\n        {priceCurrency === TON_CURRENCY_CODE\n          ? formatTonAsIcon(lang, priceInStarsAsString || 0, { shouldConvertFromNanos: true, className: styles.star })\n          : formatStarsAsIcon(lang, priceInStarsAsString || 0, { asFont: true, className: styles.star })}\n      </Button>\n      {giftRibbon}\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n    };\n  })(GiftItemStar),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"resaleScreenRoot\":\"Vce_TsJO\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"resaleStarGiftsContainer\":\"RSFcSNGL\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"resaleHeader\":\"cJRBgg9B\",\"resaleHeaderContentContainer\":\"OXYQmfGK\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"resaleHeaderText\":\"bp_KPx8I\",\"commonHeaderText\":\"ybZo03if\",\"resaleHeaderDescription\":\"XefHUFm1\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"avatar\":\"_3hY4vIep\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\",\"notFoundGiftsRoot\":\"UqnRlJ1n\",\"notFoundGiftsDescription\":\"g0VbwIG_\",\"notFoundGiftsLink\":\"j2zPEQr8\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Transition from '../../ui/Transition';\nimport GiftItemStar from './GiftItemStar';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  onGiftClick: (gift: ApiStarGift) => void;\n};\n\ntype StateProps = {\n  gift?: ApiStarGift;\n  resellGifts?: ApiStarGift[];\n  filter: ResaleGiftsFilterOptions;\n  areGiftsAllLoaded?: boolean;\n  areGiftsLoading?: boolean;\n  updateIteration: number;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst GiftModalResaleScreen: FC<OwnProps & StateProps> = ({\n  resellGifts,\n  gift,\n  filter,\n  areGiftsAllLoaded,\n  areGiftsLoading,\n  updateIteration,\n  onGiftClick,\n}) => {\n  const {\n    loadResaleGifts,\n    updateResaleGiftsFilter,\n  } = getActions();\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const resellGiftsIds = useMemo(() => {\n    return resellGifts?.map((g) => g.id);\n  }, [resellGifts]);\n\n  const hasFilter = Boolean(filter?.modelAttributes?.length\n    || filter?.patternAttributes?.length || filter?.backdropAttributes?.length);\n\n  const handleLoadMoreResellGifts = useLastCallback(() => {\n    if (gift) {\n      const giftId = 'regularGiftId' in gift\n        ? gift.regularGiftId\n        : gift.id;\n      loadResaleGifts({ giftId });\n    }\n  });\n\n  const isGiftsEmpty = Boolean(!resellGifts || resellGifts.length === 0);\n\n  const [viewportIds, onLoadMore] = useInfiniteScroll(\n    handleLoadMoreResellGifts,\n    resellGiftsIds,\n    !gift,\n    RESALE_GIFTS_LIMIT,\n  );\n\n  const { observe } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n      backdropAttributes: [],\n      patternAttributes: [],\n    } });\n  });\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className={styles.notFoundGiftsRoot}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className={styles.notFoundGiftsDescription}>\n          {lang('ResellGiftsNoFound')}\n        </div>\n        {hasFilter && (\n          <Link\n            className={styles.notFoundGiftsLink}\n            onClick={handleResetGiftsFilter}\n          >\n            {lang('ResellGiftsClearFilters')}\n          </Link>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div ref={scrollerRef} className={buildClassName(styles.resaleScreenRoot, 'custom-scroll')}>\n      <Transition\n        name=\"zoomFade\"\n        activeKey={updateIteration}\n      >\n        {isGiftsEmpty && areGiftsAllLoaded && renderNothingFoundGiftsWithFilter()}\n        <InfiniteScroll\n          className={buildClassName(styles.resaleStarGiftsContainer)}\n          items={viewportIds}\n          onLoadMore={onLoadMore}\n          itemSelector=\".starGiftItem\"\n          noFastList\n          preloadBackwards={RESALE_GIFTS_LIMIT}\n          scrollContainerClosest={`.${styles.resaleScreenRoot}`}\n        >\n          {resellGifts?.map((gift) => (\n            <GiftItemStar\n              key={gift.id}\n              gift={gift}\n              observeIntersection={observe}\n              isResale\n              onClick={onGiftClick}\n            />\n          ))}\n        </InfiniteScroll>\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    starGifts,\n  } = global;\n\n  const { resaleGifts } = selectTabState(global);\n  const gift = resaleGifts?.giftId ? starGifts?.byId[resaleGifts.giftId] : undefined;\n  const filter = resaleGifts.filter;\n  const areGiftsAllLoaded = resaleGifts.isAllLoaded;\n  const areGiftsLoading = resaleGifts.isLoading;\n  const updateIteration = resaleGifts.updateIteration;\n\n  return {\n    resellGifts: resaleGifts.gifts,\n    gift,\n    filter,\n    areGiftsAllLoaded,\n    areGiftsLoading,\n    updateIteration,\n  };\n})(GiftModalResaleScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KLFLR9ji\",\"thumb\":\"fCL5rY2D\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport StickerView from '../../common/StickerView';\n\nimport styles from './ResaleGiftMenuAttributeSticker.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  type: 'model' | 'pattern';\n  sticker: ApiSticker;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst ATTRIBUTE_STICKER_SIZE = 1.5 * REM;\n\nconst ResaleGiftMenuAttributeSticker: FC<StateProps & OwnProps> = ({\n  className,\n  type,\n  sticker,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  theme,\n}) => {\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const customColor = useDynamicColorListener(stickerRef, undefined, type !== 'pattern');\n\n  return (\n    <div\n      ref={stickerRef}\n      className={buildClassName(styles.root, className)}\n      style={`width: ${ATTRIBUTE_STICKER_SIZE}px; height: ${ATTRIBUTE_STICKER_SIZE}px`}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={sticker}\n        size={ATTRIBUTE_STICKER_SIZE}\n        shouldPreloadPreview\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        thumbClassName={styles.thumb}\n        customColor={customColor}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    theme: selectTheme(global),\n  };\n})(ResaleGiftMenuAttributeSticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_VgmQnUg\",\"buttonsContainer\":\"IDlp6U6g\",\"itemIcon\":\"yuctLnuR\",\"sticker\":\"VT562JS0\",\"backdropAttributeMenuItemText\":\"D50wFfRL\",\"menuItemStickerText\":\"THcGWXSA\",\"menuItemText\":\"L6EVE2Ux\",\"backdrop\":\"A29QNxKb\",\"menuItemIcon\":\"GL4rVsev\",\"item\":\"qiYcBOYc\",\"menuContentContainer\":\"EDsBn29z\",\"menu\":\"ISaNdBwd\",\"left\":\"e4Kkh_MR\",\"right\":\"Kz_nCGC3\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useRef,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeCounter,\n  ApiStarGiftAttributeIdBackdrop,\n  ApiStarGiftAttributeIdPattern,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  StarGiftAttributeIdModel,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions, ResaleGiftsSortType } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport ResaleGiftMenuAttributeSticker from './ResaleGiftMenuAttributeSticker';\n\nimport styles from './GiftResaleFilters.module.scss';\n\ntype OwnProps = {\n  dialogRef: ElementRef<HTMLDivElement>;\n};\ntype StateProps = {\n  filter: ResaleGiftsFilterOptions;\n  attributes?: ApiStarGiftAttribute[];\n  counters?: ApiStarGiftAttributeCounter[];\n};\n\nconst GiftResaleFilters: FC<StateProps & OwnProps> = ({\n  attributes,\n  counters,\n  filter,\n  dialogRef,\n}) => {\n  const lang = useLang();\n  const {\n    updateResaleGiftsFilter,\n  } = getActions();\n\n  const [searchModelQuery, setSearchModelQuery] = useState('');\n  const [searchBackdropQuery, setSearchBackdropQuery] = useState('');\n  const [searchPatternQuery, setSearchPatternQuery] = useState('');\n  const filteredAttributes = useMemo(() => {\n    const map: {\n      model: ApiStarGiftAttributeModel[];\n      pattern: ApiStarGiftAttributePattern[];\n      backdrop: ApiStarGiftAttributeBackdrop[];\n    } = {\n      model: [],\n      pattern: [],\n      backdrop: [],\n    };\n\n    for (const counter of counters ?? []) {\n      const { attribute } = counter;\n\n      if (!counter.count) {\n        continue;\n      }\n\n      const found = attributes?.find((attr) => {\n        if (attr.type === 'backdrop' && attribute.type === 'backdrop') {\n          return attr.backdropId === attribute.backdropId;\n        }\n\n        if (attr.type === 'model' && attribute.type === 'model') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        if (attr.type === 'pattern' && attribute.type === 'pattern') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        return false;\n      });\n\n      if (found?.type === 'backdrop') {\n        map.backdrop.push(found);\n      }\n      if (found?.type === 'model') {\n        map.model.push(found);\n      }\n      if (found?.type === 'pattern') {\n        map.pattern.push(found);\n      }\n    }\n\n    return map;\n  }, [attributes, counters]);\n\n  const filteredAndSearchedAttributes = useMemo(() => {\n    const filterBySearch = <T extends { name?: string }>(items: T[], query: string): T[] => {\n      if (!query.trim()) return items;\n\n      return items.filter(\n        (item): item is T => Boolean(item.name?.toLowerCase().includes(query.toLowerCase())),\n      );\n    };\n\n    return {\n      model: filterBySearch(filteredAttributes.model, searchModelQuery),\n      pattern: filterBySearch(filteredAttributes.pattern, searchPatternQuery),\n      backdrop: filterBySearch(filteredAttributes.backdrop, searchBackdropQuery),\n    };\n  }, [filteredAttributes, searchModelQuery, searchBackdropQuery, searchPatternQuery]);\n\n  // Sort Menu\n  const sortMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isSortContextMenuOpen,\n    contextMenuAnchor: sortContextMenuAnchor,\n    handleContextMenu: handleSortContextMenu,\n    handleContextMenuClose: handleSortContextMenuClose,\n    handleContextMenuHide: handleSortContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getSortMenuElement = useLastCallback(() => sortMenuRef.current!);\n\n  // Model Menu\n  const modelMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isModelContextMenuOpen,\n    contextMenuAnchor: modelContextMenuAnchor,\n    handleContextMenu: handleModelContextMenu,\n    handleContextMenuClose: handleModelContextMenuClose,\n    handleContextMenuHide: handleModelContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getModelMenuElement = useLastCallback(\n    () => modelMenuRef.current!,\n  );\n\n  // Backdrop Menu\n  const backdropMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isBackdropContextMenuOpen,\n    contextMenuAnchor: backdropContextMenuAnchor,\n    handleContextMenu: handleBackdropContextMenu,\n    handleContextMenuClose: handleBackdropContextMenuClose,\n    handleContextMenuHide: handleBackdropContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getBackdropMenuElement = useLastCallback(() => backdropMenuRef.current!);\n\n  // Pattern Menu\n  const patternMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isPatternContextMenuOpen,\n    contextMenuAnchor: patternContextMenuAnchor,\n    handleContextMenu: handlePatternContextMenu,\n    handleContextMenuClose: handlePatternContextMenuClose,\n    handleContextMenuHide: handlePatternContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getPatternMenuElement = useLastCallback(() => patternMenuRef.current!);\n\n  const SortMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const sortType = filter.sortType;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {sortType === 'byDate' && lang('ValueGiftSortByDate')}\n         {sortType === 'byNumber' && lang('ValueGiftSortByNumber')}\n         {sortType === 'byPrice' && lang('ValueGiftSortByPrice')}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n\n  const ModelMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.modelAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeModel')}\n         {attributesCount > 0\n           && lang('GiftAttributeModelPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const BackdropMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.backdropAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeBackdrop')}\n         {attributesCount > 0\n           && lang('GiftAttributeBackdropPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const PatternMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n  = useMemo(() => {\n    const attributesCount = filter?.patternAttributes?.length || 0;\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <div\n        className={styles.item}\n        onClick={onTrigger}\n      >\n        {attributesCount === 0 && lang('GiftAttributeSymbol')}\n        {attributesCount > 0\n          && lang('GiftAttributeSymbolPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n        <Icon\n          name=\"dropdown-arrows\"\n          className={styles.itemIcon}\n        />\n      </div>\n    );\n  }, [lang, filter]);\n\n  const handleSortMenuItemClick = useLastCallback((type: ResaleGiftsSortType) => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      sortType: type,\n    } });\n  });\n\n  const handleSelectedAllModelsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n    } });\n  });\n  const handleSelectedAllPatternsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: [],\n    } });\n  });\n  const handleSelectedAllBackdropsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: [],\n    } });\n  });\n\n  const handleModelMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeModel) => {\n    if (!counters) return;\n    const attributes = filter.modelAttributes || [];\n    const modelAttribute\n      = counters.find((counter): counter is ApiStarGiftAttributeCounter<StarGiftAttributeIdModel> =>\n        counter.attribute.type === 'model' && counter.attribute.documentId === attribute.sticker.id,\n      )?.attribute;\n\n    if (!modelAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === modelAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== modelAttribute.documentId)\n      : [...attributes, modelAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: updatedAttributes,\n    } });\n  });\n\n  const handlePatternMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributePattern) => {\n    if (!counters) return;\n    const attributes = filter.patternAttributes || [];\n    const patternAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdPattern> =>\n        counter.attribute.type === 'pattern' && counter.attribute.documentId === attribute.sticker.id,\n    )?.attribute;\n\n    if (!patternAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === patternAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== patternAttribute.documentId)\n      : [...attributes, patternAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: updatedAttributes,\n    } });\n  });\n\n  const handleBackdropMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeBackdrop) => {\n    if (!counters) return;\n    const attributes = filter.backdropAttributes || [];\n    const backdropAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdBackdrop> =>\n        counter.attribute.type === 'backdrop' && counter.attribute.backdropId === attribute.backdropId,\n    )?.attribute;\n\n    if (!backdropAttribute) return;\n\n    const isActive = attributes.some((item) => item.backdropId === backdropAttribute.backdropId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.backdropId !== backdropAttribute.backdropId)\n      : [...attributes, backdropAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: updatedAttributes,\n    } });\n  });\n\n  function renderSortMenuItems() {\n    return (\n      <>\n        <MenuItem icon=\"sort-by-price\" onClick={() => { handleSortMenuItemClick('byPrice'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByPrice')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byPrice' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n        <MenuItem icon=\"sort-by-date\" onClick={() => { handleSortMenuItemClick('byDate'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByDate')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byDate' ? 'check' : 'placeholder'}\n          />\n\n        </MenuItem>\n        <MenuItem icon=\"sort-by-number\"onClick={() => { handleSortMenuItemClick('byNumber'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByNumber')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byNumber' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n      </>\n    );\n  }\n\n  function renderSortMenu() {\n    return (\n      <Menu\n        isOpen={isSortContextMenuOpen}\n        anchor={sortContextMenuAnchor}\n        ref={sortMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getSortMenuElement}\n        autoClose\n        onClose={handleSortContextMenuClose}\n        onCloseAnimationEnd={handleSortContextMenuHide}\n        positionX=\"left\"\n      >\n        {renderSortMenuItems()}\n      </Menu>\n    );\n  }\n\n  const handleSearchModelInputReset = useCallback(() => {\n    setSearchModelQuery('');\n  }, []);\n  const handleSearchBackdropInputReset = useCallback(() => {\n    setSearchBackdropQuery('');\n  }, []);\n  const handleSearchPatternInputReset = useCallback(() => {\n    setSearchPatternQuery('');\n  }, []);\n  const handleSearchInputClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  });\n\n  const modelMenuItemsContainerRef = useRef<HTMLDivElement>();\n  const { observe } = useIntersectionObserver({\n    rootRef: modelMenuItemsContainerRef,\n    isDisabled: !modelContextMenuAnchor,\n  });\n\n  function renderModelMenuItems() {\n    const models = filteredAndSearchedAttributes.model;\n    const selectedAttributes = filter.modelAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n    return (\n      <div className={styles.menuContentContainer} ref={modelMenuItemsContainerRef}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchModelQuery}\n          onChange={setSearchModelQuery}\n          onReset={handleSearchModelInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllModelsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {models.map((model) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === model.sticker.id);\n          return (\n            <MenuItem\n              key={model.name}\n              onClick={() => {\n                handleModelMenuItemClick(model);\n              }}\n            >\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={model.sticker}\n                type=\"model\"\n                observeIntersectionForLoading={observe}\n                observeIntersectionForPlaying={observe}\n              />\n              <div className={styles.menuItemStickerText}>\n                {model.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderModelMenu() {\n    return (\n      <Menu\n        isOpen={isModelContextMenuOpen}\n        anchor={modelContextMenuAnchor}\n        ref={modelMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getModelMenuElement}\n        autoClose\n        onClose={handleModelContextMenuClose}\n        onCloseAnimationEnd={handleModelContextMenuHide}\n      >\n        {renderModelMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderBackdropMenuItems() {\n    const backdrops = filteredAndSearchedAttributes.backdrop;\n    const selectedAttributes = filter.backdropAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchBackdropQuery}\n          onChange={setSearchBackdropQuery}\n          onReset={handleSearchBackdropInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllBackdropsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {backdrops.map((backdrop) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.backdropId === backdrop.backdropId);\n\n          return (\n            <MenuItem\n              key={backdrop.name}\n              onClick={() => {\n                handleBackdropMenuItemClick(backdrop);\n              }}\n            >\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[backdrop.centerColor, backdrop.edgeColor]}\n                patternColor={backdrop.patternColor}\n              />\n              <div className={styles.backdropAttributeMenuItemText}>\n                {backdrop.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderBackdropMenu() {\n    return (\n      <Menu\n        isOpen={isBackdropContextMenuOpen}\n        anchor={backdropContextMenuAnchor}\n        ref={backdropMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getBackdropMenuElement}\n        autoClose\n        onClose={handleBackdropContextMenuClose}\n        onCloseAnimationEnd={handleBackdropContextMenuHide}\n        positionX=\"right\"\n      >\n        {renderBackdropMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderPatternMenuItems() {\n    const patterns = filteredAndSearchedAttributes.pattern;\n    const selectedAttributes = filter.patternAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchPatternQuery}\n          onChange={setSearchPatternQuery}\n          onReset={handleSearchPatternInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllPatternsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {patterns.map((pattern) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === pattern.sticker.id);\n\n          return (\n            <MenuItem\n              key={pattern.name}\n              onClick={() => {\n                handlePatternMenuItemClick(pattern);\n              }}\n            >\n\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={pattern.sticker}\n                type=\"pattern\"\n              />\n\n              <div className={styles.menuItemStickerText}>\n                {pattern.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPatternMenu() {\n    return (\n      <Menu\n        isOpen={isPatternContextMenuOpen}\n        anchor={patternContextMenuAnchor}\n        ref={patternMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getPatternMenuElement}\n        autoClose\n        onClose={handlePatternContextMenuClose}\n        onCloseAnimationEnd={handlePatternContextMenuHide}\n      >\n        {renderPatternMenuItems()}\n      </Menu>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      {Boolean(sortContextMenuAnchor) && renderSortMenu()}\n      {Boolean(modelContextMenuAnchor) && renderModelMenu()}\n      {Boolean(backdropContextMenuAnchor) && renderBackdropMenu()}\n      {Boolean(patternContextMenuAnchor) && renderPatternMenu()}\n      <div className={styles.buttonsContainer}>\n        <SortMenuButton\n          onTrigger={handleSortContextMenu}\n          isOpen={isSortContextMenuOpen}\n        />\n        <ModelMenuButton\n          onTrigger={handleModelContextMenu}\n          isOpen={isModelContextMenuOpen}\n        />\n        <BackdropMenuButton\n          onTrigger={handleBackdropContextMenu}\n          isOpen={isBackdropContextMenuOpen}\n        />\n        <PatternMenuButton\n          onTrigger={handlePatternContextMenu}\n          isOpen={isPatternContextMenuOpen}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { resaleGifts } = selectTabState(global);\n\n  const attributes = resaleGifts.attributes;\n  const counters = resaleGifts.counters;\n  const filter = resaleGifts.filter;\n\n  return {\n    attributes,\n    counters,\n    filter,\n  };\n})(GiftResaleFilters));\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const hasResale = idsByCategory && idsByCategory['resale'].length > 0;\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    if (category === 'resale') return lang('GiftCategoryResale');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {!areLimitedStarGiftsDisallowed && hasResale && renderCategoryItem('resale')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '@teact';\nimport type React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGift,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport InteractiveSparkles from '../../common/InteractiveSparkles';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport GiftModalResaleScreen from './GiftModalResaleScreen';\nimport GiftResaleFilters from './GiftResaleFilters';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n  resaleGiftsCount?: number;\n  areResaleGiftsLoading?: boolean;\n  selectedResaleGift?: ApiStarGift;\n  tabId: number;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n  resaleGiftsCount,\n  areResaleGiftsLoading,\n  selectedResaleGift,\n  tabId,\n}) => {\n  const {\n    closeGiftModal, openGiftInfoModal, resetResaleGifts, loadResaleGifts, openGiftInMarket, closeResaleGiftsMarket,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n  const giftHeaderRef = useRef<HTMLHeadingElement>();\n\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== STARS_CURRENCY_CODE);\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n          && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isResaleScreen = Boolean(selectedResaleGift) && !selectedGift;\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isResaleScreen || isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (selectedResaleGift) {\n      const giftId = 'regularGiftId' in selectedResaleGift\n        ? selectedResaleGift.regularGiftId\n        : selectedResaleGift.id;\n      loadResaleGifts({ giftId });\n    }\n  }, [selectedResaleGift]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen, tabId, closeResaleGiftsMarket]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption, target?: 'resell' | 'original') => {\n    if (target === 'resell') {\n      if (!('id' in gift)) {\n        return;\n      }\n      if (isResaleScreen) {\n        openGiftInfoModal({ gift, recipientId: renderingModal?.forPeerId });\n        return;\n      }\n      openGiftInMarket({ gift, tabId });\n      return;\n    }\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && Boolean(upgradeStars));\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.flatMap((giftId) => {\n          const gift = starGiftsById[giftId];\n          const shouldShowResale = selectedCategory !== 'stock' && Boolean(gift.availabilityResale);\n          const shouldDuplicateAsResale = selectedCategory !== 'resale' && shouldShowResale && !gift.isSoldOut;\n\n          const elements = [\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              isResale={shouldShowResale && !shouldDuplicateAsResale}\n              onClick={handleGiftClick}\n            />,\n          ];\n\n          if (shouldDuplicateAsResale) {\n            elements.push(\n              <GiftItemStar\n                key={`resale_${giftId}`}\n                isResale\n                gift={gift}\n                observeIntersection={observeIntersection}\n                onClick={handleGiftClick}\n              />,\n            );\n          }\n\n          return elements;\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseModal = useLastCallback(() => {\n    setSelectedGift(undefined);\n    resetResaleGifts();\n    closeGiftModal();\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isResaleScreen) {\n      closeResaleGiftsMarket({ tabId });\n      return;\n    }\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    handleCloseModal();\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            className={styles.avatar}\n            size={AVATAR_SIZE}\n            peer={peer}\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <InteractiveSparkles\n            className={styles.logoBackground}\n            color=\"gold\"\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n            onRequestAnimation={handleRequestAnimation}\n          />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen || isResaleScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  function renderHeader() {\n    if (!shouldShowHeader) return undefined;\n    if (isResaleScreen) {\n      const isFirstLoading = areResaleGiftsLoading && !resaleGiftsCount;\n      return (\n        <div className={styles.resaleHeaderContentContainer}>\n          <h2 className={styles.resaleHeaderText}>\n            {selectedResaleGift.title}\n          </h2>\n          {isFirstLoading\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('Loading')}\n              </div>\n            )}\n          {!isFirstLoading && resaleGiftsCount !== undefined\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('HeaderDescriptionResaleGifts', {\n                  count: resaleGiftsCount,\n                }, { withNodes: true, withMarkdown: true, pluralValue: resaleGiftsCount })}\n              </div>\n            )}\n          <GiftResaleFilters dialogRef={dialogRef} />\n        </div>\n      );\n    }\n    return (\n      <h2 className={styles.commonHeaderText}>\n        {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={handleCloseModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(\n        styles.header,\n        isResaleScreen && styles.resaleHeader,\n        !shouldShowHeader && styles.hiddenHeader)}\n      >\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={!shouldShowHeader ? 0 : isResaleScreen ? 1 : isHeaderForStarGifts ? 2 : 3}\n          slideClassName={styles.headerSlide}\n        >\n          {renderHeader()}\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : isResaleScreen ? 2 : 0}\n      >\n        {!isGiftScreen && !isResaleScreen && renderMainScreen()}\n        {isResaleScreen && selectedResaleGift\n          && (\n            <GiftModalResaleScreen\n              onGiftClick={handleGiftClick}\n            />\n          )}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  const { resaleGifts } = selectTabState(global);\n  const resaleGiftsCount = resaleGifts.count;\n  const areResaleGiftsLoading = resaleGifts.isLoading !== false;\n  const selectedResaleGift = modal?.selectedResaleGift;\n\n  return {\n    boostPerSentGift: global.appConfig.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n    resaleGiftsCount,\n    areResaleGiftsLoading,\n    selectedResaleGift,\n    tabId: selectTabState(global).id,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return 0;\n  if (category === 'limited') return 1;\n  if (category === 'resale') return 2;\n  if (category === 'stock') return 3;\n  return category + 3;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef0cKSqQ\",\"giftPreview\":\"IvuNzslN\",\"backdrop\":\"dNukis4X\",\"arrow\":\"oufsMLLF\"};","import { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiStarGiftUnique,\n} from '../../../api/types';\n\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\n\nimport styles from './GiftTransferPreview.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer;\n  gift: ApiStarGiftUnique;\n};\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferPreview = ({\n  peer,\n  gift,\n}: OwnProps) => {\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift);\n  }, [gift]);\n\n  if (!giftAttributes) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.giftPreview}>\n        <RadialPatternBackground\n          className={styles.backdrop}\n          backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n          patternColor={giftAttributes.backdrop?.patternColor}\n          patternIcon={giftAttributes.pattern?.sticker}\n        />\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          size={GIFT_STICKER_SIZE}\n          sticker={giftAttributes.model?.sticker}\n        />\n      </div>\n      <Icon name=\"next\" className={styles.arrow} />\n      <Avatar\n        peer={peer}\n        size={AVATAR_SIZE}\n        className={styles.avatar}\n      />\n    </div>\n  );\n};\n\nexport default memo(GiftTransferPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"checkBox\":\"fjE0wGvw\",\"checkBoxDescription\":\"tepUTe4z\",\"upgradeIcon\":\"lgyInH5K\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"modalContent\":\"o9rFZ6By\",\"headerSplitButton\":\"XOMI_4PO\",\"headerButton\":\"WA0INleU\",\"giftResalePriceContainer\":\"BN8gf5y6\",\"starAmountIcon\":\"_5guecUe\",\"giftResalePriceStar\":\"H_q8o2vY\",\"left\":\"aOhTHZlf\",\"right\":\"rJOB1u5Q\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueValue\":\"uAjIRJva\",\"uniqueAttribute\":\"OJQnkf17\",\"attributeName\":\"dq7wCHJb\",\"uniqueGift\":\"I6o_pGAm\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../../global/helpers/peers';\nimport { getMainUsername } from '../../../../global/helpers/users';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon, formatStarsAsText, formatTonAsIcon, formatTonAsText,\n} from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  releasedByPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n  currentUser?: ApiUser;\n  recipientPeer?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  releasedByPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n  currentUser,\n  recipientPeer,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    buyStarGift,\n    closeGiftModal,\n    openGiftInfoValueModal,\n    updateResaleGiftsFilter,\n    openGiftInMarket,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState<boolean>(false);\n  const [shouldPayInTon, setShouldPayInTon] = useState<boolean>(false);\n\n  const handleSymbolClick = useLastCallback(() => {\n    if (!gift || !giftAttributes?.pattern) return;\n\n    openGiftInMarket({ gift });\n    updateResaleGiftsFilter({\n      filter: {\n        sortType: 'byDate',\n        modelAttributes: [],\n        backdropAttributes: [],\n        patternAttributes: [{\n          type: 'pattern',\n          documentId: giftAttributes.pattern.sticker.id,\n        }],\n      },\n    });\n  });\n\n  const handleBackdropClick = useLastCallback(() => {\n    if (!gift || !giftAttributes?.backdrop) return;\n\n    openGiftInMarket({ gift });\n    updateResaleGiftsFilter({\n      filter: {\n        sortType: 'byDate',\n        modelAttributes: [],\n        backdropAttributes: [{\n          type: 'backdrop',\n          backdropId: giftAttributes.backdrop.backdropId,\n        }],\n        patternAttributes: [],\n      },\n    });\n  });\n\n  const handleModelClick = useLastCallback(() => {\n    if (!gift || !giftAttributes?.model) return;\n\n    openGiftInMarket({ gift });\n    updateResaleGiftsFilter({\n      filter: {\n        sortType: 'byDate',\n        modelAttributes: [{\n          type: 'model',\n          documentId: giftAttributes.model.sticker.id,\n        }],\n        backdropAttributes: [],\n        patternAttributes: [],\n      },\n    });\n  });\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n\n  const giftSubtitle = useMemo(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return undefined;\n\n    if (releasedByPeer) {\n      const releasedByUsername = `@${getMainUsername(releasedByPeer)}`;\n      const ownerTitle = releasedByUsername || getPeerTitle(lang, releasedByPeer);\n      const fallbackText = isApiPeerUser(releasedByPeer)\n        ? lang('ActionFallbackUser')\n        : lang('ActionFallbackChannel');\n\n      return lang('GiftInfoCollectibleBy', {\n        number: gift.number, owner: ownerTitle || fallbackText }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('GiftInfoCollectible', { number: gift.number });\n  }, [gift, releasedByPeer, lang]);\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n\n  const selfCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((status) =>\n      status.type === 'collectible' && status.slug === starGiftUniqueSlug);\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const isSelfUnique = Boolean(selfCollectibleStatus);\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights\n      : gift?.type === 'starGift'\n        ? renderingTargetPeer?.id === currentUserId\n        : gift?.ownerId === currentUserId || isSelfUnique\n  );\n\n  function getResalePrice(shouldPayInTon?: boolean) {\n    if (!isGiftUnique) return undefined;\n    const amounts = gift.resellPrice;\n    if (!amounts) return undefined;\n\n    if (gift?.resaleTonOnly || shouldPayInTon) {\n      return amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }\n\n  const resellPrice = getResalePrice();\n  const confirmPrice = getResalePrice(shouldPayInTon);\n  const canBuyGift = !isSelfUnique && gift?.type === 'starGiftUnique'\n    && gift.ownerId !== currentUserId && Boolean(resellPrice);\n\n  const giftOwnerTitle = (() => {\n    if (!isGiftUnique) return undefined;\n    const { ownerName, ownerId } = gift;\n    const global = getGlobal(); // Peer titles do not need to be reactive\n    const owner = ownerId ? selectPeer(global, ownerId) : undefined;\n    return owner ? getPeerTitle(lang, owner) : ownerName;\n  })();\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const handleBuyGift = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !getResalePrice()) return;\n    setIsConfirmModalOpen(true);\n  });\n\n  const closeConfirmModal = useLastCallback(() => {\n    setIsConfirmModalOpen(false);\n  });\n\n  const handleConfirmBuyGift = useLastCallback(() => {\n    const peer = recipientPeer || currentUser;\n    const price = getResalePrice(shouldPayInTon);\n    if (!peer || !price || gift?.type !== 'starGiftUnique') return;\n    closeConfirmModal();\n    closeGiftModal();\n    buyStarGift({ peerId: peer.id, slug: gift.slug, price });\n  });\n\n  const handleOpenValueModal = useLastCallback(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return;\n\n    openGiftInfoValueModal({\n      gift,\n    });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger }) => (\n      <div\n        className={buildClassName(\n          styles.headerButton,\n          styles.left,\n        )}\n        tabIndex={0}\n        role=\"button\"\n        aria-haspopup=\"menu\"\n        aria-label={lang('AriaMoreButton')}\n        onClick={onTrigger}\n      >\n        <Icon\n          name=\"more\"\n          className={styles.icon}\n        />\n      </div>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canBuyGift) {\n      return (\n        <Button noForcedUpperCase onClick={handleBuyGift}>\n          {lang('ButtonBuyGift', {\n            stars: resellPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, resellPrice?.amount, { asFont: true }),\n          }, { withNodes: true })}\n        </Button>\n      );\n    }\n\n    if (canFocusUpgrade) {\n      return (\n        <Button onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.canUpgrade && !savedGift.upgradeMsgId) {\n      return (\n        <Button isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgrade')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    return (\n      <Button onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (canManage && savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n        return lang('GiftInfoDescriptionUpgrade2');\n      }\n      if (savedGift.canUpgrade && canManage) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        {Boolean(resellPrice?.amount) && (\n          <div className={styles.giftResalePriceContainer}>\n            {resellPrice.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, {\n                className: styles.giftResalePriceStar,\n                shouldConvertFromNanos: true,\n              })\n              : formatStarsAsIcon(lang, resellPrice.amount, {\n                asFont: true,\n                className: styles.giftResalePriceStar,\n              })}\n          </div>\n        )}\n        <div className={styles.headerSplitButton}>\n          {isOpen && uniqueGiftContextMenu}\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon\n              name=\"close\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={giftSubtitle}\n          subtitlePeer={releasedByPeer}\n          showManageButtons={canManage}\n          savedGift={savedGift}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {Boolean(description) && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const ownerPeer = ownerId ? selectPeer(getGlobal(), ownerId) : undefined;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else if (ownerPeer || ownerName) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            <span\n              className={styles.attributeName}\n              onClick={handleModelClick}\n            >\n              {model.name}\n            </span>\n            <BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            <span\n              className={styles.attributeName}\n              onClick={handleBackdropClick}\n            >\n              {backdrop.name}\n            </span>\n            <BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            <span\n              className={styles.attributeName}\n              onClick={handleSymbolClick}\n            >\n              {pattern.name}\n            </span>\n            <BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (gift.valueAmount && gift.valueCurrency) {\n        tableData.push([\n          lang('GiftInfoValue'),\n          <span className={styles.uniqueValue}>\n            ~\n            {' '}\n            {formatCurrencyAsString(\n              gift.valueAmount,\n              gift.valueCurrency,\n              lang.code,\n            )}\n            <BadgeButton onClick={handleOpenValueModal}>\n              {lang('GiftInfoValueLinkMore')}\n            </BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink || canBuyGift) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {!canBuyGift && isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n            {canBuyGift && giftOwnerTitle && (\n              <div>\n                {lang('GiftInfoBuyGift', {\n                  user: giftOwnerTitle,\n                }, { withNodes: true })}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n    canBuyGift, giftOwnerTitle, isOpen, resellPrice, giftSubtitle,\n    releasedByPeer, handleSymbolClick, handleBackdropClick, handleModelClick,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        contentClassName={styles.modalContent}\n        onClose={handleClose}\n        withBalanceBar={Boolean(canBuyGift)}\n        currencyInBalanceBar={confirmPrice?.currency}\n        isLowStackPriority\n      />\n      {uniqueGift && currentUser && Boolean(confirmPrice) && (\n        <ConfirmDialog\n          isOpen={isConfirmModalOpen}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={lang('ButtonBuyGift', {\n            stars: confirmPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, confirmPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, confirmPrice.amount, { asFont: true }),\n          }, { withNodes: true })}\n          confirmHandler={handleConfirmBuyGift}\n        >\n\n          <GiftTransferPreview\n            peer={recipientPeer || currentUser}\n            gift={uniqueGift}\n          />\n          {!recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyForPeerConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                  peer: getPeerTitle(lang, recipientPeer),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {!uniqueGift.resaleTonOnly && (\n            <>\n              <Checkbox\n                className={styles.checkBox}\n                label={lang('LabelPayInTON')}\n                checked={shouldPayInTon}\n                onCheck={setShouldPayInTon}\n              />\n\n              <div className={styles.checkBoxDescription}>\n                {lang('DescriptionPayInTON')}\n              </div>\n            </>\n          )}\n        </ConfirmDialog>\n      )}\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const recipientPeer = modal?.recipientId && currentUserId !== modal.recipientId\n      ? selectPeer(global, modal.recipientId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    const gift = isSavedGift ? typeGift.gift : typeGift;\n    const releasedByPeerId = gift?.type === 'starGiftUnique' && gift.releasedByPeerId;\n    const releasedByPeer = releasedByPeerId ? selectPeer(global, releasedByPeerId) : undefined;\n\n    return {\n      fromPeer,\n      targetPeer,\n      releasedByPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n      currentUser,\n      recipientPeer,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"v4GJBsdC\",\"sticker\":\"lJodRD0R\",\"description\":\"VjWaO8un\",\"initialPrice\":\"K7zsAhVt\",\"starIcon\":\"Xw91xwpe\",\"footer\":\"OJDo2xUd\",\"footerSticker\":\"hspYTy7V\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './GiftInfoValueModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoValueModal'];\n};\n\nconst HEADER_STICKER_SIZE = 120;\nconst FOOTER_STICKER_SIZE = 24;\n\nconst GiftInfoValueModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { closeGiftInfoValueModal, openUrl, openGiftInMarket } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const handleOpenFragment = useLastCallback(() => {\n    if (modal?.valueInfo.fragmentListedUrl) {\n      openUrl({ url: modal.valueInfo.fragmentListedUrl });\n    }\n  });\n\n  const handleOpenTelegramMarket = useLastCallback(() => {\n    if (modal?.gift) {\n      openGiftInMarket({ gift: modal.gift });\n    }\n  });\n\n  const modalData = useMemo(() => {\n    if (!renderingModal) return undefined;\n\n    const { gift, valueInfo } = renderingModal;\n    const giftAttributes = getGiftAttributes(gift);\n\n    if (!giftAttributes) return undefined;\n\n    const header = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={giftAttributes.model!.sticker}\n          size={HEADER_STICKER_SIZE}\n        />\n        <Button\n          pill\n          size=\"tiny\"\n          fluid\n          nonInteractive\n        >\n          {formatCurrencyAsString(valueInfo.value, valueInfo.currency, lang.code)}\n        </Button>\n        <div className={styles.description}>\n          {lang('GiftValueDescription', { giftName: gift.title }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n        </div>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      lang('GiftValueTitleInitialSale'),\n      formatDateToString(valueInfo.initialSaleDate * 1000, lang.code),\n    ]);\n\n    tableData.push([\n      lang('GiftValueTitleInitialPrice'),\n      <span className={styles.initialPrice}>\n        {formatStarsAsIcon(lang, valueInfo.initialSaleStars, { className: styles.starIcon })}\n        {' (~ '}\n        {formatCurrencyAsString(valueInfo.initialSalePrice, valueInfo.currency, lang.code)}\n        )\n      </span>,\n    ]);\n\n    if (valueInfo.lastSaleDate) {\n      tableData.push([\n        lang('GiftValueTitleLastSale'),\n        formatDateToString(valueInfo.lastSaleDate * 1000, lang.code),\n      ]);\n    }\n\n    if (valueInfo.lastSalePrice) {\n      tableData.push([\n        lang('GiftValueTitleLastPrice'),\n        formatCurrencyAsString(valueInfo.lastSalePrice, valueInfo.currency, lang.code),\n      ]);\n    }\n\n    if (valueInfo.floorPrice) {\n      tableData.push([\n        lang('GiftValueTitleMinimumPrice'),\n        formatCurrencyAsString(valueInfo.floorPrice, valueInfo.currency, lang.code),\n      ]);\n    }\n\n    if (valueInfo.averagePrice) {\n      tableData.push([\n        lang('GiftValueTitleAveragePrice'),\n        formatCurrencyAsString(valueInfo.averagePrice, valueInfo.currency, lang.code),\n      ]);\n    }\n\n    const canBuyOnFragment = Boolean(valueInfo.fragmentListedUrl && valueInfo.fragmentListedCount);\n    const canBuyOnTelegram = Boolean(valueInfo.listedCount && valueInfo.listedCount);\n    const hasFooter = canBuyOnFragment || canBuyOnTelegram;\n\n    const footer = hasFooter && (\n      <div className={styles.footer}>\n        {canBuyOnFragment && (\n          <Button\n            isText\n            onClick={handleOpenFragment}\n            noForcedUpperCase\n            size=\"tiny\"\n          >\n            {lang.number(valueInfo.fragmentListedCount!)}\n            <AnimatedIconFromSticker\n              className={styles.footerSticker}\n              sticker={giftAttributes.model!.sticker}\n              size={FOOTER_STICKER_SIZE}\n            />\n            {lang('GiftValueForSaleOnFragment')}\n          </Button>\n        )}\n\n        {canBuyOnTelegram && (\n          <Button\n            isText\n            noForcedUpperCase\n            size=\"tiny\"\n            onClick={handleOpenTelegramMarket}\n          >\n            {lang.number(valueInfo.listedCount!)}\n            <AnimatedIconFromSticker\n              className={styles.footerSticker}\n              sticker={giftAttributes.model!.sticker}\n              size={FOOTER_STICKER_SIZE}\n            />\n            {lang('GiftValueForSaleOnTelegram')}\n          </Button>\n        )}\n      </div>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, renderingModal, handleOpenFragment, handleOpenTelegramMarket]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      onClose={closeGiftInfoValueModal}\n      header={modalData.header}\n      tableData={modalData.tableData}\n      footer={modalData.footer}\n    />\n  );\n};\n\nexport default memo(GiftInfoValueModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBoxDescription\":\"pWjQiY4m\",\"inputPriceDescription\":\"SGFmA4kL\",\"checkBox\":\"yt_nODdj\",\"descriptionPrice\":\"r9R0VR_w\",\"inputPrice\":\"ElDo1Bru\"};","import {\n  memo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { convertTonFromNanos, convertTonToNanos } from '../../../../util/formatCurrency';\nimport { convertTonToUsd, formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon, formatStarsAsText, formatTonAsIcon,\n  formatTonAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftResalePriceComposerModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftResalePriceComposerModal'];\n};\n\nexport type StateProps = {\n  starsStargiftResaleCommissionPermille?: number;\n  starsStargiftResaleAmountMin: number;\n  starsStargiftResaleAmountMax?: number;\n  starsUsdWithdrawRate?: number;\n  tonStargiftResaleCommissionPermille?: number;\n  tonStargiftResaleAmountMin: number;\n  tonStargiftResaleAmountMax?: number;\n  tonUsdRate?: number;\n};\n\nconst GiftResalePriceComposerModal = ({\n  modal, starsStargiftResaleCommissionPermille,\n  starsStargiftResaleAmountMin, starsStargiftResaleAmountMax, starsUsdWithdrawRate,\n  tonStargiftResaleCommissionPermille, tonStargiftResaleAmountMin, tonStargiftResaleAmountMax, tonUsdRate,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftResalePriceComposerModal,\n    closeGiftInfoModal,\n    updateStarGiftPrice,\n    showNotification,\n  } = getActions();\n  const isOpen = Boolean(modal);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n  const [isPriceInTon, setIsPriceInTon] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const hasPrice = Boolean(price);\n\n  const lang = useLang();\n\n  const handleChangePrice = useLastCallback((e) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n    const maxAmount = isPriceInTon ? tonStargiftResaleAmountMax : starsStargiftResaleAmountMax;\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : maxAmount ? Math.min(number, maxAmount) : number;\n    setPrice(result);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiftResalePriceComposerModal();\n  });\n\n  const handleSellGift = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift || !price) return;\n    closeGiftResalePriceComposerModal();\n    closeGiftInfoModal();\n    updateStarGiftPrice(\n      {\n        gift: savedGift.inputGift,\n        price: {\n          currency: isPriceInTon ? 'TON' : 'XTR',\n          amount: isPriceInTon ? convertTonToNanos(price) : price,\n          nanos: 0,\n        },\n      });\n    showNotification({\n      icon: 'sell-outline',\n      message: {\n        key: 'NotificationGiftIsSale',\n        variables: {\n          gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }),\n        },\n      },\n    });\n  });\n  const commission = isPriceInTon ? tonStargiftResaleCommissionPermille : starsStargiftResaleCommissionPermille;\n  const minAmount = isPriceInTon ? tonStargiftResaleAmountMin : starsStargiftResaleAmountMin;\n  const isPriceCorrect = hasPrice && price >= minAmount;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={isPriceInTon ? lang('PriceInTON') : lang('PriceInStars')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      <div className={styles.inputPrice}>\n        <InputText\n          label={isPriceInTon ? lang('EnterPriceInTon') : lang('EnterPriceInStars')}\n          onChange={handleChangePrice}\n          value={price?.toString()}\n          inputMode=\"numeric\"\n          tabIndex={0}\n          teactExperimentControlled={!isPriceInTon}\n        />\n      </div>\n\n      <div className={styles.inputPriceDescription}>\n        <span>\n          {!isPriceCorrect && Boolean(commission) && lang('DescriptionComposerGiftMinimumPrice', {\n            stars: isPriceInTon ? formatTonAsText(lang, minAmount) : formatStarsAsText(lang, minAmount),\n          }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n          {isPriceCorrect && (() => {\n            const priceWithCommission = commission ? Number((price * commission).toFixed()) : price;\n            return lang('DescriptionComposerGiftResalePrice',\n              {\n                stars: isPriceInTon\n                  ? formatTonAsText(lang, priceWithCommission)\n                  : formatStarsAsText(lang, priceWithCommission),\n              },\n              {\n                withMarkdown: true,\n                withNodes: true,\n              });\n          })()}\n        </span>\n\n        {isPriceCorrect && Boolean(isPriceInTon ? tonUsdRate : starsUsdWithdrawRate) && (\n          <span className={styles.descriptionPrice}>\n            {`≈ ${formatCurrencyAsString(\n              isPriceInTon ? convertTonToUsd(price, tonUsdRate!) : price * starsUsdWithdrawRate!,\n              'USD',\n              lang.code,\n            )}`}\n          </span>\n        )}\n      </div>\n\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('OnlyAcceptTON')}\n        checked={isPriceInTon}\n        onCheck={setIsPriceInTon}\n      />\n\n      <div className={styles.checkBoxDescription}>\n        {lang('OnlyAcceptTONDescription')}\n      </div>\n\n      <Button noForcedUpperCase disabled={!isPriceCorrect} onClick={handleSellGift}>\n        {isPriceCorrect && lang('ButtonSellGift', {\n          stars: isPriceInTon ? formatTonAsIcon(lang, price)\n            : formatStarsAsIcon(lang, price, { asFont: true }),\n        }, { withNodes: true })}\n        {!isPriceCorrect && lang('Sell')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const configPermille = global.appConfig.starsStargiftResaleCommissionPermille;\n    const starsStargiftResaleCommissionPermille = configPermille ? (configPermille / 1000) : undefined;\n    const starsStargiftResaleAmountMin = global.appConfig.starsStargiftResaleAmountMin || 0;\n    const starsStargiftResaleAmountMax = global.appConfig.starsStargiftResaleAmountMax;\n\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n\n    const tonConfigPermille = global.appConfig.tonStargiftResaleCommissionPermille;\n    const tonStargiftResaleCommissionPermille = tonConfigPermille ? (tonConfigPermille / 1000) : 0;\n    const tonStargiftResaleAmountMin = convertTonFromNanos(global.appConfig.tonStargiftResaleAmountMin || 0);\n    const maxTonFromConfig = global.appConfig.tonStargiftResaleAmountMax;\n    const tonStargiftResaleAmountMax = maxTonFromConfig && convertTonFromNanos(maxTonFromConfig);\n\n    const tonUsdRate = global.appConfig.tonUsdRate;\n\n    return {\n      starsStargiftResaleCommissionPermille,\n      starsStargiftResaleAmountMin,\n      starsStargiftResaleAmountMax,\n      starsUsdWithdrawRate,\n      tonStargiftResaleCommissionPermille,\n      tonStargiftResaleAmountMin,\n      tonStargiftResaleAmountMax,\n      tonUsdRate,\n    };\n  },\n)(GiftResalePriceComposerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>\n            {\n              lang('UniqueStatusWearTitle', {\n                gift: mockPeerWithStatus?.emojiStatus?.title,\n              })\n            }\n          </div>\n          <div className={styles.infoDescription}>\n            {\n              lang('UniqueStatusBenefitsDescription')\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { type CustomPeer, SettingsScreens } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const {\n    closeGiftWithdrawModal,\n    clearGiftWithdrawError,\n    closeGiftInfoModal,\n    processStarGiftWithdrawal,\n    openSettingsScreen,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  const handleSetUpPassword = useLastCallback(() => {\n    openSettingsScreen({\n      screen: SettingsScreens.TwoFaDisabled,\n    });\n    closeGiftWithdrawModal();\n    closeGiftInfoModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && (\n        <>\n          <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>\n          <Button className=\"mt-2\" onClick={handleSetUpPassword}>{lang('SetUp2FA')}</Button>\n        </>\n      )}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          onClearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R, D extends unknown[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          {renderingSelectedPeer && (\n            <GiftTransferPreview\n              peer={renderingSelectedPeer}\n              gift={uniqueGift}\n            />\n          )}\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, toggleNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n\n    toggleNoPaidMessagesException ({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n};\n\nconst PriceConfirmModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starBalance,\n  tonBalance,\n}) => {\n  const actions = getActions();\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    if (!modal?.directInfo) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    const { currency, newAmount } = modal;\n    const isTon = currency === 'TON';\n    const currentBalance = isTon ? tonBalance : starBalance?.amount;\n\n    if (currentBalance === undefined) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    if (currentBalance < newAmount!) {\n      actions.openStarsBalanceModal({\n        currency: isTon ? 'TON' : 'XTR',\n        tabId: getCurrentTabId(),\n      });\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    actions.sendStarPaymentForm({\n      directInfo: modal.directInfo,\n      tabId: getCurrentTabId(),\n    });\n    actions.closePriceConfirmModal();\n  }, [modal, starBalance, tonBalance, actions]);\n\n  const handleClose = useCallback(() => {\n    actions.closePriceConfirmModal();\n  }, [actions]);\n\n  if (!modal) {\n    return undefined;\n  }\n\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n  } = modal;\n\n  const isTon = currency === 'TON';\n\n  let originalAmountText: string;\n  let newAmountText: string;\n\n  if (isTon) {\n    originalAmountText = formatTonAsText(lang, convertTonFromNanos(originalAmount!));\n    newAmountText = formatTonAsText(lang, convertTonFromNanos(newAmount!));\n  } else {\n    originalAmountText = formatStarsAsText(lang, originalAmount!);\n    newAmountText = formatStarsAsText(lang, newAmount!);\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal)}\n      onClose={handleClose}\n      title={lang('PriceChanged')}\n      confirmHandler={handleConfirm}\n      confirmLabel={lang('PayNewPrice')}\n    >\n      <p>\n        {lang('PriceChangedText', {\n          originalAmount: originalAmountText,\n          newAmount: newAmountText,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        })}\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const starBalance = global.stars?.balance;\n  const tonBalance = global.ton?.balance?.amount;\n\n  return {\n    starBalance,\n    tonBalance,\n  };\n},\n)(PriceConfirmModal));\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","_jsx","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","children","_jsxs","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","_Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","lang","useLang","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","TON_CURRENCY_CODE","convertCurrencyFromBaseUnit","StarIcon","STARS_CURRENCY_CODE","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","isGiftResale","isNegativeAmount","isPostsSearch","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","shouldUseCustomPeer","buildStarsTransactionCustomPeer","titleKey","currencyAmount","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","subtitleKey","CUSTOM_PEER_PREMIUM","number","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","amountColorClass","negative","positive","formatDateTimeToString","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","ton","history","all","transactions","starsBalanceState","tonBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","tonUsdRate","appConfig","tonTopupUrl","animationLevel","selectSharedSettings","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","openUrl","currentState","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","modalHeight","transactionCount","transactionTabs","key","tosText","handleLoadMoreTransactions","isTon","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","handleTonTopUp","minimal","dialogStyle","modalBalance","renderTonHeaderSection","tonAmount","ParticlesHeader","model","isDisabled","tonBalanceContainer","tonBalance","tonIconBalance","tonInUsd","convertTonToUsd","topUpButton","fluid","starButton","isText","noForcedUpperCase","topupOptions","tos","hint","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","lastSection","Transition","resolveTransitionName","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","currentUser","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","UniqueGiftManageButtons","savedGift","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","updateStarGiftPrice","showNotification","closeGiftInfoModal","giftResalePrice","resellPrice","selectTabState","giftInfoModal","starGiftUniqueSlug","slug","userCollectibleStatus","find","currentUniqueEmojiStatusSlug","canTakeOff","canWear","handleTransfer","canTransferAt","getServerTime","variables","formatDateAtTime","handleWear","documentId","DEFAULT_STATUS_ICON_ID","handleSell","canResellAt","handleUnlist","inputGift","price","icon","iconName","iconAlignment","iconClassName","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","subtitlePeer","showManageButtons","openChat","isGiftHover","markGiftHover","unmarkGiftHover","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","noLoop","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","style","buildStyle","AVATAR_SPARKLES_CENTER_SHIFT","paidMessageCommission","starsPaidMessageCommissionPermille","starsGiftSticker","selectGiftStickerForStars","selectGiftStickerForTon","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","openMediaViewer","closeStarsTransactionModal","triggerSparklesRef","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","handleAvatarMouseMove","handleRequestAnimation","animate","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","regularHeader","onMouseMove","InteractiveSparkles","onRequestAnimation","centerShift","percent","tableData","peerLabel","push","containerClassName","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","isPremiumGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","GiftRibbon","isCurrentUserPremium","selectIsCurrentUserPremium","observeIntersection","isResale","openGiftInfoModal","openPremiumModal","stickerRef","setIsVisible","isHover","markHover","unmarkHover","isGiftUnique","uniqueGift","regularGift","priceInfo","amounts","resaleTonOnly","getPriceAmount","priceCurrency","resellMinStars","priceInStarsAsString","isLimited","isSoldOut","isPremiumRequired","requirePremium","isUserLimitReached","limitedPerUser","perUserRemains","perUserTotal","giftNumber","giftRibbon","useOnIntersect","entry","visible","isIntersecting","StickerView","observeIntersectionForPlaying","observeIntersectionForLoading","containerRef","shouldLoop","shouldPreloadPreview","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","starGifts","resaleGifts","areGiftsAllLoaded","isAllLoaded","areGiftsLoading","updateIteration","resellGifts","gifts","GiftModalResaleScreen","onGiftClick","loadResaleGifts","updateResaleGiftsFilter","scrollerRef","resellGiftsIds","g","hasFilter","modelAttributes","patternAttributes","backdropAttributes","handleLoadMoreResellGifts","regularGiftId","isGiftsEmpty","viewportIds","useInfiniteScroll","RESALE_GIFTS_LIMIT","observe","useIntersectionObserver","rootRef","throttleMs","handleResetGiftsFilter","resaleScreenRoot","notFoundGiftsRoot","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","notFoundGiftsDescription","notFoundGiftsLink","resaleStarGiftsContainer","preloadBackwards","GiftItemStar","ATTRIBUTE_STICKER_SIZE","REM","ResaleGiftMenuAttributeSticker","customColor","useDynamicColorListener","thumbClassName","attributes","counters","GiftResaleFilters","searchModelQuery","setSearchModelQuery","searchBackdropQuery","setSearchBackdropQuery","searchPatternQuery","setSearchPatternQuery","filteredAttributes","counter","attribute","found","attr","backdropId","filteredAndSearchedAttributes","filterBySearch","trim","toLowerCase","sortMenuRef","isContextMenuOpen","isSortContextMenuOpen","contextMenuAnchor","sortContextMenuAnchor","handleContextMenu","handleSortContextMenu","handleContextMenuClose","handleSortContextMenuClose","handleContextMenuHide","handleSortContextMenuHide","useContextMenuHandlers","getSortMenuElement","modelMenuRef","isModelContextMenuOpen","modelContextMenuAnchor","handleModelContextMenu","handleModelContextMenuClose","handleModelContextMenuHide","getModelMenuElement","backdropMenuRef","isBackdropContextMenuOpen","backdropContextMenuAnchor","handleBackdropContextMenu","handleBackdropContextMenuClose","handleBackdropContextMenuHide","getBackdropMenuElement","patternMenuRef","isPatternContextMenuOpen","patternContextMenuAnchor","handlePatternContextMenu","handlePatternContextMenuClose","handlePatternContextMenuHide","getPatternMenuElement","SortMenuButton","sortType","isMenuOpen","ModelMenuButton","attributesCount","BackdropMenuButton","PatternMenuButton","handleSortMenuItemClick","handleSelectedAllModelsClick","handleSelectedAllPatternsClick","handleSelectedAllBackdropsClick","handleModelMenuItemClick","updatedAttributes","some","handlePatternMenuItemClick","handleBackdropMenuItemClick","handleSearchModelInputReset","useCallback","handleSearchBackdropInputReset","handleSearchPatternInputReset","handleSearchInputClick","stopPropagation","preventDefault","modelMenuItemsContainerRef","Menu","anchor","menu","getMenuElement","onCloseAnimationEnd","menuItemText","menuItemIcon","models","selectedAttributes","isSelectedAll","menuContentContainer","SearchInput","search","onReset","placeholder","menuItemStickerText","renderModelMenuItems","right","backdrops","backdropAttributeMenuItemText","renderBackdropMenuItems","patterns","renderPatternMenuItems","buttonsContainer","idsByCategory","StarGiftCategoryList","onCategoryChanged","areLimitedStarGiftsDisallowed","starCategories","keys","category","hasResale","selectedCategory","setSelectedCategory","renderCategoryName","renderCategoryItem","handleItemClick","isInteger","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","resaleGiftsCount","areResaleGiftsLoading","selectedResaleGift","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","tabId","GiftModal","closeGiftModal","resetResaleGifts","openGiftInMarket","closeResaleGiftsMarket","transitionRef","giftHeaderRef","isApiPeerChat","selectedGift","setSelectedGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","allGifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","set","baseGift","reduce","prev","isResaleScreen","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","recipientId","handleCloseModal","handleCloseButtonClick","isBackButton","buttonClassName","resaleHeader","headerSlide","isFirstLoading","resaleHeaderContentContainer","resaleHeaderText","resaleHeaderDescription","commonHeaderText","renderHeader","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","filteredGiftIds","starGiftsContainer","shouldShowResale","availabilityResale","shouldDuplicateAsResale","elements","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","AVATAR_SIZE","GIFT_STICKER_SIZE","GiftTransferPreview","giftPreview","arrow","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","recipientPeer","releasedByPeerId","releasedByPeer","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","buyStarGift","openGiftInfoValueModal","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isConfirmModalOpen","setIsConfirmModalOpen","shouldPayInTon","setShouldPayInTon","handleSymbolClick","handleBackdropClick","handleModelClick","renderingFromPeer","renderingTargetPeer","isTargetChat","isSender","canConvertDifference","conversionLeft","hasConvertOption","giftSubtitle","ownerTitle","getMainUsername","fallbackText","owner","selfCollectibleStatus","isSelfUnique","canFocusUpgrade","upgradeMsgId","canManage","ownerId","getResalePrice","confirmPrice","canBuyGift","giftOwnerTitle","ownerName","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","handleBuyGift","closeConfirmModal","handleConfirmBuyGift","handleOpenValueModal","SettingsMenuButton","headerButton","renderFooterButton","isShiny","upgradeIcon","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","giftResalePriceContainer","giftResalePriceStar","headerSplitButton","moreIcon","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerAddress","ownerPeer","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","attributeName","rarityPercent","issued","issuedCount","totalCount","valueAmount","valueCurrency","uniqueValue","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","shouldSkipModal","modalContent","withBalanceBar","currencyInBalanceBar","ConfirmDialog","noDefaultTitle","confirmLabel","confirmHandler","formatTonAsText","formatStarsAsText","onCheck","checkBoxDescription","GiftInfoValueModal","closeGiftInfoValueModal","handleOpenFragment","valueInfo","fragmentListedUrl","handleOpenTelegramMarket","giftName","initialSaleDate","initialSaleStars","initialSalePrice","lastSalePrice","floorPrice","averagePrice","canBuyOnFragment","fragmentListedCount","canBuyOnTelegram","listedCount","configPermille","starsStargiftResaleCommissionPermille","starsStargiftResaleAmountMin","starsStargiftResaleAmountMax","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","tonConfigPermille","tonStargiftResaleCommissionPermille","tonStargiftResaleAmountMin","convertTonFromNanos","maxTonFromConfig","tonStargiftResaleAmountMax","GiftResalePriceComposerModal","closeGiftResalePriceComposerModal","setPrice","isPriceInTon","setIsPriceInTon","hasPrice","handleChangePrice","parseFloat","isNaN","handleSellGift","convertTonToNanos","commission","minAmount","isPriceCorrect","InputText","inputMode","teactExperimentControlled","priceWithCommission","toFixed","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","random","getRandomAttributes","useInterval","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","TableAboutModal","GiftStatusInfoModal","closeGiftStatusInfoModal","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","byKey","hasPassword","twoFaSettings","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","openSettingsScreen","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","handleSetUpPassword","screen","SettingsScreens","TwoFaDisabled","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","error","errorKey","withRegular","onClearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","ChatRefundModal","closeChatRefundModal","toggleNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","PriceConfirmModal","actions","handleConfirm","directInfo","closePriceConfirmModal","newAmount","currentBalance","getCurrentTabId","originalAmount","originalAmountText","newAmountText"],"sourceRoot":""}