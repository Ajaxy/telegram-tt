{"version":3,"file":"6438.a78fd5265caed22c4ba0.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/riff/RiffChunk.js","webpack://telegram-t/./node_modules/music-metadata/lib/wav/WaveChunk.js","webpack://telegram-t/./node_modules/music-metadata/lib/wav/BwfChunk.js","webpack://telegram-t/./node_modules/music-metadata/lib/wav/WaveParser.js"],"sourcesContent":["import * as Token from 'token-types';\n/**\n * Common RIFF chunk header\n */\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: new Token.StringType(4, 'latin1').get(buf, off),\n            // Size\n            chunkSize: Token.UINT32_LE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Token to parse RIFF-INFO tag value\n */\nexport class ListInfoTagValue {\n    constructor(tagHeader) {\n        this.tagHeader = tagHeader;\n        this.len = tagHeader.chunkSize;\n        this.len += this.len & 1; // if it is an odd length, round up to even\n    }\n    get(buf, off) {\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\n    }\n}\n//# sourceMappingURL=RiffChunk.js.map","import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class WaveContentError extends makeUnexpectedFileContentError('Wave') {\n}\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nexport const WaveFormat = {\n    PCM: 0x0001,\n    // MPEG-4 and AAC Audio Types\n    ADPCM: 0x0002,\n    IEEE_FLOAT: 0x0003,\n    MPEG_ADTS_AAC: 0x1600,\n    MPEG_LOAS: 0x1602,\n    RAW_AAC1: 0x00FF,\n    // Dolby Audio Types\n    DOLBY_AC3_SPDIF: 0x0092,\n    DVM: 0x2000,\n    RAW_SPORT: 0x0240,\n    ESST_AC3: 0x0241,\n    DRM: 0x0009,\n    DTS2: 0x2001,\n    MPEG: 0x0050\n};\nexport const WaveFormatNameMap = {\n    [WaveFormat.PCM]: 'PCM',\n    [WaveFormat.ADPCM]: 'ADPCM',\n    [WaveFormat.IEEE_FLOAT]: 'IEEE_FLOAT',\n    [WaveFormat.MPEG_ADTS_AAC]: 'MPEG_ADTS_AAC',\n    [WaveFormat.MPEG_LOAS]: 'MPEG_LOAS',\n    [WaveFormat.RAW_AAC1]: 'RAW_AAC1',\n    [WaveFormat.DOLBY_AC3_SPDIF]: 'DOLBY_AC3_SPDIF',\n    [WaveFormat.DVM]: 'DVM',\n    [WaveFormat.RAW_SPORT]: 'RAW_SPORT',\n    [WaveFormat.ESST_AC3]: 'ESST_AC3',\n    [WaveFormat.DRM]: 'DRM',\n    [WaveFormat.DTS2]: 'DTS2',\n    [WaveFormat.MPEG]: 'MPEG'\n};\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nexport class Format {\n    constructor(header) {\n        if (header.chunkSize < 16)\n            throw new WaveContentError('Invalid chunk size');\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            wFormatTag: Token.UINT16_LE.get(buf, off),\n            nChannels: Token.UINT16_LE.get(buf, off + 2),\n            nSamplesPerSec: Token.UINT32_LE.get(buf, off + 4),\n            nAvgBytesPerSec: Token.UINT32_LE.get(buf, off + 8),\n            nBlockAlign: Token.UINT16_LE.get(buf, off + 12),\n            wBitsPerSample: Token.UINT16_LE.get(buf, off + 14)\n        };\n    }\n}\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nexport class FactChunk {\n    constructor(header) {\n        if (header.chunkSize < 4) {\n            throw new WaveContentError('Invalid fact chunk size.');\n        }\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            dwSampleLength: Token.UINT32_LE.get(buf, off)\n        };\n    }\n}\n//# sourceMappingURL=WaveChunk.js.map","import * as Token from 'token-types';\nimport { stripNulls } from '../common/Util.js';\n/**\n * Broadcast Audio Extension Chunk\n * Ref: https://tech.ebu.ch/docs/tech/tech3285.pdf\n */\nexport const BroadcastAudioExtensionChunk = {\n    len: 420,\n    get: (uint8array, off) => {\n        return {\n            description: stripNulls(new Token.StringType(256, 'ascii').get(uint8array, off)).trim(),\n            originator: stripNulls(new Token.StringType(32, 'ascii').get(uint8array, off + 256)).trim(),\n            originatorReference: stripNulls(new Token.StringType(32, 'ascii').get(uint8array, off + 288)).trim(),\n            originationDate: stripNulls(new Token.StringType(10, 'ascii').get(uint8array, off + 320)).trim(),\n            originationTime: stripNulls(new Token.StringType(8, 'ascii').get(uint8array, off + 330)).trim(),\n            timeReferenceLow: Token.UINT32_LE.get(uint8array, off + 338),\n            timeReferenceHigh: Token.UINT32_LE.get(uint8array, off + 342),\n            version: Token.UINT16_LE.get(uint8array, off + 346),\n            umid: new Token.Uint8ArrayType(64).get(uint8array, off + 348),\n            loudnessValue: Token.UINT16_LE.get(uint8array, off + 412),\n            maxTruePeakLevel: Token.UINT16_LE.get(uint8array, off + 414),\n            maxMomentaryLoudness: Token.UINT16_LE.get(uint8array, off + 416),\n            maxShortTermLoudness: Token.UINT16_LE.get(uint8array, off + 418)\n        };\n    }\n};\n//# sourceMappingURL=BwfChunk.js.map","import * as strtok3 from 'strtok3';\nimport * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as riff from '../riff/RiffChunk.js';\nimport * as WaveChunk from './WaveChunk.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport * as util from '../common/Util.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BroadcastAudioExtensionChunk } from './BwfChunk.js';\nimport { WaveContentError } from './WaveChunk.js';\nconst debug = initDebug('music-metadata:parser:RIFF');\n/**\n * Resource Interchange File Format (RIFF) Parser\n *\n * WAVE PCM soundfile format\n *\n * Ref:\n * - http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html\n * - http://soundfile.sapp.org/doc/WaveFormat\n *\n * ToDo: Split WAVE part from RIFF parser\n */\nexport class WaveParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.blockAlign = 0;\n    }\n    async parse() {\n        const riffHeader = await this.tokenizer.readToken(riff.Header);\n        debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);\n        if (riffHeader.chunkID !== 'RIFF')\n            return; // Not RIFF format\n        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {\n            if (!(err instanceof strtok3.EndOfStreamError)) {\n                throw err;\n            }\n        });\n    }\n    async parseRiffChunk(chunkSize) {\n        const type = await this.tokenizer.readToken(FourCcToken);\n        this.metadata.setFormat('container', type);\n        switch (type) {\n            case 'WAVE':\n                return this.readWaveChunk(chunkSize - FourCcToken.len);\n            default:\n                throw new WaveContentError(`Unsupported RIFF format: RIFF/${type}`);\n        }\n    }\n    async readWaveChunk(remaining) {\n        while (remaining >= riff.Header.len) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            remaining -= riff.Header.len + header.chunkSize;\n            if (header.chunkSize > remaining) {\n                this.metadata.addWarning('Data chunk size exceeds file size');\n            }\n            this.header = header;\n            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);\n            switch (header.chunkID) {\n                case 'LIST':\n                    await this.parseListTag(header);\n                    break;\n                case 'fact': // extended Format chunk,\n                    this.metadata.setFormat('lossless', false);\n                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));\n                    break;\n                case 'fmt ': { // The Util Chunk, non-PCM Formats\n                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));\n                    let subFormat = WaveChunk.WaveFormatNameMap[fmt.wFormatTag];\n                    if (!subFormat) {\n                        debug(`WAVE/non-PCM format=${fmt.wFormatTag}`);\n                        subFormat = `non-PCM (${fmt.wFormatTag})`;\n                    }\n                    this.metadata.setFormat('codec', subFormat);\n                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);\n                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);\n                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);\n                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);\n                    this.blockAlign = fmt.nBlockAlign;\n                    break;\n                }\n                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data\n                case 'ID3 ': { // The way Mp3Tags stores ID3 meta-data\n                    const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                    const rst = strtok3.fromBuffer(id3_data);\n                    await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                    break;\n                }\n                case 'data': { // PCM-data\n                    if (this.metadata.format.lossless !== false) {\n                        this.metadata.setFormat('lossless', true);\n                    }\n                    let chunkSize = header.chunkSize;\n                    if (this.tokenizer.fileInfo.size) {\n                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;\n                        if (calcRemaining < chunkSize) {\n                            this.metadata.addWarning('data chunk length exceeding file length');\n                            chunkSize = calcRemaining;\n                        }\n                    }\n                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);\n                    if (numberOfSamples) {\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);\n                        }\n                    }\n                    if (this.metadata.format.codec === 'ADPCM') { // ADPCM is 4 bits lossy encoding resulting in 352kbps\n                        this.metadata.setFormat('bitrate', 352000);\n                    }\n                    else if (this.metadata.format.sampleRate) {\n                        this.metadata.setFormat('bitrate', this.blockAlign * this.metadata.format.sampleRate * 8);\n                    }\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                }\n                case 'bext': { // Broadcast Audio Extension chunk\thttps://tech.ebu.ch/docs/tech/tech3285.pdf\n                    const bext = await this.tokenizer.readToken(BroadcastAudioExtensionChunk);\n                    Object.keys(bext).forEach(key => {\n                        this.metadata.addTag('exif', `bext.${key}`, bext[key]);\n                    });\n                    const bextRemaining = header.chunkSize - BroadcastAudioExtensionChunk.len;\n                    await this.tokenizer.ignore(bextRemaining);\n                    break;\n                }\n                case '\\x00\\x00\\x00\\x00': // padding ??\n                    debug(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                default:\n                    debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);\n                    await this.tokenizer.ignore(header.chunkSize);\n            }\n            if (this.header.chunkSize % 2 === 1) {\n                debug('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF\n                await this.tokenizer.ignore(1);\n            }\n        }\n    }\n    async parseListTag(listHeader) {\n        const listType = await this.tokenizer.readToken(new Token.StringType(4, 'latin1'));\n        debug('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);\n        switch (listType) {\n            case 'INFO':\n                return this.parseRiffInfoTags(listHeader.chunkSize - 4);\n            default:\n                this.metadata.addWarning(`Ignore chunk: RIFF/WAVE/LIST/${listType}`);\n                debug(`Ignoring chunkID=RIFF/WAVE/LIST/${listType}`);\n                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();\n        }\n    }\n    async parseRiffInfoTags(chunkSize) {\n        while (chunkSize >= 8) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            const valueToken = new riff.ListInfoTagValue(header);\n            const value = await this.tokenizer.readToken(valueToken);\n            this.addTag(header.chunkID, util.stripNulls(value));\n            chunkSize -= (8 + valueToken.len);\n        }\n        if (chunkSize !== 0) {\n            throw new WaveContentError(`Illegal remaining size: ${chunkSize}`);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('exif', id, value);\n    }\n}\n//# sourceMappingURL=WaveParser.js.map"],"names":["Header","len","get","buf","off","chunkID","chunkSize","ListInfoTagValue","constructor","tagHeader","this","WaveContentError","WaveFormat","WaveFormatNameMap","Format","header","wFormatTag","nChannels","nSamplesPerSec","nAvgBytesPerSec","nBlockAlign","wBitsPerSample","FactChunk","dwSampleLength","BroadcastAudioExtensionChunk","uint8array","description","trim","originator","originatorReference","originationDate","originationTime","timeReferenceLow","timeReferenceHigh","version","umid","loudnessValue","maxTruePeakLevel","maxMomentaryLoudness","maxShortTermLoudness","debug","WaveParser","BasicParser","super","arguments","blockAlign","parse","riffHeader","tokenizer","readToken","position","parseRiffChunk","catch","err","type","metadata","setFormat","readWaveChunk","remaining","addWarning","parseListTag","fact","fmt","subFormat","id3_data","rst","ID3v2Parser","options","format","lossless","fileInfo","size","calcRemaining","numberOfSamples","undefined","sampleRate","codec","ignore","bext","Object","keys","forEach","key","addTag","bextRemaining","listHeader","listType","parseRiffInfoTags","then","valueToken","value","id"],"sourceRoot":""}