{"version":3,"file":"9451.9d9b6351a608fdc2dee4.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.module.scss?d42b","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.tsx"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(global: GlobalState, params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize || FALLBACK_DIMENSIONS;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div\n        className=\"media-viewer-head\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n        chatId,\n        threadId,\n        messageId,\n        message: undefined,\n        collectedMessageIds: undefined,\n        chatMessages: undefined,\n        sponsoredMessage: undefined,\n        withDynamicLoading,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, currentItem);\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n      canUpdateMedia: undefined,\n      avatar: undefined,\n      avatarOwner: undefined,\n      profilePhotos: undefined,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): Complete<StateProps> => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): Complete<StateProps> => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig.storyChangelogUserId,\n    viewersExpirePeriod: appConfig.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpireDate?: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpireDate,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(viewersExpireDate) && viewersExpireDate < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n  const storyExpireDate = story?.['@type'] === 'story' ? story.expireDate : undefined;\n\n  return {\n    views,\n    viewersExpireDate: storyExpireDate ? (storyExpireDate + appConfig.storyViewersExpirePeriod) : undefined,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      changeWebAppModalState({ state: 'minimized' });\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={lang('AriaMiniApp', { bot: bot?.firstName })}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectCustomEmoji,\n  selectIsCurrentUserPremium,\n  selectStickerSet,\n  selectTabState,\n  selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift && gift.type !== 'starGiftUnique' && gift.perUserTotal) {\n      return lang('DescriptionGiftPremiumRequired2', { count: gift.perUserTotal }, {\n        pluralValue: gift.perUserTotal,\n      });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? selectCustomEmoji(global, fromUser.emojiStatus.documentId)\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig.limits,\n    premiumSlug: global.appConfig.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig.premiumBotUsername,\n    premiumPromoOrder: global.appConfig.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): Complete<StateProps> => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {\n      members: undefined,\n      adminMembersById: undefined,\n    };\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): Complete<StateProps> => {\n    const { limits } = global.appConfig;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): Complete<StateProps> => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const minLevelToRestrictAds = global.appConfig.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            onClearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\n// Add 1 minute if time is less than server min, to allow user to send the message\nconst FUTURE_TIME_ADJUSTMENT = 1 * 60;\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate\n        ? Math.max(scheduleDate / 1000, getServerTime() + futureMin + FUTURE_TIME_ADJUSTMENT)\n        : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig.starsSuggestedPostAmountMax;\n    const minStarsAmount = appConfig.starsSuggestedPostAmountMin;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n\n    const tonMaxAmount = appConfig.tonSuggestedPostAmountMax;\n    const tonMinAmount = appConfig.tonSuggestedPostAmountMin;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig.starsSuggestedPostCommissionPermille;\n    const tonCommissionPermille = appConfig.tonSuggestedPostCommissionPermille;\n    const minAge = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('ChatPermissionNotAvailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('SendMediaPermissionPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('SendMediaPermissionVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('SendMediaPermissionStickersGifs')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('SendMediaPermissionAudios')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('SendMediaPermissionFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('SendMediaPermissionVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('SendMediaPermissionRoundVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('SendMediaPermissionWebPages')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('SendMediaPermissionPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('UserRestrictionsCreateTopics')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasIpRevealingMedia,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutFiles?: boolean;\n  hasIpRevealingMedia?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutFiles,\n  hasIpRevealingMedia,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutFiles && hasIpRevealingMedia) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasIpRevealingMedia = selectedMessageIds && chatId\n      ? selectHasIpRevealingMedia(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutFiles,\n      hasIpRevealingMedia,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {\n        seenByDates: undefined,\n      };\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): Complete<StateProps> => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): Complete<StateProps> => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutFiles?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutFiles,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView, updateChatMutedState } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const handleUnmute = useLastCallback(() => {\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(oldLang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): Complete<StateProps> => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatListSearchNoResults')}\n            description={lang('ChatListSearchNoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchResultTopics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={lang('ChatListSearchNoResults')}\n          description={lang('ChatListSearchNoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchResultMyChannels' : 'DialogListSearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang('DialogListSearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchResultRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {lang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutFiles,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={lang('ChatListSearchNoResults')}\n                description={lang('ChatListSearchNoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { FOLDER_TITLE_MAX_LENGTH, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n  isCurrentUserPremium: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst FOLDER_COLORS = [0, 1, 2, 3, 4, 5, 6];\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            maxLength={FOLDER_TITLE_MAX_LENGTH}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3 color-picker-title\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorTitle')}\n            <div className={buildClassName(\n              'color-picker-selected-color',\n              isCurrentUserPremium && state.folder.color !== undefined && state.folder.color !== -1\n                ? getApiPeerColorClass({ color: state.folder.color })\n                : 'color-picker-item-disabled',\n            )}\n            >\n              {renderTextWithEntities({\n                text: state.folder.title.text,\n                entities: state.folder.title.entities,\n                noCustomEmojiPlayback: state.folder.noTitleAnimations,\n              })}\n            </div>\n          </h4>\n          <div className=\"color-picker\">\n            {FOLDER_COLORS.map((color) => (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => {\n                  if (!isCurrentUserPremium) {\n                    openPremiumModal();\n                    return;\n                  }\n\n                  dispatch({ type: 'setColor', payload: color });\n                }}\n                className={buildClassName(\n                  'color-picker-item',\n                  getApiPeerColorClass({ color }),\n                  !isCurrentUserPremium && 'color-picker-item-hover-disabled',\n                  color === state.folder.color && isCurrentUserPremium && 'color-picker-item-active',\n                )}\n              />\n            ))}\n            <button\n              type=\"button\"\n              onClick={() => {\n                if (!isCurrentUserPremium) {\n                  openPremiumModal();\n                  return;\n                }\n\n                dispatch({ type: 'setColor', payload: undefined });\n              }}\n              className={buildClassName(\n                'color-picker-item',\n                'color-picker-item-none',\n                (state.folder.color === undefined || state.folder.color === -1 || !isCurrentUserPremium)\n                && 'color-picker-item-active',\n              )}\n            >\n              {isCurrentUserPremium ? (\n                <Icon name=\"close\" className=\"color-picker-item-none-icon\" />\n              ) : (\n                <Icon name=\"lock-badge\" className=\"color-picker-item-none-icon\" />\n              )}\n            </button>\n          </div>\n          <p className=\"settings-item-description mb-0\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorHint')}\n          </p>\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): Complete<StateProps> => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n      isCurrentUserPremium,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n  areTagsEnabled?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n  areTagsEnabled,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n    toggleDialogFilterTags,\n    openPremiumModal,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        color: folder.color,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleToggleTags = useCallback(() => {\n    if (!isPremium) {\n      return;\n    }\n\n    toggleDialogFilterTags({ isEnabled: !areTagsEnabled });\n  }, [areTagsEnabled, isPremium, toggleDialogFilterTags]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Move icon into button prop\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            const shouldRenderColor = folder?.color !== undefined && folder.color !== -1 && isPremium;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: ${shouldRenderColor ? '3.5rem' : '3rem'};`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n\n                  {\n                    shouldRenderColor && (\n                      <div className={buildClassName(\n                        'settings-folders-color-circle',\n                        getApiPeerColorClass({ color: folder.color }),\n                      )}\n                      />\n                    )\n                  }\n\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              {lang('SettingsFoldersEmpty')}\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n      <div className=\"settings-item pt-3\">\n        <div className=\"settings-item-relative\">\n          <Checkbox\n            label={lang('ShowFolderTags')}\n            subLabel={lang('ShowFolderTagsHint')}\n            checked={isPremium && areTagsEnabled}\n            onChange={handleToggleTags}\n            onClickLabel={(event) => {\n              if (!isPremium) {\n                event.preventDefault();\n                openPremiumModal();\n              }\n            }}\n          />\n          {!isPremium && <Icon name=\"lock-badge\" className=\"settings-folders-lock-icon\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n      areTagsEnabled,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      areTagsEnabled,\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title: { text: title } } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    dispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [dispatch, handleReset]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  isActive?: boolean;\n  onSubmit: (password: string) => void;\n  onClearError?: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder,\n  hint,\n  submitLabel,\n  onSubmit,\n  onClearError,\n  onReset,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(lang('SettingsPasswordEqual'));\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword, lang]);\n\n  const handleClearError = useCallback(() => {\n    if (onClearError) {\n      onClearError();\n    }\n    setValidationError('');\n  }, [onClearError]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder || lang('CurrentPasswordPlaceholder')}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel}\n          onClearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onStart: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          {lang('SettingsPasscodeStart1', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SettingsPasscodeStart2', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.passcode } as Complete<StateProps>),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreviewTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreviewTerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettingsLastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreviewApp')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n        {renderingSession?.ip && (\n          <>\n            <dt>{lang('SessionPreviewIp')}</dt>\n            <dd>{renderingSession.ip}</dd>\n          </>\n        )}\n\n        <dt>{lang('SessionPreviewLocation')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreviewIpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessionsViewAcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptSecret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptCalls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['activeSessions'];\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', { count: 1 }, { pluralValue: 1 }),\n      value: '7',\n    }, {\n      label: lang('Months', { count: 1 }, { pluralValue: 1 }),\n      value: '30',\n    }, {\n      label: lang('Months', { count: 3 }, { pluralValue: 3 }),\n      value: '90',\n    }, {\n      label: lang('Months', { count: 6 }, { pluralValue: 6 }),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', { count: 1 }, { pluralValue: 1 }),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessionsCurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: lang('SessionTerminate'),\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(oldLang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => global.activeSessions as Complete<StateProps>,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): Complete<StateProps> => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser || {};\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = currentUser && getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental = ({\n  isActive,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n  onReset,\n}: OwnProps & StateProps) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const accounts = useMultiaccountInfo();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true, true);\n  }, [accounts]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          href={newAccountUrl}\n          icon=\"add-user\"\n        >\n          <div className=\"title\">Login on Test Server</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const areChannelsMuted = Boolean(notifyDefaults?.channels?.mutedUntil);\n  const areGroupsMuted = Boolean(notifyDefaults?.groups?.mutedUntil);\n  const areUsersMuted = Boolean(notifyDefaults?.users?.mutedUntil);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(!areUsersMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areUsersMuted}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areUsersMuted}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(!areGroupsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areGroupsMuted}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areGroupsMuted}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(!areChannelsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areChannelsMuted}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areChannelsMuted}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n      notifyDefaults: global.settings.notifyDefaults,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">{lang('SettingsPerformanceGranularTitle')}</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: appConfig.canDisplayAutoarchiveSetting || isCurrentUserPremium,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      } as Complete<StateProps>;\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: ApiReaction;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction?.type === 'emoji' ? selectedReaction.emoticon : undefined}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  codeLength?: number;\n  recoveryEmail?: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.twoFaSettings } as Complete<StateProps>),\n)(SettingsTwoFa));\n","import type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch.ts';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MUTE_INDEFINITE_TIMESTAMP } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MUTE_INDEFINITE_TIMESTAMP;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { UNMUTE_TIMESTAMP } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {} as Complete<StateProps>;\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig;\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig;\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const anyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, anyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount: number;\n  maxTitleLength: number;\n  maxItemLength: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount,\n  maxTitleLength,\n  maxItemLength,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const modalTitle = isAddTaskMode ? 'TitleAppendToDoList'\n      : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(modalTitle)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  const moreTasksCount = maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount2', {\n          count: moreTasksCount,\n        }, {\n          pluralValue: moreTasksCount,\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig.todoItemsMax,\n      maxTitleLength: appConfig.todoTitleLengthMax,\n      maxItemLength: appConfig.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  const lang = useLang();\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=\"${formattedLinkUrl}\" class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      if (!linkUrl.trim()) return;\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingSpoilerAria')}\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingBoldAria')}\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingItalicAria')}\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingUnderlineAria')}\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingStrikethroughAria')}\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingMonospaceAria')}\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('FormattingAddLinkAria')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder={lang('FormattingEnterUrl')}\n              autoComplete=\"off\"\n              spellCheck={IS_TAURI ? false : undefined}\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm || switchWebview)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): Complete<StateProps> => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang(\n            'ChannelStatsViewsCount',\n            { count: postStatistic.viewsCount },\n            { pluralValue: postStatistic.viewsCount },\n          )}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): Complete<StateProps> => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  currentBio,\n  isActive,\n  maxBioLength,\n  onClose,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): Complete<StateProps> => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                className=\"align-checkbox-with-list-buttons\"\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions } = global.appConfig;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { MUTE_INDEFINITE_TIMESTAMP, SERVICE_NOTIFICATIONS_USER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n    updateChatMutedState,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, markProfileFieldsTouched, unmarkProfileFieldsTouched] = useFlag();\n  const [error, setError] = useState<string | undefined>();\n  const [isNotificationsTouched, markNotificationsTouched, unmarkNotificationsTouched] = useFlag();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    unmarkProfileFieldsTouched();\n    unmarkNotificationsTouched();\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileFieldsTouched();\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    markProfileFieldsTouched();\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    markNotificationsTouched();\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n\n    if (isNotificationsTouched) {\n      updateChatMutedState({\n        chatId: userId, mutedUntil: isNotificationsEnabled ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP,\n      });\n    }\n  }, [firstName, isNotificationsEnabled, isNotificationsTouched, lastName, userId]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        onClearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (form?.savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: form.savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, form?.savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={form!.savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          {lang('PaymentsProvidesNotSupported', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const freezeUntilDate = global.appConfig.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"ChJT6ggP\",\"description\":\"ravQhVQQ\",\"descriptionPreview\":\"_K5HhOM0\",\"previewLink\":\"yY4hj8r_\",\"backLink\":\"dcNVNCXo\",\"title\":\"IvsV0tkW\",\"ratingProgress\":\"XYpzs7CQ\",\"withPreview\":\"UgviXkNW\",\"subtitle\":\"OvdHupR0\",\"footer\":\"XtZPIDLP\",\"badge\":\"JdeFDQBI\",\"understoodIcon\":\"Lwz8rpdL\",\"badgeAdded\":\"Lr6JUU14\",\"badgeDeducted\":\"OxZxdqcn\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsRating, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress, { type AnimationDirection } from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './ProfileRatingModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['profileRatingModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  currentUserId?: string;\n  starsRating?: ApiStarsRating;\n  pendingRating?: ApiStarsRating;\n  pendingRatingDate?: number;\n};\n\nconst ProfileRatingModal = ({\n  modal,\n  user,\n  currentUserId,\n  starsRating,\n  pendingRating,\n  pendingRatingDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeProfileRatingModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const [showFutureRating, setShowFutureRating] = useState(false);\n\n  const handleClose = useLastCallback(() => {\n    closeProfileRatingModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShowFutureRating(false);\n    }\n  }, [isOpen]);\n\n  const handleShowFuture = useLastCallback(() => {\n    setShowFutureRating(true);\n  });\n\n  const handleShowCurrent = useLastCallback(() => {\n    setShowFutureRating(false);\n  });\n\n  const renderBadge = (type: 'added' | 'deducted') => {\n    const isAdded = type === 'added';\n    const badgeText = isAdded ? lang('RatingBadgeAdded') : lang('RatingBadgeDeducted');\n    const badgeClass = isAdded ? styles.badgeAdded : styles.badgeDeducted;\n\n    return (\n      <span className={buildClassName(styles.badge, badgeClass)}>\n        {badgeText}\n      </span>\n    );\n  };\n\n  const header = useMemo(() => {\n    if (!modal || !user || !starsRating || !isOpen) return undefined;\n\n    const rating = showFutureRating && pendingRating ? pendingRating : starsRating;\n    const currentStars = rating.stars;\n    const currentLevelStars = rating.currentLevelStars;\n    const nextLevelStars = rating.nextLevelStars;\n    const currentLevel = rating.level;\n    const nextLevel = currentLevel + 1;\n    const isNegative = currentLevel < 0;\n    const pendingLevel = !showFutureRating && pendingRating ? pendingRating.level : starsRating.level;\n\n    let levelProgress = 0;\n\n    if (!nextLevelStars) {\n      levelProgress = 1;\n    } else if (nextLevelStars > currentLevelStars) {\n      levelProgress = Math.max(0.03, (currentStars - currentLevelStars) / (nextLevelStars - currentLevelStars));\n    } else {\n      levelProgress = 1;\n    }\n\n    const progress = isNegative ? 0.5 : Math.max(0, Math.min(1, levelProgress));\n\n    const waitTime = pendingRatingDate ? pendingRatingDate - Math.floor(Date.now() / 1000) : 0;\n    const pendingPoints = pendingRating ? pendingRating.stars - starsRating.stars : 0;\n    const shouldShowPreview = pendingRating && pendingRatingDate;\n\n    const renderPreviewDescription = () => {\n      if (!shouldShowPreview) return undefined;\n\n      return (\n        <Transition\n          name=\"fade\"\n          className={styles.descriptionPreview}\n          activeKey={showFutureRating ? 1 : 0}\n          shouldCleanup\n          shouldRestoreHeight\n        >\n          {showFutureRating ? (\n            <p>\n              {lang('DescriptionFutureRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.backLink} onClick={handleShowCurrent}>\n                    {lang('LinkDescriptionRatingBack')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          ) : (\n            <p>\n              {lang('DescriptionPendingRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.previewLink} onClick={handleShowFuture}>\n                    {lang('LinkDescriptionRatingPreview')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          )}\n        </Transition>\n      );\n    };\n\n    let animationDirection: AnimationDirection = 'none';\n    if (currentLevel >= 0 && pendingLevel >= 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel > pendingLevel ? 'forward' : 'backward';\n    }\n\n    if (currentLevel < 0 && pendingLevel < 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel < pendingLevel ? 'backward' : 'forward';\n    }\n\n    const userFallbackText = lang('ActionFallbackUser');\n\n    return (\n      <div className={styles.header}>\n        <div className={styles.title}>\n          {lang('TitleRating')}\n        </div>\n        <PremiumProgress\n          leftText={isNegative ? undefined : lang('RatingLevel', { level: currentLevel })}\n          rightText={isNegative ? lang('RatingNegativeLevel') : lang('RatingLevel', { level: nextLevel })}\n          floatingBadgeIcon={isNegative ? 'warning' : 'crown-wear'}\n          floatingBadgeText={isNegative ? currentLevel.toString()\n            : `${lang.number(currentStars)} / ${lang.number(nextLevelStars || currentStars)}`}\n          progress={progress}\n          isPrimary={currentLevel >= 0}\n          isNegative={currentLevel < 0}\n          animationDirection={animationDirection}\n          className={buildClassName(styles.ratingProgress, shouldShowPreview && styles.withPreview)}\n        />\n        {renderPreviewDescription()}\n        <p className={styles.description}>\n          {user?.id === currentUserId\n            ? lang('RatingYourReflectsActivity')\n            : lang('RatingReflectsActivity', { name: getPeerTitle(lang, user) || userFallbackText })}\n        </p>\n      </div>\n    );\n  }, [modal, user, currentUserId, starsRating,\n    pendingRating, pendingRatingDate, showFutureRating,\n    lang, handleShowFuture, handleShowCurrent, isOpen]);\n\n  const listItemData = [\n    ['gift', lang('RatingGiftsFromTelegram'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsFromTelegramDesc')}\n      </span>\n    )],\n    ['user-stars', lang('RatingGiftsAndPostsFromUsers'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsAndPostsFromUsersDesc')}\n      </span>\n    )],\n    ['refund', lang('RatingRefundsAndConversions'), (\n      <span className={styles.subtitle}>\n        {renderBadge('deducted')}\n        {lang('RatingRefundsAndConversionsDesc')}\n      </span>\n    )],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleClose}\n        >\n          <Icon name=\"understood\" className={styles.understoodIcon} />\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen, handleClose]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId;\n    const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n    const userFullInfo = modal?.userId\n      ? selectUserFullInfo(global, modal.userId) : undefined;\n\n    const starsRating = userFullInfo?.starsRating;\n    const pendingRating = userFullInfo?.starsMyPendingRating;\n    const pendingRatingDate = userFullInfo?.starsMyPendingRatingDate;\n\n    return {\n      user,\n      currentUserId,\n      starsRating,\n      pendingRating,\n      pendingRatingDate,\n    };\n  },\n)(ProfileRatingModal));\n"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","_ref","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","_jsxs","id","className","children","_jsx","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","params","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","_ref4","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","_ref2","onTrigger","round","ariaLabel","Icon","renderDeleteModal","DeleteProfilePhotoModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","_ref3","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","VideoPlayerControls","textMessage","maxTimestamp","selectMessageTimestampableDuration","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","VideoPlayer","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","MediaViewerFooter","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","collectedMessageIds","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","IS_TAURI","IS_MAC_OS","Transition","activeKey","SenderInfo","MediaViewerActions","ReportAvatarModal","MediaViewerSlides","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","EmbeddedStoryForward","MessageText","messageOrStory","withTranslucentThumbs","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","DEFAULT_STORY_DURATION_S","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryFooter","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","storyExpireDate","viewersExpireDate","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","StoryView","Array","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StealthModeModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","ChatOrUserPicker","isManyMessages","isStory","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","notifications","notification","Notification","localId","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","CalendarModal","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","headerRef","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","MinimizedWebAppModal","noBackdropClose","WebAppModalTabContent","MoreAppsTabContent","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","colorStepProgress","lerp","PremiumLimitsCompare","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","PremiumFeatureItem","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","PremiumFeaturePreviewVideo","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","SliderDots","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","selectCustomEmoji","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","PremiumFeatureModal","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","renderHeader","PremiumSubscriptionOption","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","ItemPicker","picker","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","GiveawayTypeOption","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","match","Link","isPrimary","renderPremiumFeaturesLink","CountryPickerModal","GiveawayUserPickerModal","GiveawayChannelPickerModal","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","ReactionEmoji","isHqEmoji","canvasRef","StickerButton","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","StickerSetCover","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","CUSTOM_EMOJI_SIZE","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","hasAbsoluteCloseButton","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","suggestedPeerIds","leaveChatlist","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","onClearError","shouldResetValue","onChangePasswordVisibility","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","minStarsAmount","starsSuggestedPostAmountMin","ageMinSeconds","starsSuggestedPostAgeMin","futureMin","starsSuggestedPostFutureMin","futureMax","starsSuggestedPostFutureMax","tonMaxAmount","tonSuggestedPostAmountMax","tonMinAmount","tonSuggestedPostAmountMin","isMonoforumAdmin","tonBalance","ton","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","tonCommissionPermille","tonSuggestedPostCommissionPermille","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","PermissionCheckboxList","isPrivateChat","canPinForAll","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","pinnedMessagesCount","onUnpin","shouldWarnAboutFiles","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasIpRevealingMedia","selectHasIpRevealingMedia","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleFileIpConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","closeCollectibleInfoModal","isUsername","handleOpenUrl","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","withUsername","withOpenAppButton","updateChatMutedState","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","LeftSearchResultChat","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","getMessageRoundVideo","formatPastTimeShort","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","foundTopicIds","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","DateSuggest","LeftSearchResultTopic","ChatMessage","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","RecentContacts","shouldRenderMessagesSection","noScrollRestoreOnTop","LeftSearchResultSponsored","customIcon","CURRENT_TYPE","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","WebLink","onMessageClick","handleSelectMedia","isMediaGrid","isMessageList","Media","searchFlood","onSearch","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","checkSearchPostsFlood","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","noForcedUpperCase","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","resolveTransitionName","PublicPostsSearchLauncher","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","BotAppResults","PublicPostsResults","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","FOLDER_COLORS","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","FOLDER_TITLE_MAX_LENGTH","getApiPeerColorClass","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","areTagsEnabled","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","toggleDialogFilterTags","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleToggleTags","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","shouldRenderColor","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","PasswordMonkey","fullReset","STICKER_SIZE_PASSCODE","Congratulations","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","passcode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","PasscodeEnabled","SettingsPasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","PaidMessageSlider","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","SettingsActiveSession","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","SettingsActiveWebsite","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","StickerSetCard","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","ManageUsernames","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","accounts","useMultiaccountInfo","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","newAccountUrl","freeIndex","getAccountSlotUrl","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","GeneralChatBackground","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","Notifications","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","areChannelsMuted","areGroupsMuted","groups","areUsersMuted","handleSettingsChange","peerType","setting","currentIsMuted","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","BlockUserModal","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","canShowHideReadTime","handleChangeShouldHideReadMarks","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","handleShowGiftIconInChats","secondaryScreen","SettingsPrivacyPublicProfilePhoto","SettingsPrivacyLastSeen","SettingsAcceptedGift","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","setDefaultReaction","emoticon","addedSetIds","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","clearError","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","shouldWrap","withSwipeControl","_isFrom","_currentKey","SettingsHeader","userStatusesById","openNewContactDialog","isSearching","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","MUTE_INDEFINITE_TIMESTAMP","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","MiddleSearchResult","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","StickerPicker","ReactionPickerLimited","div","BLUR_CANVAS_SIZE","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","FALLBACK_MAX_OPTIONS_COUNT","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","moreTasksCount","tasksToRender","stateIndex","renderItems","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","EmojiPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseEnter","withAvatar","freezeWhenClosed","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","ChatCommand","botCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","spellCheck","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbnailDataUrl","getWebDocumentHash","decoding","inlineResult","webThumbnail","BaseResult","_gif","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","isGraphReady","recentPosts","StatisticsRecentMessage","StatisticsRecentStory","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","StatisticsMessagePublicForward","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","JoinRequest","STICKER_SIZE_JOIN_REQUESTS","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","markProfileFieldsTouched","unmarkProfileFieldsTouched","isNotificationsTouched","markNotificationsTouched","unmarkNotificationsTouched","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","ManageBot","ManageUser","ManageGroup","GroupRecentActions","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","noRedirect","onPaymentFormSubmit","messageKey","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","Select","hasArrow","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","ConfirmPayment","setStep","nextStep","Checkout","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","SavedPaymentCredentials","PasswordConfirm","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop","starsRating","pendingRating","starsMyPendingRating","pendingRatingDate","starsMyPendingRatingDate","closeProfileRatingModal","showFutureRating","setShowFutureRating","handleShowFuture","handleShowCurrent","renderBadge","badgeClass","rating","currentStars","currentLevelStars","nextLevelStars","nextLevel","isNegative","pendingLevel","waitTime","pendingPoints","shouldShowPreview","animationDirection","userFallbackText","renderPreviewDescription","shouldRestoreHeight"],"sourceRoot":""}