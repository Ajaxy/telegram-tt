{"version":3,"file":"1930.10d4720e8b41a8ecd025.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/ebml/types.js","webpack://telegram-t/./node_modules/music-metadata/lib/matroska/MatroskaDtd.js","webpack://telegram-t/./node_modules/music-metadata/lib/ebml/EbmlIterator.js","webpack://telegram-t/./node_modules/music-metadata/lib/matroska/MatroskaParser.js"],"sourcesContent":["export const DataType = {\n    string: 0,\n    uint: 1,\n    uid: 2,\n    bool: 3,\n    binary: 4,\n    float: 5,\n};\n//# sourceMappingURL=types.js.map","import { DataType } from '../ebml/types.js';\n/**\n * Elements of document type description\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\n * Extended with:\n * - https://www.matroska.org/technical/specs/index.html\n */\nexport const matroskaDtd = {\n    name: 'dtd',\n    container: {\n        0x1a45dfa3: {\n            name: 'ebml',\n            container: {\n                0x4286: { name: 'ebmlVersion', value: DataType.uint }, // 5.1.1\n                0x42f7: { name: 'ebmlReadVersion', value: DataType.uint }, // 5.1.2\n                0x42f2: { name: 'ebmlMaxIDWidth', value: DataType.uint }, // 5.1.3\n                0x42f3: { name: 'ebmlMaxSizeWidth', value: DataType.uint }, // 5.1.4\n                0x4282: { name: 'docType', value: DataType.string }, // 5.1.5\n                0x4287: { name: 'docTypeVersion', value: DataType.uint }, // 5.1.6\n                0x4285: { name: 'docTypeReadVersion', value: DataType.uint } // 5.1.7\n            }\n        },\n        // Matroska segments\n        0x18538067: {\n            name: 'segment',\n            container: {\n                // Meta Seek Information (also known as MetaSeek)\n                0x114d9b74: {\n                    name: 'seekHead',\n                    container: {\n                        0x4dbb: {\n                            name: 'seek',\n                            multiple: true,\n                            container: {\n                                0x53ab: { name: 'id', value: DataType.binary },\n                                0x53ac: { name: 'position', value: DataType.uint }\n                            }\n                        }\n                    }\n                },\n                // Segment Information\n                0x1549a966: {\n                    name: 'info',\n                    container: {\n                        0x73a4: { name: 'uid', value: DataType.uid },\n                        0x7384: { name: 'filename', value: DataType.string },\n                        0x3cb923: { name: 'prevUID', value: DataType.uid },\n                        0x3c83ab: { name: 'prevFilename', value: DataType.string },\n                        0x3eb923: { name: 'nextUID', value: DataType.uid },\n                        0x3e83bb: { name: 'nextFilename', value: DataType.string },\n                        0x2ad7b1: { name: 'timecodeScale', value: DataType.uint },\n                        0x4489: { name: 'duration', value: DataType.float },\n                        0x4461: { name: 'dateUTC', value: DataType.uint },\n                        0x7ba9: { name: 'title', value: DataType.string },\n                        0x4d80: { name: 'muxingApp', value: DataType.string },\n                        0x5741: { name: 'writingApp', value: DataType.string }\n                    }\n                },\n                // Cluster\n                0x1f43b675: {\n                    name: 'cluster',\n                    multiple: true,\n                    container: {\n                        0xe7: { name: 'timecode', value: DataType.uid },\n                        0x58d7: { name: 'silentTracks ', multiple: true },\n                        0xa7: { name: 'position', value: DataType.uid },\n                        0xab: { name: 'prevSize', value: DataType.uid },\n                        0xa0: { name: 'blockGroup' },\n                        0xa3: { name: 'simpleBlock' }\n                    }\n                },\n                // Track\n                0x1654ae6b: {\n                    name: 'tracks',\n                    container: {\n                        0xae: {\n                            name: 'entries',\n                            multiple: true,\n                            container: {\n                                0xd7: { name: 'trackNumber', value: DataType.uint },\n                                0x73c5: { name: 'uid', value: DataType.uid },\n                                0x83: { name: 'trackType', value: DataType.uint },\n                                0xb9: { name: 'flagEnabled', value: DataType.bool },\n                                0x88: { name: 'flagDefault', value: DataType.bool },\n                                0x55aa: { name: 'flagForced', value: DataType.bool }, // extended\n                                0x9c: { name: 'flagLacing', value: DataType.bool },\n                                0x6de7: { name: 'minCache', value: DataType.uint },\n                                0x6de8: { name: 'maxCache', value: DataType.uint },\n                                0x23e383: { name: 'defaultDuration', value: DataType.uint },\n                                0x23314f: { name: 'timecodeScale', value: DataType.float },\n                                0x536e: { name: 'name', value: DataType.string },\n                                0x22b59c: { name: 'language', value: DataType.string },\n                                0x86: { name: 'codecID', value: DataType.string },\n                                0x63a2: { name: 'codecPrivate', value: DataType.binary },\n                                0x258688: { name: 'codecName', value: DataType.string },\n                                0x3a9697: { name: 'codecSettings', value: DataType.string },\n                                0x3b4040: { name: 'codecInfoUrl', value: DataType.string },\n                                0x26b240: { name: 'codecDownloadUrl', value: DataType.string },\n                                0xaa: { name: 'codecDecodeAll', value: DataType.bool },\n                                0x6fab: { name: 'trackOverlay', value: DataType.uint },\n                                // Video\n                                0xe0: {\n                                    name: 'video',\n                                    container: {\n                                        0x9a: { name: 'flagInterlaced', value: DataType.bool },\n                                        0x53b8: { name: 'stereoMode', value: DataType.uint },\n                                        0xb0: { name: 'pixelWidth', value: DataType.uint },\n                                        0xba: { name: 'pixelHeight', value: DataType.uint },\n                                        0x54b0: { name: 'displayWidth', value: DataType.uint },\n                                        0x54ba: { name: 'displayHeight', value: DataType.uint },\n                                        0x54b3: { name: 'aspectRatioType', value: DataType.uint },\n                                        0x2eb524: { name: 'colourSpace', value: DataType.uint },\n                                        0x2fb523: { name: 'gammaValue', value: DataType.float }\n                                    }\n                                },\n                                // Audio\n                                0xe1: {\n                                    name: 'audio',\n                                    container: {\n                                        0xb5: { name: 'samplingFrequency', value: DataType.float },\n                                        0x78b5: { name: 'outputSamplingFrequency', value: DataType.float },\n                                        0x9f: { name: 'channels', value: DataType.uint }, // https://www.matroska.org/technical/specs/index.html\n                                        0x94: { name: 'channels', value: DataType.uint },\n                                        0x7d7b: { name: 'channelPositions', value: DataType.binary },\n                                        0x6264: { name: 'bitDepth', value: DataType.uint }\n                                    }\n                                },\n                                // Content Encoding\n                                0x6d80: {\n                                    name: 'contentEncodings',\n                                    container: {\n                                        0x6240: {\n                                            name: 'contentEncoding',\n                                            container: {\n                                                0x5031: { name: 'order', value: DataType.uint },\n                                                0x5032: { name: 'scope', value: DataType.bool },\n                                                0x5033: { name: 'type', value: DataType.uint },\n                                                0x5034: {\n                                                    name: 'contentEncoding',\n                                                    container: {\n                                                        0x4254: { name: 'contentCompAlgo', value: DataType.uint },\n                                                        0x4255: { name: 'contentCompSettings', value: DataType.binary }\n                                                    }\n                                                },\n                                                0x5035: {\n                                                    name: 'contentEncoding',\n                                                    container: {\n                                                        0x47e1: { name: 'contentEncAlgo', value: DataType.uint },\n                                                        0x47e2: { name: 'contentEncKeyID', value: DataType.binary },\n                                                        0x47e3: { name: 'contentSignature ', value: DataType.binary },\n                                                        0x47e4: { name: 'ContentSigKeyID  ', value: DataType.binary },\n                                                        0x47e5: { name: 'contentSigAlgo ', value: DataType.uint },\n                                                        0x47e6: { name: 'contentSigHashAlgo ', value: DataType.uint }\n                                                    }\n                                                },\n                                                0x6264: { name: 'bitDepth', value: DataType.uint }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Cueing Data\n                0x1c53bb6b: {\n                    name: 'cues',\n                    container: {\n                        0xbb: {\n                            name: 'cuePoint',\n                            container: {\n                                0xb3: { name: 'cueTime', value: DataType.uid },\n                                0xb7: {\n                                    name: 'positions',\n                                    container: {\n                                        0xf7: { name: 'track', value: DataType.uint },\n                                        0xf1: { name: 'clusterPosition', value: DataType.uint },\n                                        0x5378: { name: 'blockNumber', value: DataType.uint },\n                                        0xea: { name: 'codecState', value: DataType.uint },\n                                        0xdb: {\n                                            name: 'reference', container: {\n                                                0x96: { name: 'time', value: DataType.uint },\n                                                0x97: { name: 'cluster', value: DataType.uint },\n                                                0x535f: { name: 'number', value: DataType.uint },\n                                                0xeb: { name: 'codecState', value: DataType.uint }\n                                            }\n                                        },\n                                        0xf0: { name: 'relativePosition', value: DataType.uint } // extended\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Attachment\n                0x1941a469: {\n                    name: 'attachments',\n                    container: {\n                        0x61a7: {\n                            name: 'attachedFiles',\n                            multiple: true,\n                            container: {\n                                0x467e: { name: 'description', value: DataType.string },\n                                0x466e: { name: 'name', value: DataType.string },\n                                0x4660: { name: 'mimeType', value: DataType.string },\n                                0x465c: { name: 'data', value: DataType.binary },\n                                0x46ae: { name: 'uid', value: DataType.uid }\n                            }\n                        }\n                    }\n                },\n                // Chapters\n                0x1043a770: {\n                    name: 'chapters',\n                    container: {\n                        0x45b9: {\n                            name: 'editionEntry',\n                            container: {\n                                0xb6: {\n                                    name: 'chapterAtom',\n                                    container: {\n                                        0x73c4: { name: 'uid', value: DataType.uid },\n                                        0x91: { name: 'timeStart', value: DataType.uint },\n                                        0x92: { name: 'timeEnd', value: DataType.uid },\n                                        0x98: { name: 'hidden', value: DataType.bool },\n                                        0x4598: { name: 'enabled', value: DataType.uid },\n                                        0x8f: {\n                                            name: 'track', container: {\n                                                0x89: { name: 'trackNumber', value: DataType.uid },\n                                                0x80: {\n                                                    name: 'display', container: {\n                                                        0x85: { name: 'string', value: DataType.string },\n                                                        0x437c: { name: 'language ', value: DataType.string },\n                                                        0x437e: { name: 'country ', value: DataType.string }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Tagging\n                0x1254c367: {\n                    name: 'tags',\n                    container: {\n                        0x7373: {\n                            name: 'tag',\n                            multiple: true,\n                            container: {\n                                0x63c0: {\n                                    name: 'target',\n                                    container: {\n                                        0x63c5: { name: 'tagTrackUID', value: DataType.uid },\n                                        0x63c4: { name: 'tagChapterUID', value: DataType.uint },\n                                        0x63c6: { name: 'tagAttachmentUID', value: DataType.uid },\n                                        0x63ca: { name: 'targetType', value: DataType.string }, // extended\n                                        0x68ca: { name: 'targetTypeValue', value: DataType.uint }, // extended\n                                        0x63c9: { name: 'tagEditionUID', value: DataType.uid } // extended\n                                    }\n                                },\n                                0x67c8: {\n                                    name: 'simpleTags',\n                                    multiple: true,\n                                    container: {\n                                        0x45a3: { name: 'name', value: DataType.string },\n                                        0x4487: { name: 'string', value: DataType.string },\n                                        0x4485: { name: 'binary', value: DataType.binary },\n                                        0x447a: { name: 'language', value: DataType.string }, // extended\n                                        0x447b: { name: 'languageIETF', value: DataType.string }, // extended\n                                        0x4484: { name: 'default', value: DataType.bool } // extended\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n//# sourceMappingURL=MatroskaDtd.js.map","import { Float32_BE, Float64_BE, StringType, UINT8 } from 'token-types';\nimport initDebug from 'debug';\nimport { EndOfStreamError } from 'strtok3';\nimport { DataType } from './types.js';\nimport * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:ebml');\nexport class EbmlContentError extends makeUnexpectedFileContentError('EBML') {\n}\nexport const ParseAction = {\n    ReadNext: 0, // Continue reading the next elements\n    IgnoreElement: 2, // Ignore (do not read) this element\n    SkipSiblings: 3, // Skip all remaining elements at the same level\n    TerminateParsing: 4, // Terminate the parsing process\n    SkipElement: 5 // Consider the element has read, assume position is at the next element\n};\n/**\n * Extensible Binary Meta Language (EBML) iterator\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nexport class EbmlIterator {\n    /**\n     * @param {ITokenizer} tokenizer Input\n     * @param tokenizer\n     */\n    constructor(tokenizer) {\n        this.padding = 0;\n        this.parserMap = new Map();\n        this.ebmlMaxIDLength = 4;\n        this.ebmlMaxSizeLength = 8;\n        this.tokenizer = tokenizer;\n        this.parserMap.set(DataType.uint, e => this.readUint(e));\n        this.parserMap.set(DataType.string, e => this.readString(e));\n        this.parserMap.set(DataType.binary, e => this.readBuffer(e));\n        this.parserMap.set(DataType.uid, async (e) => this.readBuffer(e));\n        this.parserMap.set(DataType.bool, e => this.readFlag(e));\n        this.parserMap.set(DataType.float, e => this.readFloat(e));\n    }\n    async iterate(dtdElement, posDone, listener) {\n        return this.parseContainer(linkParents(dtdElement), posDone, listener);\n    }\n    async parseContainer(dtdElement, posDone, listener) {\n        const tree = {};\n        while (this.tokenizer.position < posDone) {\n            let element;\n            const elementPosition = this.tokenizer.position;\n            try {\n                element = await this.readElement();\n            }\n            catch (error) {\n                if (error instanceof EndOfStreamError) {\n                    break;\n                }\n                throw error;\n            }\n            const child = dtdElement.container[element.id];\n            if (child) {\n                const action = listener.startNext(child);\n                switch (action) {\n                    case ParseAction.ReadNext:\n                        {\n                            if (element.id === 0x1F43B675) {\n                                // Hack to ignore remaining segment, when cluster element received\n                                // await this.tokenizer.ignore(posDone - this.tokenizer.position);\n                                // break;\n                            }\n                            debug(`Read element: name=${getElementPath(child)}{id=0x${element.id.toString(16)}, container=${!!child.container}} at position=${elementPosition}`);\n                            if (child.container) {\n                                const res = await this.parseContainer(child, element.len >= 0 ? this.tokenizer.position + element.len : -1, listener);\n                                if (child.multiple) {\n                                    if (!tree[child.name]) {\n                                        tree[child.name] = [];\n                                    }\n                                    tree[child.name].push(res);\n                                }\n                                else {\n                                    tree[child.name] = res;\n                                }\n                                await listener.elementValue(child, res, elementPosition);\n                            }\n                            else {\n                                const parser = this.parserMap.get(child.value);\n                                if (typeof parser === 'function') {\n                                    const value = await parser(element);\n                                    tree[child.name] = value;\n                                    await listener.elementValue(child, value, elementPosition);\n                                }\n                            }\n                        }\n                        break;\n                    case ParseAction.SkipElement:\n                        debug(`Go to next element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        break;\n                    case ParseAction.IgnoreElement:\n                        debug(`Ignore element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    case ParseAction.SkipSiblings:\n                        debug(`Ignore remaining container, at: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        await this.tokenizer.ignore(posDone - this.tokenizer.position);\n                        break;\n                    case ParseAction.TerminateParsing:\n                        debug(`Terminate parsing at element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        return tree;\n                }\n            }\n            else {\n                switch (element.id) {\n                    case 0xec: // void\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    default:\n                        debug(`parseEbml: parent=${getElementPath(dtdElement)}, unknown child: id=${element.id.toString(16)} at position=${elementPosition}`);\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                }\n            }\n        }\n        return tree;\n    }\n    async readVintData(maxLength) {\n        const msb = await this.tokenizer.peekNumber(UINT8);\n        let mask = 0x80;\n        let oc = 1;\n        // Calculate VINT_WIDTH\n        while ((msb & mask) === 0) {\n            if (oc > maxLength) {\n                throw new EbmlContentError('VINT value exceeding maximum size');\n            }\n            ++oc;\n            mask >>= 1;\n        }\n        const id = new Uint8Array(oc);\n        await this.tokenizer.readBuffer(id);\n        return id;\n    }\n    async readElement() {\n        const id = await this.readVintData(this.ebmlMaxIDLength);\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\n        return {\n            id: readUIntBE(id, id.length),\n            len: readUIntBE(lenField, lenField.length)\n        };\n    }\n    async readFloat(e) {\n        switch (e.len) {\n            case 0:\n                return 0.0;\n            case 4:\n                return this.tokenizer.readNumber(Float32_BE);\n            case 8:\n                return this.tokenizer.readNumber(Float64_BE);\n            case 10:\n                return this.tokenizer.readNumber(Float64_BE);\n            default:\n                throw new EbmlContentError(`Invalid IEEE-754 float length: ${e.len}`);\n        }\n    }\n    async readFlag(e) {\n        return (await this.readUint(e)) === 1;\n    }\n    async readUint(e) {\n        const buf = await this.readBuffer(e);\n        return readUIntBE(buf, e.len);\n    }\n    async readString(e) {\n        const rawString = await this.tokenizer.readToken(new StringType(e.len, 'utf-8'));\n        return rawString.replace(/\\x00.*$/g, '');\n    }\n    async readBuffer(e) {\n        const buf = new Uint8Array(e.len);\n        await this.tokenizer.readBuffer(buf);\n        return buf;\n    }\n}\nfunction readUIntBE(buf, len) {\n    return Number(readUIntBeAsBigInt(buf, len));\n}\n/**\n * Reeds an unsigned integer from a big endian buffer of length `len`\n * @param buf Buffer to decode from\n * @param len Number of bytes\n * @private\n */\nfunction readUIntBeAsBigInt(buf, len) {\n    const normalizedNumber = new Uint8Array(8);\n    const cleanNumber = buf.subarray(0, len);\n    try {\n        normalizedNumber.set(cleanNumber, 8 - len);\n        return Token.UINT64_BE.get(normalizedNumber, 0);\n    }\n    catch (error) {\n        return BigInt(-1);\n    }\n}\nfunction linkParents(element) {\n    if (element.container) {\n        Object.keys(element.container)\n            .map(id => {\n            const child = element.container[id];\n            child.id = Number.parseInt(id);\n            return child;\n        }).forEach(child => {\n            child.parent = element;\n            linkParents(child);\n        });\n    }\n    return element;\n}\nexport function getElementPath(element) {\n    let path = '';\n    if (element.parent && element.parent.name !== 'dtd') {\n        path += `${getElementPath(element.parent)}/`;\n    }\n    return path + element.name;\n}\n//# sourceMappingURL=EbmlIterator.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { matroskaDtd } from './MatroskaDtd.js';\nimport { TargetType, TrackType } from './types.js';\nimport { EbmlIterator, ParseAction } from '../ebml/EbmlIterator.js';\nconst debug = initDebug('music-metadata:parser:matroska');\n/**\n * Extensible Binary Meta Language (EBML) parser\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nexport class MatroskaParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.seekHeadOffset = 0;\n        /**\n         * Use index to skip multiple segment/cluster elements at once.\n         * Significant performance impact\n         */\n        this.flagUseIndexToSkipClusters = this.options.mkvUseIndex ?? false;\n    }\n    async parse() {\n        const containerSize = this.tokenizer.fileInfo.size ?? Number.MAX_SAFE_INTEGER;\n        const matroskaIterator = new EbmlIterator(this.tokenizer);\n        debug('Initializing DTD end MatroskaIterator');\n        await matroskaIterator.iterate(matroskaDtd, containerSize, {\n            startNext: (element) => {\n                switch (element.id) {\n                    // case 0x1f43b675: // cluster\n                    case 0x1c53bb6b: // Cueing Data\n                        debug(`Skip element: name=${element.name}, id=0x${element.id.toString(16)}`);\n                        return ParseAction.IgnoreElement;\n                    case 0x1f43b675: // cluster\n                        if (this.flagUseIndexToSkipClusters && this.seekHead) {\n                            const index = this.seekHead.seek.find(index => index.position + this.seekHeadOffset > this.tokenizer.position);\n                            if (index) {\n                                // Go to next index position\n                                const ignoreSize = index.position + this.seekHeadOffset - this.tokenizer.position;\n                                debug(`Use index to go to next position, ignoring ${ignoreSize} bytes`);\n                                this.tokenizer.ignore(ignoreSize);\n                                return ParseAction.SkipElement;\n                            }\n                        }\n                        return ParseAction.IgnoreElement;\n                    default:\n                        return ParseAction.ReadNext;\n                }\n            },\n            elementValue: async (element, value, offset) => {\n                debug(`Received: name=${element.name}, value=${value}`);\n                switch (element.id) {\n                    case 0x4282: // docType\n                        this.metadata.setFormat('container', `EBML/${value}`);\n                        break;\n                    case 0x114d9b74:\n                        this.seekHead = value;\n                        this.seekHeadOffset = offset;\n                        break;\n                    case 0x1549a966:\n                        { // Info (Segment Information)\n                            const info = value;\n                            const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\n                            if (typeof info.duration === 'number') {\n                                const duration = info.duration * timecodeScale / 1000000000;\n                                await this.addTag('segment:title', info.title);\n                                this.metadata.setFormat('duration', Number(duration));\n                            }\n                        }\n                        break;\n                    case 0x1654ae6b:\n                        { // tracks\n                            const audioTracks = value;\n                            if (audioTracks?.entries) {\n                                audioTracks.entries.forEach(entry => {\n                                    const stream = {\n                                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\n                                        codecSettings: entry.codecSettings,\n                                        flagDefault: entry.flagDefault,\n                                        flagLacing: entry.flagLacing,\n                                        flagEnabled: entry.flagEnabled,\n                                        language: entry.language,\n                                        name: entry.name,\n                                        type: entry.trackType,\n                                        audio: entry.audio,\n                                        video: entry.video\n                                    };\n                                    this.metadata.addStreamInfo(stream);\n                                });\n                                const audioTrack = audioTracks.entries\n                                    .filter(entry => entry.trackType === TrackType.audio)\n                                    .reduce((acc, cur) => {\n                                    if (!acc)\n                                        return cur;\n                                    if (cur.flagDefault && !acc.flagDefault)\n                                        return cur;\n                                    if (cur.trackNumber < acc.trackNumber)\n                                        return cur;\n                                    return acc;\n                                }, null);\n                                if (audioTrack) {\n                                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\n                                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\n                                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\n                                }\n                            }\n                        }\n                        break;\n                    case 0x1254c367:\n                        { // tags\n                            const tags = value;\n                            await Promise.all(tags.tag.map(async (tag) => {\n                                const target = tag.target;\n                                const targetType = target?.targetTypeValue ? TargetType[target.targetTypeValue] : (target?.targetType ? target.targetType : 'track');\n                                await Promise.all(tag.simpleTags.map(async (simpleTag) => {\n                                    const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\n                                    await this.addTag(`${targetType}:${simpleTag.name}`, value);\n                                }));\n                            }));\n                        }\n                        break;\n                    case 0x1941a469:\n                        { // attachments\n                            const attachments = value;\n                            await Promise.all(attachments.attachedFiles\n                                .filter(file => file.mimeType.startsWith('image/'))\n                                .map(file => this.addTag('picture', {\n                                data: file.data,\n                                format: file.mimeType,\n                                description: file.description,\n                                name: file.name\n                            })));\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    async addTag(tagId, value) {\n        await this.metadata.addTag('matroska', tagId, value);\n    }\n}\n//# sourceMappingURL=MatroskaParser.js.map"],"names":["matroskaDtd","name","container","value","multiple","debug","EbmlContentError","EbmlIterator","constructor","tokenizer","this","padding","parserMap","Map","ebmlMaxIDLength","ebmlMaxSizeLength","set","e","readUint","readString","readBuffer","async","readFlag","readFloat","iterate","dtdElement","posDone","listener","parseContainer","linkParents","tree","position","element","elementPosition","readElement","error","child","id","startNext","getElementPath","toString","res","len","push","elementValue","parser","get","ignore","readVintData","maxLength","msb","peekNumber","UINT8","mask","oc","Uint8Array","lenField","length","readUIntBE","readNumber","Float32_BE","Float64_BE","readToken","StringType","replace","buf","Number","normalizedNumber","cleanNumber","subarray","BigInt","readUIntBeAsBigInt","Object","keys","map","parseInt","forEach","parent","path","MatroskaParser","BasicParser","super","arguments","seekHeadOffset","flagUseIndexToSkipClusters","options","mkvUseIndex","parse","containerSize","fileInfo","size","MAX_SAFE_INTEGER","matroskaIterator","seekHead","index","seek","find","ignoreSize","offset","metadata","setFormat","info","timecodeScale","duration","addTag","title","audioTracks","entries","entry","stream","codecName","codecID","codecSettings","flagDefault","flagLacing","flagEnabled","language","type","trackType","audio","video","addStreamInfo","audioTrack","filter","reduce","acc","cur","trackNumber","samplingFrequency","channels","tags","Promise","all","tag","target","targetType","targetTypeValue","simpleTags","simpleTag","string","binary","attachments","attachedFiles","file","mimeType","startsWith","data","format","description","tagId"],"sourceRoot":""}