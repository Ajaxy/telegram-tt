{"version":3,"file":"8925.060fa1d8c8f82840c6a4.js","mappings":"6LAcIA,E,WAyBJC,eAAeC,EAAUC,EAAOC,GAC5BC,OAAOC,iCAAiCC,mBAAmBJ,EAAOC,SAC5D,IAAAI,QAAO,wBAAyB,CAClCL,QACAC,WAER,CAuBAH,eAAeQ,EAAON,EAAOO,EAASC,GAClC,IAAIC,EACJ,MAAMC,EAAuF,iBAAtEF,aAAyC,EAASA,EAAQE,QAC3E,CAAEC,KAAM,WAAYC,MAAOJ,EAAQE,QAC0C,QAA3ED,EAAKD,aAAyC,EAASA,EAAQE,cAA2B,IAAPD,EAAgBA,EAAK,CAAEE,KAAM,OACxH,OAAO,IAAAN,QAAO,sBAAuB,CACjCL,QACAU,SACAH,SAAS,IAAAM,mBAAkBN,KAC5BO,KAAMb,GACEH,SAAYC,EAAUC,EAAOC,GAE5C,CA2BAH,eAAeiB,EAAKf,EAAOO,EAASC,GAChC,OAAOF,EAAON,EAAQgB,IACbjB,EAAUC,EAAOgB,EAAUC,IAChCV,EAAQS,IACTR,EACP,CAeAV,eAAeoB,EAAKlB,EAAOmB,SACjB,IAAAd,QAAO,oBAAqB,CAC9BL,QACAmB,WAER,CAgBArB,eAAesB,EAAOV,EAAQV,EAAOmB,GACjC,MAAME,EAAgC,iBAAXX,EAAsB,CAAEC,KAAM,WAAYC,MAAOF,GAAWA,QACjF,IAAAL,QAAO,uBAAwB,CACjCK,OAAQW,EACRrB,QACAmB,WAER,EA5IA,SAAWtB,GACPA,EAA2B,eAAI,iBAC/BA,EAAyB,aAAI,eAC7BA,EAAmC,uBAAI,0BACvCA,EAA6B,iBAAI,oBACjCA,EAAyB,aAAI,gBAC7BA,EAAwB,YAAI,eAC5BA,EAAwC,4BAAI,uBAC5CA,EAAiC,qBAAI,wBACrCA,EAA2B,eAAI,yBAC/BA,EAA4B,gBAAI,0BAChCA,EAAuB,WAAI,qBAC3BA,EAAsB,UAAI,oBAC1BA,EAAsB,UAAI,oBAC1BA,EAAuB,WAAI,oBAC9B,CAfD,CAeGA,IAAeA,EAAa,CAAC,G","sources":["webpack://telegram-t/./node_modules/@tauri-apps/api/event.js"],"sourcesContent":["import { invoke, transformCallback } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener(event, eventId);\n    await invoke('plugin:event|unlisten', {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\n        ? { kind: 'AnyLabel', label: options.target }\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\n    return invoke('plugin:event|listen', {\n        event,\n        target,\n        handler: transformCallback(handler)\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n    return listen(event, (eventData) => {\n        void _unlisten(event, eventData.id);\n        handler(eventData);\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    await invoke('plugin:event|emit', {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\n    await invoke('plugin:event|emit_to', {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\nexport { TauriEvent, emit, emitTo, listen, once };\n"],"names":["TauriEvent","async","_unlisten","event","eventId","window","__TAURI_EVENT_PLUGIN_INTERNALS__","unregisterListener","invoke","listen","handler","options","_a","target","kind","label","transformCallback","then","once","eventData","id","emit","payload","emitTo","eventTarget"],"sourceRoot":""}