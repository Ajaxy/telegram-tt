{"version":3,"file":"984.4e83d9e9411bec9ff65f.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js","webpack://telegram-t/./node_modules/music-metadata/lib/musepack/MusepackConentError.js","webpack://telegram-t/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js","webpack://telegram-t/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js","webpack://telegram-t/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js","webpack://telegram-t/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js","webpack://telegram-t/./node_modules/music-metadata/lib/musepack/MusepackParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../../common/Util.js';\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'latin1');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nexport class StreamReader {\n    get tokenizer() {\n        return this._tokenizer;\n    }\n    set tokenizer(value) {\n        this._tokenizer = value;\n    }\n    constructor(_tokenizer) {\n        this._tokenizer = _tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\n//# sourceMappingURL=StreamVersion8.js.map","import { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class MusepackContentError extends makeUnexpectedFileContentError('Musepack') {\n}\n//# sourceMappingURL=MusepackConentError.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport * as SV8 from './StreamVersion8.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv8Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCcToken);\n        if (signature !== 'MPCK')\n            throw new MusepackContentError('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': { // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                }\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    if (this.metadata.format.duration) {\n                        this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    }\n                    return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new MusepackContentError(`Unexpected header: ${header.key}`);\n            }\n            // biome-ignore lint/correctness/noConstantCondition: break is handled in the switch statement\n        } while (true);\n    }\n}\n//# sourceMappingURL=MpcSv8Parser.js.map","import * as Token from 'token-types';\nexport class BitReader {\n    constructor(tokenizer) {\n        this.pos = 0;\n        this.dword = null;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === null) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        this.pos -= 32;\n        if (this.pos === 0) {\n            this.dword = null;\n            return out & ((1 << bits) - 1);\n        }\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        if (this.pos) {\n            out <<= this.pos;\n            out |= this.dword >>> (32 - this.pos);\n        }\n        return out & ((1 << bits) - 1);\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = null;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\n//# sourceMappingURL=BitReader.js.map","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * BASIC STRUCTURE\n */\nexport const Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: new TextDecoder('latin1').decode(buf.subarray(off, off + 3)),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n//# sourceMappingURL=StreamVersion7.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\nimport { BitReader } from './BitReader.js';\nimport * as SV7 from './StreamVersion7.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv7Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.bitreader = null;\n        this.audioLength = 0;\n        this.duration = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new MusepackContentError('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        if (this.duration !== null) {\n            this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n        }\n    }\n}\n//# sourceMappingURL=MpcSv7Parser.js.map","import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { MpcSv8Parser } from './sv8/MpcSv8Parser.js';\nimport { MpcSv7Parser } from './sv7/MpcSv7Parser.js';\nimport { MusepackContentError } from './MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MusepackParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'latin1'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Stream-version 7');\n                mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            case 'MPC': {\n                debug('Stream-version 8');\n                mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            default: {\n                throw new MusepackContentError('Invalid signature prefix');\n            }\n        }\n        return mpcParser.parse();\n    }\n}\n//# sourceMappingURL=MusepackParser.js.map","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map"],"names":["debug","PacketKey","SH_part1","len","get","buf","off","crc","streamVersion","SH_part3","sampleFrequency","maxUsedBands","channelCount","msUsed","audioBlockFrames","StreamReader","tokenizer","this","_tokenizer","value","constructor","readPacketHeader","key","readToken","size","readVariableSizeField","payloadLength","readStreamHeader","streamHeader","position","part1","Object","assign","sampleCount","bs","beginningOfSilence","part3","ignore","hb","n","readNumber","MusepackContentError","MpcSv8Parser","BasicParser","super","arguments","audioLength","parse","metadata","setFormat","parsePacket","sv8reader","header","sh","format","duration","APEv2Parser","tryParseApeHeader","options","BitReader","pos","dword","read","bits","out","remaining","remainder","numOfWords","Header","signature","TextDecoder","decode","subarray","streamMinorVersion","streamMajorVersion","frameCount","maxLevel","link","profile","maxBand","intensityStereo","midSideStereo","titlePeak","titleGain","albumPeak","albumGain","lastFrameLength","trueGapless","MpcSv7Parser","bitreader","numberOfSamples","version","toFixed","skipAudioData","frameLength","MusepackParser","AbstractID3Parser","postId3v2Parse","mpcParser","peekToken","id3parser","startsWithID3v2Header","fileIdentifier","parseID3v2","err","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser"],"sourceRoot":""}