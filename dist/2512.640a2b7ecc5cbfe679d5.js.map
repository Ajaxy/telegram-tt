{"version":3,"file":"2512.640a2b7ecc5cbfe679d5.js","mappings":"yeAWIA,EAqCAC,EAQAC,E,YA5CJ,SAAWF,GACPA,EAAoB,KAAI,OACxBA,EAAqB,MAAI,QACzBA,EAAwB,SAAI,WAC5BA,EAAoB,KAAI,OACxBA,EAAmB,IAAI,MACvBA,EAAoB,KAAI,OACxBA,EAAsB,OAAI,SAI1BA,EAAsB,OAAI,QAC7B,CAZD,CAYGA,IAAkBA,EAAgB,CAAC,IACtC,MAAMG,EACF,SAAOC,CAAGC,EAAMC,GAAY,EAAOC,GAAiB,GAChD,MAAO,CACHH,GAAI,CAAEC,OAAMC,YAAWC,kBACvBC,cAAUC,EACVC,WAAOD,EAEf,CACA,eAAOD,CAASA,EAAUD,GAAiB,GACvC,MAAO,CACHH,QAAIK,EACJD,SAAU,CAAEA,WAAUD,kBACtBG,WAAOD,EAEf,CACA,YAAOC,CAAMC,EAAMC,EAAOL,GAAiB,GACvC,MAAO,CACHH,QAAIK,EACJD,cAAUC,EACVC,MAAO,CAAEF,SAAUG,EAAMC,QAAOL,kBAExC,EA0BJM,eAAeC,IACX,MAAuC,YAAnCC,OAAOC,aAAaC,iBACPC,QAAQC,QAA2C,YAAnCJ,OAAOC,aAAaC,kBAExC,IAAAG,QAAO,4CACxB,CAiBAP,eAAeQ,IACX,aAAaN,OAAOC,aAAaK,mBACrC,CAmBA,SAASC,EAAiBC,GACC,iBAAZA,EACP,IAAIR,OAAOC,aAAaO,GAGxB,IAAIR,OAAOC,aAAaO,EAAQC,MAAOD,EAE/C,CAoBAV,eAAeY,EAAoBC,SACzB,IAAAN,QAAO,4CAA6C,CAAEM,SAChE,CAcAb,eAAec,IACX,aAAa,IAAAP,QAAO,kCACxB,CAcAP,eAAee,EAAOC,SACZ,IAAAT,QAAO,6BAA8B,CAAES,iBACjD,CAcAhB,eAAeiB,UACL,IAAAV,QAAO,6BACjB,CAcAP,eAAekB,IACX,aAAa,IAAAX,QAAO,iCACxB,CAcAP,eAAemB,EAAaH,SAClB,IAAAT,QAAO,oCAAqC,CAAES,iBACxD,CAcAhB,eAAeoB,UACL,IAAAb,QAAO,oCACjB,CAqBAP,eAAeqB,EAAcC,SACnB,IAAAf,QAAO,qCAAsC,IAAKe,GAC5D,CAcAtB,eAAeuB,EAAcC,SACnB,IAAAjB,QAAO,qCAAsC,CAAEiB,MACzD,CAcAxB,eAAeyB,IACX,aAAa,IAAAlB,QAAO,mCACxB,CACAP,eAAe0B,EAAuBC,GAClC,aAAa,IAAAC,mBAAkB,eAAgB,eAAgBD,EACnE,CACA3B,eAAe6B,EAASF,GACpB,aAAa,IAAAC,mBAAkB,eAAgB,kBAAmBD,EACtE,EA5PA,SAAWvC,GACPA,EAAWA,EAAiB,KAAI,GAAK,OACrCA,EAAWA,EAAgB,IAAI,GAAK,MACpCA,EAAWA,EAAgB,IAAI,GAAK,MACpCA,EAAWA,EAAoB,QAAI,GAAK,UACxCA,EAAWA,EAAiB,KAAI,GAAK,MACxC,CAND,CAMGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAWA,EAAmB,QAAK,GAAK,SACxCA,EAAWA,EAAoB,QAAI,GAAK,UACxCA,EAAWA,EAAmB,OAAI,GAAK,QAC1C,CAJD,CAIGA,IAAeA,EAAa,CAAC,G","sources":["webpack://telegram-t/./node_modules/@tauri-apps/plugin-notification/dist-js/index.js"],"sourcesContent":["import { invoke, addPluginListener } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Send toast notifications (brief auto-expiring OS window element) to your user.\n * Can also be used with the Notification Web API.\n *\n * @module\n */\nvar ScheduleEvery;\n(function (ScheduleEvery) {\n    ScheduleEvery[\"Year\"] = \"year\";\n    ScheduleEvery[\"Month\"] = \"month\";\n    ScheduleEvery[\"TwoWeeks\"] = \"twoWeeks\";\n    ScheduleEvery[\"Week\"] = \"week\";\n    ScheduleEvery[\"Day\"] = \"day\";\n    ScheduleEvery[\"Hour\"] = \"hour\";\n    ScheduleEvery[\"Minute\"] = \"minute\";\n    /**\n     * Not supported on iOS.\n     */\n    ScheduleEvery[\"Second\"] = \"second\";\n})(ScheduleEvery || (ScheduleEvery = {}));\nclass Schedule {\n    static at(date, repeating = false, allowWhileIdle = false) {\n        return {\n            at: { date, repeating, allowWhileIdle },\n            interval: undefined,\n            every: undefined\n        };\n    }\n    static interval(interval, allowWhileIdle = false) {\n        return {\n            at: undefined,\n            interval: { interval, allowWhileIdle },\n            every: undefined\n        };\n    }\n    static every(kind, count, allowWhileIdle = false) {\n        return {\n            at: undefined,\n            interval: undefined,\n            every: { interval: kind, count, allowWhileIdle }\n        };\n    }\n}\nvar Importance;\n(function (Importance) {\n    Importance[Importance[\"None\"] = 0] = \"None\";\n    Importance[Importance[\"Min\"] = 1] = \"Min\";\n    Importance[Importance[\"Low\"] = 2] = \"Low\";\n    Importance[Importance[\"Default\"] = 3] = \"Default\";\n    Importance[Importance[\"High\"] = 4] = \"High\";\n})(Importance || (Importance = {}));\nvar Visibility;\n(function (Visibility) {\n    Visibility[Visibility[\"Secret\"] = -1] = \"Secret\";\n    Visibility[Visibility[\"Private\"] = 0] = \"Private\";\n    Visibility[Visibility[\"Public\"] = 1] = \"Public\";\n})(Visibility || (Visibility = {}));\n/**\n * Checks if the permission to send notifications is granted.\n * @example\n * ```typescript\n * import { isPermissionGranted } from '@tauri-apps/plugin-notification';\n * const permissionGranted = await isPermissionGranted();\n * ```\n *\n * @since 2.0.0\n */\nasync function isPermissionGranted() {\n    if (window.Notification.permission !== 'default') {\n        return await Promise.resolve(window.Notification.permission === 'granted');\n    }\n    return await invoke('plugin:notification|is_permission_granted');\n}\n/**\n * Requests the permission to send notifications.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission } from '@tauri-apps/plugin-notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * ```\n *\n * @returns A promise resolving to whether the user granted the permission or not.\n *\n * @since 2.0.0\n */\nasync function requestPermission() {\n    return await window.Notification.requestPermission();\n}\n/**\n * Sends a notification to the user.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission, sendNotification } from '@tauri-apps/plugin-notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * if (permissionGranted) {\n *   sendNotification('Tauri is awesome!');\n *   sendNotification({ title: 'TAURI', body: 'Tauri is awesome!' });\n * }\n * ```\n *\n * @since 2.0.0\n */\nfunction sendNotification(options) {\n    if (typeof options === 'string') {\n        new window.Notification(options);\n    }\n    else {\n        new window.Notification(options.title, options);\n    }\n}\n/**\n * Register actions that are performed when the user clicks on the notification.\n *\n * @example\n * ```typescript\n * import { registerActionTypes } from '@tauri-apps/plugin-notification';\n * await registerActionTypes([{\n *   id: 'tauri',\n *   actions: [{\n *     id: 'my-action',\n *     title: 'Settings'\n *   }]\n * }])\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function registerActionTypes(types) {\n    await invoke('plugin:notification|register_action_types', { types });\n}\n/**\n * Retrieves the list of pending notifications.\n *\n * @example\n * ```typescript\n * import { pending } from '@tauri-apps/plugin-notification';\n * const pendingNotifications = await pending();\n * ```\n *\n * @returns A promise resolving to the list of pending notifications.\n *\n * @since 2.0.0\n */\nasync function pending() {\n    return await invoke('plugin:notification|get_pending');\n}\n/**\n * Cancels the pending notifications with the given list of identifiers.\n *\n * @example\n * ```typescript\n * import { cancel } from '@tauri-apps/plugin-notification';\n * await cancel([-34234, 23432, 4311]);\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function cancel(notifications) {\n    await invoke('plugin:notification|cancel', { notifications });\n}\n/**\n * Cancels all pending notifications.\n *\n * @example\n * ```typescript\n * import { cancelAll } from '@tauri-apps/plugin-notification';\n * await cancelAll();\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function cancelAll() {\n    await invoke('plugin:notification|cancel');\n}\n/**\n * Retrieves the list of active notifications.\n *\n * @example\n * ```typescript\n * import { active } from '@tauri-apps/plugin-notification';\n * const activeNotifications = await active();\n * ```\n *\n * @returns A promise resolving to the list of active notifications.\n *\n * @since 2.0.0\n */\nasync function active() {\n    return await invoke('plugin:notification|get_active');\n}\n/**\n * Removes the active notifications with the given list of identifiers.\n *\n * @example\n * ```typescript\n * import { cancel } from '@tauri-apps/plugin-notification';\n * await cancel([-34234, 23432, 4311])\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function removeActive(notifications) {\n    await invoke('plugin:notification|remove_active', { notifications });\n}\n/**\n * Removes all active notifications.\n *\n * @example\n * ```typescript\n * import { removeAllActive } from '@tauri-apps/plugin-notification';\n * await removeAllActive()\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function removeAllActive() {\n    await invoke('plugin:notification|remove_active');\n}\n/**\n * Creates a notification channel.\n *\n * @example\n * ```typescript\n * import { createChannel, Importance, Visibility } from '@tauri-apps/plugin-notification';\n * await createChannel({\n *   id: 'new-messages',\n *   name: 'New Messages',\n *   lights: true,\n *   vibration: true,\n *   importance: Importance.Default,\n *   visibility: Visibility.Private\n * });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function createChannel(channel) {\n    await invoke('plugin:notification|create_channel', { ...channel });\n}\n/**\n * Removes the channel with the given identifier.\n *\n * @example\n * ```typescript\n * import { removeChannel } from '@tauri-apps/plugin-notification';\n * await removeChannel();\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function removeChannel(id) {\n    await invoke('plugin:notification|delete_channel', { id });\n}\n/**\n * Retrieves the list of notification channels.\n *\n * @example\n * ```typescript\n * import { channels } from '@tauri-apps/plugin-notification';\n * const notificationChannels = await channels();\n * ```\n *\n * @returns A promise resolving to the list of notification channels.\n *\n * @since 2.0.0\n */\nasync function channels() {\n    return await invoke('plugin:notification|listChannels');\n}\nasync function onNotificationReceived(cb) {\n    return await addPluginListener('notification', 'notification', cb);\n}\nasync function onAction(cb) {\n    return await addPluginListener('notification', 'actionPerformed', cb);\n}\n\nexport { Importance, Schedule, ScheduleEvery, Visibility, active, cancel, cancelAll, channels, createChannel, isPermissionGranted, onAction, onNotificationReceived, pending, registerActionTypes, removeActive, removeAllActive, removeChannel, requestPermission, sendNotification };\n"],"names":["ScheduleEvery","Importance","Visibility","Schedule","at","date","repeating","allowWhileIdle","interval","undefined","every","kind","count","async","isPermissionGranted","window","Notification","permission","Promise","resolve","invoke","requestPermission","sendNotification","options","title","registerActionTypes","types","pending","cancel","notifications","cancelAll","active","removeActive","removeAllActive","createChannel","channel","removeChannel","id","channels","onNotificationReceived","cb","addPluginListener","onAction"],"sourceRoot":""}