{"version":3,"file":"2859.b580acee05fc2edc89ce.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarBots,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        tabId,\n        mode,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = addSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text,\n  } = params;\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","addChatListIds","addUserStatuses","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","length","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","openThread","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","topic","selectTopic","lastTopicMessageId","lastMessageId","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","text","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatWithDraft","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","inviteHash","voicechat","livestream","substring","start","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","key","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","botId","channelPostId","currentChat","isCurrentChat","starRefStartPrefixes","appConfig","prefix","p","slice","startBot","param","action","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","topics","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","selectTopics","chatlistModal","peerIds","peers","currentNotJoinedCount","peer","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","addSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}